"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_payloadcms_richtext-lexical_dist_exports_client_Field-QFHWUA2L_js"],{

/***/ "(app-pages-browser)/./node_modules/@lexical/dragon/LexicalDragon.dev.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@lexical/dragon/LexicalDragon.dev.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   registerDragonSupport: () => (/* binding */ registerDragonSupport)\n/* harmony export */ });\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction registerDragonSupport(editor) {\n  const origin = window.location.origin;\n  const handler = event => {\n    if (event.origin !== origin) {\n      return;\n    }\n    const rootElement = editor.getRootElement();\n    if (document.activeElement !== rootElement) {\n      return;\n    }\n    const data = event.data;\n    if (typeof data === 'string') {\n      let parsedData;\n      try {\n        parsedData = JSON.parse(data);\n      } catch (e) {\n        return;\n      }\n      if (parsedData && parsedData.protocol === 'nuanria_messaging' && parsedData.type === 'request') {\n        const payload = parsedData.payload;\n        if (payload && payload.functionId === 'makeChanges') {\n          const args = payload.args;\n          if (args) {\n            const [elementStart, elementLength, text, selStart, selLength, formatCommand] = args;\n            editor.update(() => {\n              const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getSelection)();\n              if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(selection)) {\n                const anchor = selection.anchor;\n                let anchorNode = anchor.getNode();\n                let setSelStart = 0;\n                let setSelEnd = 0;\n                if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(anchorNode)) {\n                  // set initial selection\n                  if (elementStart >= 0 && elementLength >= 0) {\n                    setSelStart = elementStart;\n                    setSelEnd = elementStart + elementLength;\n                    // If the offset is more than the end, make it the end\n                    selection.setTextNodeRange(anchorNode, setSelStart, anchorNode, setSelEnd);\n                  }\n                }\n                if (setSelStart !== setSelEnd || text !== '') {\n                  selection.insertRawText(text);\n                  anchorNode = anchor.getNode();\n                }\n                if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(anchorNode)) {\n                  // set final selection\n                  setSelStart = selStart;\n                  setSelEnd = selStart + selLength;\n                  const anchorNodeTextLength = anchorNode.getTextContentSize();\n                  // If the offset is more than the end, make it the end\n                  setSelStart = setSelStart > anchorNodeTextLength ? anchorNodeTextLength : setSelStart;\n                  setSelEnd = setSelEnd > anchorNodeTextLength ? anchorNodeTextLength : setSelEnd;\n                  selection.setTextNodeRange(anchorNode, setSelStart, anchorNode, setSelEnd);\n                }\n\n                // block the chrome extension from handling this event\n                event.stopImmediatePropagation();\n              }\n            });\n          }\n        }\n      }\n    }\n  };\n  window.addEventListener('message', handler, true);\n  return () => {\n    window.removeEventListener('message', handler, true);\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9kcmFnb24vTGV4aWNhbERyYWdvbi5kZXYubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXdFOztBQUV4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHNEQUFhO0FBQzdDLGtCQUFrQiwwREFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isb0RBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9EQUFXO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWlDIiwic291cmNlcyI6WyIvVXNlcnMvdHJhbmdpYWtpZXQvRG9jdW1lbnRzL0dpdEh1Yi9ncmVlbmJvb2stY21zL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9kcmFnb24vTGV4aWNhbERyYWdvbi5kZXYubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuaW1wb3J0IHsgJGdldFNlbGVjdGlvbiwgJGlzUmFuZ2VTZWxlY3Rpb24sICRpc1RleHROb2RlIH0gZnJvbSAnbGV4aWNhbCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gcmVnaXN0ZXJEcmFnb25TdXBwb3J0KGVkaXRvcikge1xuICBjb25zdCBvcmlnaW4gPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luO1xuICBjb25zdCBoYW5kbGVyID0gZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC5vcmlnaW4gIT09IG9yaWdpbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByb290RWxlbWVudCA9IGVkaXRvci5nZXRSb290RWxlbWVudCgpO1xuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSByb290RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gZXZlbnQuZGF0YTtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgcGFyc2VkRGF0YTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHBhcnNlZERhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VkRGF0YSAmJiBwYXJzZWREYXRhLnByb3RvY29sID09PSAnbnVhbnJpYV9tZXNzYWdpbmcnICYmIHBhcnNlZERhdGEudHlwZSA9PT0gJ3JlcXVlc3QnKSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBwYXJzZWREYXRhLnBheWxvYWQ7XG4gICAgICAgIGlmIChwYXlsb2FkICYmIHBheWxvYWQuZnVuY3Rpb25JZCA9PT0gJ21ha2VDaGFuZ2VzJykge1xuICAgICAgICAgIGNvbnN0IGFyZ3MgPSBwYXlsb2FkLmFyZ3M7XG4gICAgICAgICAgaWYgKGFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IFtlbGVtZW50U3RhcnQsIGVsZW1lbnRMZW5ndGgsIHRleHQsIHNlbFN0YXJ0LCBzZWxMZW5ndGgsIGZvcm1hdENvbW1hbmRdID0gYXJncztcbiAgICAgICAgICAgIGVkaXRvci51cGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSAkZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICAgIGlmICgkaXNSYW5nZVNlbGVjdGlvbihzZWxlY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gc2VsZWN0aW9uLmFuY2hvcjtcbiAgICAgICAgICAgICAgICBsZXQgYW5jaG9yTm9kZSA9IGFuY2hvci5nZXROb2RlKCk7XG4gICAgICAgICAgICAgICAgbGV0IHNldFNlbFN0YXJ0ID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgc2V0U2VsRW5kID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoJGlzVGV4dE5vZGUoYW5jaG9yTm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgIC8vIHNldCBpbml0aWFsIHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRTdGFydCA+PSAwICYmIGVsZW1lbnRMZW5ndGggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRTZWxTdGFydCA9IGVsZW1lbnRTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgc2V0U2VsRW5kID0gZWxlbWVudFN0YXJ0ICsgZWxlbWVudExlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG9mZnNldCBpcyBtb3JlIHRoYW4gdGhlIGVuZCwgbWFrZSBpdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5zZXRUZXh0Tm9kZVJhbmdlKGFuY2hvck5vZGUsIHNldFNlbFN0YXJ0LCBhbmNob3JOb2RlLCBzZXRTZWxFbmQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2V0U2VsU3RhcnQgIT09IHNldFNlbEVuZCB8fCB0ZXh0ICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmluc2VydFJhd1RleHQodGV4dCk7XG4gICAgICAgICAgICAgICAgICBhbmNob3JOb2RlID0gYW5jaG9yLmdldE5vZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCRpc1RleHROb2RlKGFuY2hvck5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBzZXQgZmluYWwgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICBzZXRTZWxTdGFydCA9IHNlbFN0YXJ0O1xuICAgICAgICAgICAgICAgICAgc2V0U2VsRW5kID0gc2VsU3RhcnQgKyBzZWxMZW5ndGg7XG4gICAgICAgICAgICAgICAgICBjb25zdCBhbmNob3JOb2RlVGV4dExlbmd0aCA9IGFuY2hvck5vZGUuZ2V0VGV4dENvbnRlbnRTaXplKCk7XG4gICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgb2Zmc2V0IGlzIG1vcmUgdGhhbiB0aGUgZW5kLCBtYWtlIGl0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgIHNldFNlbFN0YXJ0ID0gc2V0U2VsU3RhcnQgPiBhbmNob3JOb2RlVGV4dExlbmd0aCA/IGFuY2hvck5vZGVUZXh0TGVuZ3RoIDogc2V0U2VsU3RhcnQ7XG4gICAgICAgICAgICAgICAgICBzZXRTZWxFbmQgPSBzZXRTZWxFbmQgPiBhbmNob3JOb2RlVGV4dExlbmd0aCA/IGFuY2hvck5vZGVUZXh0TGVuZ3RoIDogc2V0U2VsRW5kO1xuICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLnNldFRleHROb2RlUmFuZ2UoYW5jaG9yTm9kZSwgc2V0U2VsU3RhcnQsIGFuY2hvck5vZGUsIHNldFNlbEVuZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gYmxvY2sgdGhlIGNocm9tZSBleHRlbnNpb24gZnJvbSBoYW5kbGluZyB0aGlzIGV2ZW50XG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBoYW5kbGVyLCB0cnVlKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGhhbmRsZXIsIHRydWUpO1xuICB9O1xufVxuXG5leHBvcnQgeyByZWdpc3RlckRyYWdvblN1cHBvcnQgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/dragon/LexicalDragon.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/history/LexicalHistory.dev.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@lexical/history/LexicalHistory.dev.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEmptyHistoryState: () => (/* binding */ createEmptyHistoryState),\n/* harmony export */   registerHistory: () => (/* binding */ registerHistory)\n/* harmony export */ });\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst HISTORY_MERGE = 0;\nconst HISTORY_PUSH = 1;\nconst DISCARD_HISTORY_CANDIDATE = 2;\nconst OTHER = 0;\nconst COMPOSING_CHARACTER = 1;\nconst INSERT_CHARACTER_AFTER_SELECTION = 2;\nconst DELETE_CHARACTER_BEFORE_SELECTION = 3;\nconst DELETE_CHARACTER_AFTER_SELECTION = 4;\nfunction getDirtyNodes(editorState, dirtyLeaves, dirtyElements) {\n  const nodeMap = editorState._nodeMap;\n  const nodes = [];\n  for (const dirtyLeafKey of dirtyLeaves) {\n    const dirtyLeaf = nodeMap.get(dirtyLeafKey);\n    if (dirtyLeaf !== undefined) {\n      nodes.push(dirtyLeaf);\n    }\n  }\n  for (const [dirtyElementKey, intentionallyMarkedAsDirty] of dirtyElements) {\n    if (!intentionallyMarkedAsDirty) {\n      continue;\n    }\n    const dirtyElement = nodeMap.get(dirtyElementKey);\n    if (dirtyElement !== undefined && !(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRootNode)(dirtyElement)) {\n      nodes.push(dirtyElement);\n    }\n  }\n  return nodes;\n}\nfunction getChangeType(prevEditorState, nextEditorState, dirtyLeavesSet, dirtyElementsSet, isComposing) {\n  if (prevEditorState === null || dirtyLeavesSet.size === 0 && dirtyElementsSet.size === 0 && !isComposing) {\n    return OTHER;\n  }\n  const nextSelection = nextEditorState._selection;\n  const prevSelection = prevEditorState._selection;\n  if (isComposing) {\n    return COMPOSING_CHARACTER;\n  }\n  if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(nextSelection) || !(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(prevSelection) || !prevSelection.isCollapsed() || !nextSelection.isCollapsed()) {\n    return OTHER;\n  }\n  const dirtyNodes = getDirtyNodes(nextEditorState, dirtyLeavesSet, dirtyElementsSet);\n  if (dirtyNodes.length === 0) {\n    return OTHER;\n  }\n\n  // Catching the case when inserting new text node into an element (e.g. first char in paragraph/list),\n  // or after existing node.\n  if (dirtyNodes.length > 1) {\n    const nextNodeMap = nextEditorState._nodeMap;\n    const nextAnchorNode = nextNodeMap.get(nextSelection.anchor.key);\n    const prevAnchorNode = nextNodeMap.get(prevSelection.anchor.key);\n    if (nextAnchorNode && prevAnchorNode && !prevEditorState._nodeMap.has(nextAnchorNode.__key) && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextAnchorNode) && nextAnchorNode.__text.length === 1 && nextSelection.anchor.offset === 1) {\n      return INSERT_CHARACTER_AFTER_SELECTION;\n    }\n    return OTHER;\n  }\n  const nextDirtyNode = dirtyNodes[0];\n  const prevDirtyNode = prevEditorState._nodeMap.get(nextDirtyNode.__key);\n  if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevDirtyNode) || !(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextDirtyNode) || prevDirtyNode.__mode !== nextDirtyNode.__mode) {\n    return OTHER;\n  }\n  const prevText = prevDirtyNode.__text;\n  const nextText = nextDirtyNode.__text;\n  if (prevText === nextText) {\n    return OTHER;\n  }\n  const nextAnchor = nextSelection.anchor;\n  const prevAnchor = prevSelection.anchor;\n  if (nextAnchor.key !== prevAnchor.key || nextAnchor.type !== 'text') {\n    return OTHER;\n  }\n  const nextAnchorOffset = nextAnchor.offset;\n  const prevAnchorOffset = prevAnchor.offset;\n  const textDiff = nextText.length - prevText.length;\n  if (textDiff === 1 && prevAnchorOffset === nextAnchorOffset - 1) {\n    return INSERT_CHARACTER_AFTER_SELECTION;\n  }\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset + 1) {\n    return DELETE_CHARACTER_BEFORE_SELECTION;\n  }\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset) {\n    return DELETE_CHARACTER_AFTER_SELECTION;\n  }\n  return OTHER;\n}\nfunction isTextNodeUnchanged(key, prevEditorState, nextEditorState) {\n  const prevNode = prevEditorState._nodeMap.get(key);\n  const nextNode = nextEditorState._nodeMap.get(key);\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  const isDeletingLine = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(prevSelection) && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isRangeSelection)(nextSelection) && prevSelection.anchor.type === 'element' && prevSelection.focus.type === 'element' && nextSelection.anchor.type === 'text' && nextSelection.focus.type === 'text';\n  if (!isDeletingLine && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevNode) && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextNode) && prevNode.__parent === nextNode.__parent) {\n    // This has the assumption that object key order won't change if the\n    // content did not change, which should normally be safe given\n    // the manner in which nodes and exportJSON are typically implemented.\n    return JSON.stringify(prevEditorState.read(() => prevNode.exportJSON())) === JSON.stringify(nextEditorState.read(() => nextNode.exportJSON()));\n  }\n  return false;\n}\nfunction createMergeActionGetter(editor, delay) {\n  let prevChangeTime = Date.now();\n  let prevChangeType = OTHER;\n  return (prevEditorState, nextEditorState, currentHistoryEntry, dirtyLeaves, dirtyElements, tags) => {\n    const changeTime = Date.now();\n\n    // If applying changes from history stack there's no need\n    // to run history logic again, as history entries already calculated\n    if (tags.has('historic')) {\n      prevChangeType = OTHER;\n      prevChangeTime = changeTime;\n      return DISCARD_HISTORY_CANDIDATE;\n    }\n    const changeType = getChangeType(prevEditorState, nextEditorState, dirtyLeaves, dirtyElements, editor.isComposing());\n    const mergeAction = (() => {\n      const isSameEditor = currentHistoryEntry === null || currentHistoryEntry.editor === editor;\n      const shouldPushHistory = tags.has('history-push');\n      const shouldMergeHistory = !shouldPushHistory && isSameEditor && tags.has('history-merge');\n      if (shouldMergeHistory) {\n        return HISTORY_MERGE;\n      }\n      if (prevEditorState === null) {\n        return HISTORY_PUSH;\n      }\n      const selection = nextEditorState._selection;\n      const hasDirtyNodes = dirtyLeaves.size > 0 || dirtyElements.size > 0;\n      if (!hasDirtyNodes) {\n        if (selection !== null) {\n          return HISTORY_MERGE;\n        }\n        return DISCARD_HISTORY_CANDIDATE;\n      }\n      if (shouldPushHistory === false && changeType !== OTHER && changeType === prevChangeType && changeTime < prevChangeTime + delay && isSameEditor) {\n        return HISTORY_MERGE;\n      }\n\n      // A single node might have been marked as dirty, but not have changed\n      // due to some node transform reverting the change.\n      if (dirtyLeaves.size === 1) {\n        const dirtyLeafKey = Array.from(dirtyLeaves)[0];\n        if (isTextNodeUnchanged(dirtyLeafKey, prevEditorState, nextEditorState)) {\n          return HISTORY_MERGE;\n        }\n      }\n      return HISTORY_PUSH;\n    })();\n    prevChangeTime = changeTime;\n    prevChangeType = changeType;\n    return mergeAction;\n  };\n}\nfunction redo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  if (redoStack.length !== 0) {\n    const current = historyState.current;\n    if (current !== null) {\n      undoStack.push(current);\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, true);\n    }\n    const historyStateEntry = redoStack.pop();\n    if (redoStack.length === 0) {\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, false);\n    }\n    historyState.current = historyStateEntry || null;\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: 'historic'\n      });\n    }\n  }\n}\nfunction undo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  const undoStackLength = undoStack.length;\n  if (undoStackLength !== 0) {\n    const current = historyState.current;\n    const historyStateEntry = undoStack.pop();\n    if (current !== null) {\n      redoStack.push(current);\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, true);\n    }\n    if (undoStack.length === 0) {\n      editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, false);\n    }\n    historyState.current = historyStateEntry || null;\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: 'historic'\n      });\n    }\n  }\n}\nfunction clearHistory(historyState) {\n  historyState.undoStack = [];\n  historyState.redoStack = [];\n  historyState.current = null;\n}\n\n/**\n * Registers necessary listeners to manage undo/redo history stack and related editor commands.\n * It returns `unregister` callback that cleans up all listeners and should be called on editor unmount.\n * @param editor - The lexical editor.\n * @param historyState - The history state, containing the current state and the undo/redo stack.\n * @param delay - The time (in milliseconds) the editor should delay generating a new history stack,\n * instead of merging the current changes with the current stack.\n * @returns The listeners cleanup callback function.\n */\nfunction registerHistory(editor, historyState, delay) {\n  const getMergeAction = createMergeActionGetter(editor, delay);\n  const applyChange = ({\n    editorState,\n    prevEditorState,\n    dirtyLeaves,\n    dirtyElements,\n    tags\n  }) => {\n    const current = historyState.current;\n    const redoStack = historyState.redoStack;\n    const undoStack = historyState.undoStack;\n    const currentEditorState = current === null ? null : current.editorState;\n    if (current !== null && editorState === currentEditorState) {\n      return;\n    }\n    const mergeAction = getMergeAction(prevEditorState, editorState, current, dirtyLeaves, dirtyElements, tags);\n    if (mergeAction === HISTORY_PUSH) {\n      if (redoStack.length !== 0) {\n        historyState.redoStack = [];\n        editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, false);\n      }\n      if (current !== null) {\n        undoStack.push({\n          ...current\n        });\n        editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, true);\n      }\n    } else if (mergeAction === DISCARD_HISTORY_CANDIDATE) {\n      return;\n    }\n\n    // Else we merge\n    historyState.current = {\n      editor,\n      editorState\n    };\n  };\n  const unregister = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_1__.mergeRegister)(editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.UNDO_COMMAND, () => {\n    undo(editor, historyState);\n    return true;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.REDO_COMMAND, () => {\n    redo(editor, historyState);\n    return true;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CLEAR_EDITOR_COMMAND, () => {\n    clearHistory(historyState);\n    return false;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CLEAR_HISTORY_COMMAND, () => {\n    clearHistory(historyState);\n    editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_REDO_COMMAND, false);\n    editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_0__.CAN_UNDO_COMMAND, false);\n    return true;\n  }, lexical__WEBPACK_IMPORTED_MODULE_0__.COMMAND_PRIORITY_EDITOR), editor.registerUpdateListener(applyChange));\n  return unregister;\n}\n\n/**\n * Creates an empty history state.\n * @returns - The empty history state, as an object.\n */\nfunction createEmptyHistoryState() {\n  return {\n    current: null,\n    redoStack: [],\n    undoStack: []\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/history/LexicalHistory.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalComposer.dev.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalComposer.dev.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LexicalComposer: () => (/* binding */ LexicalComposer)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst HISTORY_MERGE_OPTIONS = {\n  tag: 'history-merge'\n};\nfunction LexicalComposer({\n  initialConfig,\n  children\n}) {\n  const composerContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const {\n      theme,\n      namespace,\n      nodes,\n      onError,\n      editorState: initialEditorState,\n      html\n    } = initialConfig;\n    const context = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__.createLexicalComposerContext)(null, theme);\n    const editor = (0,lexical__WEBPACK_IMPORTED_MODULE_3__.createEditor)({\n      editable: initialConfig.editable,\n      html,\n      namespace,\n      nodes,\n      onError: error => onError(error, editor),\n      theme\n    });\n    initializeEditor(editor, initialEditorState);\n    return [editor, context];\n  },\n  // We only do this for init\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  useLayoutEffectImpl(() => {\n    const isEditable = initialConfig.editable;\n    const [editor] = composerContext;\n    editor.setEditable(isEditable !== undefined ? isEditable : true);\n\n    // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__.LexicalComposerContext.Provider, {\n    value: composerContext,\n    children: children\n  });\n}\nfunction initializeEditor(editor, initialEditorState) {\n  if (initialEditorState === null) {\n    return;\n  } else if (initialEditorState === undefined) {\n    editor.update(() => {\n      const root = (0,lexical__WEBPACK_IMPORTED_MODULE_3__.$getRoot)();\n      if (root.isEmpty()) {\n        const paragraph = (0,lexical__WEBPACK_IMPORTED_MODULE_3__.$createParagraphNode)();\n        root.append(paragraph);\n        const activeElement = CAN_USE_DOM ? document.activeElement : null;\n        if ((0,lexical__WEBPACK_IMPORTED_MODULE_3__.$getSelection)() !== null || activeElement !== null && activeElement === editor.getRootElement()) {\n          paragraph.select();\n        }\n      }\n    }, HISTORY_MERGE_OPTIONS);\n  } else if (initialEditorState !== null) {\n    switch (typeof initialEditorState) {\n      case 'string':\n        {\n          const parsedEditorState = editor.parseEditorState(initialEditorState);\n          editor.setEditorState(parsedEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n      case 'object':\n        {\n          editor.setEditorState(initialEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n      case 'function':\n        {\n          editor.update(() => {\n            const root = (0,lexical__WEBPACK_IMPORTED_MODULE_3__.$getRoot)();\n            if (root.isEmpty()) {\n              initialEditorState(editor);\n            }\n          }, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n    }\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXIuZGV2Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU2RztBQUN2QjtBQUMxQjtBQUNwQjs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxrREFBZSxHQUFHLDRDQUFTOztBQUVyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsMEJBQTBCLDhDQUFPO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLG9CQUFvQixtR0FBNEI7QUFDaEQsbUJBQW1CLHFEQUFZO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsc0JBQXNCLHNEQUFHLENBQUMseUZBQXNCO0FBQ2hEO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxtQkFBbUIsaURBQVE7QUFDM0I7QUFDQSwwQkFBMEIsNkRBQW9CO0FBQzlDO0FBQ0E7QUFDQSxZQUFZLHNEQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGlEQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUyQiIsInNvdXJjZXMiOlsiL1VzZXJzL3RyYW5naWFraWV0L0RvY3VtZW50cy9HaXRIdWIvZ3JlZW5ib29rLWNtcy9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyLmRldi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQgeyBjcmVhdGVMZXhpY2FsQ29tcG9zZXJDb250ZXh0LCBMZXhpY2FsQ29tcG9zZXJDb250ZXh0IH0gZnJvbSAnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVFZGl0b3IsICRnZXRSb290LCAkY3JlYXRlUGFyYWdyYXBoTm9kZSwgJGdldFNlbGVjdGlvbiB9IGZyb20gJ2xleGljYWwnO1xuaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0LCB1c2VFZmZlY3QsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBqc3ggfSBmcm9tICdyZWFjdC9qc3gtcnVudGltZSc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuY29uc3QgQ0FOX1VTRV9ET00gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cblxuLy8gVGhpcyB3b3JrYXJvdW5kIGlzIG5vIGxvbmdlciBuZWNlc3NhcnkgaW4gUmVhY3QgMTksXG4vLyBidXQgd2UgY3VycmVudGx5IHN1cHBvcnQgUmVhY3QgPj0xNy54XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8yNjM5NVxuY29uc3QgdXNlTGF5b3V0RWZmZWN0SW1wbCA9IENBTl9VU0VfRE9NID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmNvbnN0IEhJU1RPUllfTUVSR0VfT1BUSU9OUyA9IHtcbiAgdGFnOiAnaGlzdG9yeS1tZXJnZSdcbn07XG5mdW5jdGlvbiBMZXhpY2FsQ29tcG9zZXIoe1xuICBpbml0aWFsQ29uZmlnLFxuICBjaGlsZHJlblxufSkge1xuICBjb25zdCBjb21wb3NlckNvbnRleHQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZSxcbiAgICAgIG5hbWVzcGFjZSxcbiAgICAgIG5vZGVzLFxuICAgICAgb25FcnJvcixcbiAgICAgIGVkaXRvclN0YXRlOiBpbml0aWFsRWRpdG9yU3RhdGUsXG4gICAgICBodG1sXG4gICAgfSA9IGluaXRpYWxDb25maWc7XG4gICAgY29uc3QgY29udGV4dCA9IGNyZWF0ZUxleGljYWxDb21wb3NlckNvbnRleHQobnVsbCwgdGhlbWUpO1xuICAgIGNvbnN0IGVkaXRvciA9IGNyZWF0ZUVkaXRvcih7XG4gICAgICBlZGl0YWJsZTogaW5pdGlhbENvbmZpZy5lZGl0YWJsZSxcbiAgICAgIGh0bWwsXG4gICAgICBuYW1lc3BhY2UsXG4gICAgICBub2RlcyxcbiAgICAgIG9uRXJyb3I6IGVycm9yID0+IG9uRXJyb3IoZXJyb3IsIGVkaXRvciksXG4gICAgICB0aGVtZVxuICAgIH0pO1xuICAgIGluaXRpYWxpemVFZGl0b3IoZWRpdG9yLCBpbml0aWFsRWRpdG9yU3RhdGUpO1xuICAgIHJldHVybiBbZWRpdG9yLCBjb250ZXh0XTtcbiAgfSxcbiAgLy8gV2Ugb25seSBkbyB0aGlzIGZvciBpbml0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgW10pO1xuICB1c2VMYXlvdXRFZmZlY3RJbXBsKCgpID0+IHtcbiAgICBjb25zdCBpc0VkaXRhYmxlID0gaW5pdGlhbENvbmZpZy5lZGl0YWJsZTtcbiAgICBjb25zdCBbZWRpdG9yXSA9IGNvbXBvc2VyQ29udGV4dDtcbiAgICBlZGl0b3Iuc2V0RWRpdGFibGUoaXNFZGl0YWJsZSAhPT0gdW5kZWZpbmVkID8gaXNFZGl0YWJsZSA6IHRydWUpO1xuXG4gICAgLy8gV2Ugb25seSBkbyB0aGlzIGZvciBpbml0XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovanN4KExleGljYWxDb21wb3NlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29tcG9zZXJDb250ZXh0LFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KTtcbn1cbmZ1bmN0aW9uIGluaXRpYWxpemVFZGl0b3IoZWRpdG9yLCBpbml0aWFsRWRpdG9yU3RhdGUpIHtcbiAgaWYgKGluaXRpYWxFZGl0b3JTdGF0ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmIChpbml0aWFsRWRpdG9yU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgIGVkaXRvci51cGRhdGUoKCkgPT4ge1xuICAgICAgY29uc3Qgcm9vdCA9ICRnZXRSb290KCk7XG4gICAgICBpZiAocm9vdC5pc0VtcHR5KCkpIHtcbiAgICAgICAgY29uc3QgcGFyYWdyYXBoID0gJGNyZWF0ZVBhcmFncmFwaE5vZGUoKTtcbiAgICAgICAgcm9vdC5hcHBlbmQocGFyYWdyYXBoKTtcbiAgICAgICAgY29uc3QgYWN0aXZlRWxlbWVudCA9IENBTl9VU0VfRE9NID8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA6IG51bGw7XG4gICAgICAgIGlmICgkZ2V0U2VsZWN0aW9uKCkgIT09IG51bGwgfHwgYWN0aXZlRWxlbWVudCAhPT0gbnVsbCAmJiBhY3RpdmVFbGVtZW50ID09PSBlZGl0b3IuZ2V0Um9vdEVsZW1lbnQoKSkge1xuICAgICAgICAgIHBhcmFncmFwaC5zZWxlY3QoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIEhJU1RPUllfTUVSR0VfT1BUSU9OUyk7XG4gIH0gZWxzZSBpZiAoaW5pdGlhbEVkaXRvclN0YXRlICE9PSBudWxsKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgaW5pdGlhbEVkaXRvclN0YXRlKSB7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgcGFyc2VkRWRpdG9yU3RhdGUgPSBlZGl0b3IucGFyc2VFZGl0b3JTdGF0ZShpbml0aWFsRWRpdG9yU3RhdGUpO1xuICAgICAgICAgIGVkaXRvci5zZXRFZGl0b3JTdGF0ZShwYXJzZWRFZGl0b3JTdGF0ZSwgSElTVE9SWV9NRVJHRV9PUFRJT05TKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAge1xuICAgICAgICAgIGVkaXRvci5zZXRFZGl0b3JTdGF0ZShpbml0aWFsRWRpdG9yU3RhdGUsIEhJU1RPUllfTUVSR0VfT1BUSU9OUyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAge1xuICAgICAgICAgIGVkaXRvci51cGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgcm9vdCA9ICRnZXRSb290KCk7XG4gICAgICAgICAgICBpZiAocm9vdC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgaW5pdGlhbEVkaXRvclN0YXRlKGVkaXRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgSElTVE9SWV9NRVJHRV9PUFRJT05TKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBMZXhpY2FsQ29tcG9zZXIgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalComposer.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalContentEditable.dev.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalContentEditable.dev.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentEditable: () => (/* binding */ ContentEditable)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var _lexical_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/text */ \"(app-pages-browser)/./node_modules/@lexical/text/LexicalText.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n// Source: https://github.com/gregberge/react-merge-refs/blob/main/src/index.tsx\n\nfunction mergeRefs(...refs) {\n  return value => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction ContentEditableElementImpl({\n  editor,\n  ariaActiveDescendant,\n  ariaAutoComplete,\n  ariaControls,\n  ariaDescribedBy,\n  ariaErrorMessage,\n  ariaExpanded,\n  ariaInvalid,\n  ariaLabel,\n  ariaLabelledBy,\n  ariaMultiline,\n  ariaOwns,\n  ariaRequired,\n  autoCapitalize,\n  className,\n  id,\n  role = 'textbox',\n  spellCheck = true,\n  style,\n  tabIndex,\n  'data-testid': testid,\n  ...rest\n}, ref) {\n  const [isEditable, setEditable] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(editor.isEditable());\n  const handleRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(rootElement => {\n    // defaultView is required for a root element.\n    // In multi-window setups, the defaultView may not exist at certain points.\n    if (rootElement && rootElement.ownerDocument && rootElement.ownerDocument.defaultView) {\n      editor.setRootElement(rootElement);\n    } else {\n      editor.setRootElement(null);\n    }\n  }, [editor]);\n  const mergedRefs = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => mergeRefs(ref, handleRef), [handleRef, ref]);\n  useLayoutEffectImpl(() => {\n    setEditable(editor.isEditable());\n    return editor.registerEditableListener(currentIsEditable => {\n      setEditable(currentIsEditable);\n    });\n  }, [editor]);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n    \"aria-activedescendant\": isEditable ? ariaActiveDescendant : undefined,\n    \"aria-autocomplete\": isEditable ? ariaAutoComplete : 'none',\n    \"aria-controls\": isEditable ? ariaControls : undefined,\n    \"aria-describedby\": ariaDescribedBy\n    // for compat, only override aria-errormessage if ariaErrorMessage is defined\n    ,\n    ...(ariaErrorMessage != null ? {\n      'aria-errormessage': ariaErrorMessage\n    } : {}),\n    \"aria-expanded\": isEditable && role === 'combobox' ? !!ariaExpanded : undefined\n    // for compat, only override aria-invalid if ariaInvalid is defined\n    ,\n    ...(ariaInvalid != null ? {\n      'aria-invalid': ariaInvalid\n    } : {}),\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-multiline\": ariaMultiline,\n    \"aria-owns\": isEditable ? ariaOwns : undefined,\n    \"aria-readonly\": isEditable ? undefined : true,\n    \"aria-required\": ariaRequired,\n    autoCapitalize: autoCapitalize,\n    className: className,\n    contentEditable: isEditable,\n    \"data-testid\": testid,\n    id: id,\n    ref: mergedRefs,\n    role: isEditable ? role : undefined,\n    spellCheck: spellCheck,\n    style: style,\n    tabIndex: tabIndex,\n    ...rest\n  });\n}\nconst ContentEditableElement = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(ContentEditableElementImpl);\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction canShowPlaceholderFromCurrentEditorState(editor) {\n  const currentCanShowPlaceholder = editor.getEditorState().read((0,_lexical_text__WEBPACK_IMPORTED_MODULE_2__.$canShowPlaceholderCurry)(editor.isComposing()));\n  return currentCanShowPlaceholder;\n}\nfunction useCanShowPlaceholder(editor) {\n  const [canShowPlaceholder, setCanShowPlaceholder] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => canShowPlaceholderFromCurrentEditorState(editor));\n  useLayoutEffectImpl(() => {\n    function resetCanShowPlaceholder() {\n      const currentCanShowPlaceholder = canShowPlaceholderFromCurrentEditorState(editor);\n      setCanShowPlaceholder(currentCanShowPlaceholder);\n    }\n    resetCanShowPlaceholder();\n    return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_3__.mergeRegister)(editor.registerUpdateListener(() => {\n      resetCanShowPlaceholder();\n    }), editor.registerEditableListener(() => {\n      resetCanShowPlaceholder();\n    }));\n  }, [editor]);\n  return canShowPlaceholder;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst ContentEditable = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(ContentEditableImpl);\nfunction ContentEditableImpl(props, ref) {\n  const {\n    placeholder,\n    ...rest\n  } = props;\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)();\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ContentEditableElement, {\n      editor: editor,\n      ...rest,\n      ref: ref\n    }), placeholder != null && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Placeholder, {\n      editor: editor,\n      content: placeholder\n    })]\n  });\n}\nfunction Placeholder({\n  content,\n  editor\n}) {\n  const showPlaceholder = useCanShowPlaceholder(editor);\n  const [isEditable, setEditable] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(editor.isEditable());\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n    setEditable(editor.isEditable());\n    return editor.registerEditableListener(currentIsEditable => {\n      setEditable(currentIsEditable);\n    });\n  }, [editor]);\n  if (!showPlaceholder) {\n    return null;\n  }\n  let placeholder = null;\n  if (typeof content === 'function') {\n    placeholder = content(isEditable);\n  } else if (content !== null) {\n    placeholder = content;\n  }\n  if (placeholder === null) {\n    return null;\n  }\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n    \"aria-hidden\": true,\n    children: placeholder\n  });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalContentEditable.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LexicalErrorBoundary: () => (/* binding */ LexicalErrorBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\n\nvar changedArray = function changedArray(a, b) {\n  if (a === void 0) {\n    a = [];\n  }\n\n  if (b === void 0) {\n    b = [];\n  }\n\n  return a.length !== b.length || a.some(function (item, index) {\n    return !Object.is(item, b[index]);\n  });\n};\n\nvar initialState = {\n  error: null\n};\n\nvar ErrorBoundary = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(ErrorBoundary, _React$Component);\n\n  function ErrorBoundary() {\n    var _this;\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n    _this.state = initialState;\n\n    _this.resetErrorBoundary = function () {\n      var _this$props;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _this.props.onReset == null ? void 0 : (_this$props = _this.props).onReset.apply(_this$props, args);\n\n      _this.reset();\n    };\n\n    return _this;\n  }\n\n  ErrorBoundary.getDerivedStateFromError = function getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  };\n\n  var _proto = ErrorBoundary.prototype;\n\n  _proto.reset = function reset() {\n    this.setState(initialState);\n  };\n\n  _proto.componentDidCatch = function componentDidCatch(error, info) {\n    var _this$props$onError, _this$props2;\n\n    (_this$props$onError = (_this$props2 = this.props).onError) == null ? void 0 : _this$props$onError.call(_this$props2, error, info);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var error = this.state.error;\n    var resetKeys = this.props.resetKeys; // There's an edge case where if the thing that triggered the error\n    // happens to *also* be in the resetKeys array, we'd end up resetting\n    // the error boundary immediately. This would likely trigger a second\n    // error to be thrown.\n    // So we make sure that we don't check the resetKeys on the first call\n    // of cDU after the error is set\n\n    if (error !== null && prevState.error !== null && changedArray(prevProps.resetKeys, resetKeys)) {\n      var _this$props$onResetKe, _this$props3;\n\n      (_this$props$onResetKe = (_this$props3 = this.props).onResetKeysChange) == null ? void 0 : _this$props$onResetKe.call(_this$props3, prevProps.resetKeys, resetKeys);\n      this.reset();\n    }\n  };\n\n  _proto.render = function render() {\n    var error = this.state.error;\n    var _this$props4 = this.props,\n        fallbackRender = _this$props4.fallbackRender,\n        FallbackComponent = _this$props4.FallbackComponent,\n        fallback = _this$props4.fallback;\n\n    if (error !== null) {\n      var _props = {\n        error: error,\n        resetErrorBoundary: this.resetErrorBoundary\n      };\n\n      if ( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(fallback)) {\n        return fallback;\n      } else if (typeof fallbackRender === 'function') {\n        return fallbackRender(_props);\n      } else if (FallbackComponent) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FallbackComponent, _props);\n      } else {\n        throw new Error('react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop');\n      }\n    }\n\n    return this.props.children;\n  };\n\n  return ErrorBoundary;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction LexicalErrorBoundary({\n  children,\n  onError\n}) {\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ErrorBoundary, {\n    fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n      style: {\n        border: '1px solid #f00',\n        color: '#f00',\n        padding: '8px'\n      },\n      children: \"An error was thrown.\"\n    }),\n    onError: onError,\n    children: children\n  });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsRXJyb3JCb3VuZGFyeS5kZXYubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUrQjtBQUNTOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEseUVBQXlFLGFBQWE7QUFDdEY7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsNkVBQTZFLGVBQWU7QUFDNUY7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QixpREFBb0I7QUFDNUM7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1IsNEJBQTRCLGdEQUFtQjtBQUMvQyxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDLENBQUMsNENBQWU7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxzQkFBc0Isc0RBQUc7QUFDekIsMkJBQTJCLHNEQUFHO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRWdDIiwic291cmNlcyI6WyIvVXNlcnMvdHJhbmdpYWtpZXQvRG9jdW1lbnRzL0dpdEh1Yi9ncmVlbmJvb2stY21zL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsRXJyb3JCb3VuZGFyeS5kZXYubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganN4IH0gZnJvbSAncmVhY3QvanN4LXJ1bnRpbWUnO1xuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxudmFyIGNoYW5nZWRBcnJheSA9IGZ1bmN0aW9uIGNoYW5nZWRBcnJheShhLCBiKSB7XG4gIGlmIChhID09PSB2b2lkIDApIHtcbiAgICBhID0gW107XG4gIH1cblxuICBpZiAoYiA9PT0gdm9pZCAwKSB7XG4gICAgYiA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIGEubGVuZ3RoICE9PSBiLmxlbmd0aCB8fCBhLnNvbWUoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgcmV0dXJuICFPYmplY3QuaXMoaXRlbSwgYltpbmRleF0pO1xuICB9KTtcbn07XG5cbnZhciBpbml0aWFsU3RhdGUgPSB7XG4gIGVycm9yOiBudWxsXG59O1xuXG52YXIgRXJyb3JCb3VuZGFyeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShFcnJvckJvdW5kYXJ5LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBFcnJvckJvdW5kYXJ5KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBfYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIF9hcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoX2FyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0gaW5pdGlhbFN0YXRlO1xuXG4gICAgX3RoaXMucmVzZXRFcnJvckJvdW5kYXJ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzO1xuXG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5wcm9wcy5vblJlc2V0ID09IG51bGwgPyB2b2lkIDAgOiAoX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcykub25SZXNldC5hcHBseShfdGhpcyRwcm9wcywgYXJncyk7XG5cbiAgICAgIF90aGlzLnJlc2V0KCk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIEVycm9yQm91bmRhcnkuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBlcnJvclxuICAgIH07XG4gIH07XG5cbiAgdmFyIF9wcm90byA9IEVycm9yQm91bmRhcnkucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoaW5pdGlhbFN0YXRlKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkQ2F0Y2ggPSBmdW5jdGlvbiBjb21wb25lbnREaWRDYXRjaChlcnJvciwgaW5mbykge1xuICAgIHZhciBfdGhpcyRwcm9wcyRvbkVycm9yLCBfdGhpcyRwcm9wczI7XG5cbiAgICAoX3RoaXMkcHJvcHMkb25FcnJvciA9IChfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzKS5vbkVycm9yKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkcHJvcHMkb25FcnJvci5jYWxsKF90aGlzJHByb3BzMiwgZXJyb3IsIGluZm8pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgZXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgIHZhciByZXNldEtleXMgPSB0aGlzLnByb3BzLnJlc2V0S2V5czsgLy8gVGhlcmUncyBhbiBlZGdlIGNhc2Ugd2hlcmUgaWYgdGhlIHRoaW5nIHRoYXQgdHJpZ2dlcmVkIHRoZSBlcnJvclxuICAgIC8vIGhhcHBlbnMgdG8gKmFsc28qIGJlIGluIHRoZSByZXNldEtleXMgYXJyYXksIHdlJ2QgZW5kIHVwIHJlc2V0dGluZ1xuICAgIC8vIHRoZSBlcnJvciBib3VuZGFyeSBpbW1lZGlhdGVseS4gVGhpcyB3b3VsZCBsaWtlbHkgdHJpZ2dlciBhIHNlY29uZFxuICAgIC8vIGVycm9yIHRvIGJlIHRocm93bi5cbiAgICAvLyBTbyB3ZSBtYWtlIHN1cmUgdGhhdCB3ZSBkb24ndCBjaGVjayB0aGUgcmVzZXRLZXlzIG9uIHRoZSBmaXJzdCBjYWxsXG4gICAgLy8gb2YgY0RVIGFmdGVyIHRoZSBlcnJvciBpcyBzZXRcblxuICAgIGlmIChlcnJvciAhPT0gbnVsbCAmJiBwcmV2U3RhdGUuZXJyb3IgIT09IG51bGwgJiYgY2hhbmdlZEFycmF5KHByZXZQcm9wcy5yZXNldEtleXMsIHJlc2V0S2V5cykpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyRvblJlc2V0S2UsIF90aGlzJHByb3BzMztcblxuICAgICAgKF90aGlzJHByb3BzJG9uUmVzZXRLZSA9IChfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzKS5vblJlc2V0S2V5c0NoYW5nZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHByb3BzJG9uUmVzZXRLZS5jYWxsKF90aGlzJHByb3BzMywgcHJldlByb3BzLnJlc2V0S2V5cywgcmVzZXRLZXlzKTtcbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgZXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICBmYWxsYmFja1JlbmRlciA9IF90aGlzJHByb3BzNC5mYWxsYmFja1JlbmRlcixcbiAgICAgICAgRmFsbGJhY2tDb21wb25lbnQgPSBfdGhpcyRwcm9wczQuRmFsbGJhY2tDb21wb25lbnQsXG4gICAgICAgIGZhbGxiYWNrID0gX3RoaXMkcHJvcHM0LmZhbGxiYWNrO1xuXG4gICAgaWYgKGVycm9yICE9PSBudWxsKSB7XG4gICAgICB2YXIgX3Byb3BzID0ge1xuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIHJlc2V0RXJyb3JCb3VuZGFyeTogdGhpcy5yZXNldEVycm9yQm91bmRhcnlcbiAgICAgIH07XG5cbiAgICAgIGlmICggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGZhbGxiYWNrKSkge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBmYWxsYmFja1JlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2tSZW5kZXIoX3Byb3BzKTtcbiAgICAgIH0gZWxzZSBpZiAoRmFsbGJhY2tDb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZhbGxiYWNrQ29tcG9uZW50LCBfcHJvcHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZWFjdC1lcnJvci1ib3VuZGFyeSByZXF1aXJlcyBlaXRoZXIgYSBmYWxsYmFjaywgZmFsbGJhY2tSZW5kZXIsIG9yIEZhbGxiYWNrQ29tcG9uZW50IHByb3AnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfTtcblxuICByZXR1cm4gRXJyb3JCb3VuZGFyeTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5mdW5jdGlvbiBMZXhpY2FsRXJyb3JCb3VuZGFyeSh7XG4gIGNoaWxkcmVuLFxuICBvbkVycm9yXG59KSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovanN4KEVycm9yQm91bmRhcnksIHtcbiAgICBmYWxsYmFjazogLyojX19QVVJFX18qL2pzeChcImRpdlwiLCB7XG4gICAgICBzdHlsZToge1xuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgI2YwMCcsXG4gICAgICAgIGNvbG9yOiAnI2YwMCcsXG4gICAgICAgIHBhZGRpbmc6ICc4cHgnXG4gICAgICB9LFxuICAgICAgY2hpbGRyZW46IFwiQW4gZXJyb3Igd2FzIHRocm93bi5cIlxuICAgIH0pLFxuICAgIG9uRXJyb3I6IG9uRXJyb3IsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pO1xufVxuXG5leHBvcnQgeyBMZXhpY2FsRXJyb3JCb3VuZGFyeSB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HistoryPlugin: () => (/* binding */ HistoryPlugin),\n/* harmony export */   createEmptyHistoryState: () => (/* reexport safe */ _lexical_history__WEBPACK_IMPORTED_MODULE_0__.createEmptyHistoryState)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lexical/history */ \"(app-pages-browser)/./node_modules/@lexical/history/LexicalHistory.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useHistory(editor, externalHistoryState, delay = 1000) {\n  const historyState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => externalHistoryState || (0,_lexical_history__WEBPACK_IMPORTED_MODULE_0__.createEmptyHistoryState)(), [externalHistoryState]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    return (0,_lexical_history__WEBPACK_IMPORTED_MODULE_0__.registerHistory)(editor, historyState, delay);\n  }, [delay, editor, historyState]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction HistoryPlugin({\n  delay,\n  externalHistoryState\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_2__.useLexicalComposerContext)();\n  useHistory(editor, externalHistoryState, delay);\n  return null;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsSGlzdG9yeVBsdWdpbi5kZXYubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtGO0FBQ047QUFDakI7QUFDaEI7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCLDhDQUFPLCtCQUErQix5RUFBdUI7QUFDcEYsRUFBRSxnREFBUztBQUNYLFdBQVcsaUVBQWU7QUFDMUIsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxtQkFBbUIsZ0dBQXlCO0FBQzVDO0FBQ0E7QUFDQTs7QUFFeUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy90cmFuZ2lha2lldC9Eb2N1bWVudHMvR2l0SHViL2dyZWVuYm9vay1jbXMvbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxIaXN0b3J5UGx1Z2luLmRldi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5pbXBvcnQgeyB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0IH0gZnJvbSAnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVFbXB0eUhpc3RvcnlTdGF0ZSwgcmVnaXN0ZXJIaXN0b3J5IH0gZnJvbSAnQGxleGljYWwvaGlzdG9yeSc7XG5leHBvcnQgeyBjcmVhdGVFbXB0eUhpc3RvcnlTdGF0ZSB9IGZyb20gJ0BsZXhpY2FsL2hpc3RvcnknO1xuaW1wb3J0IHsgdXNlTWVtbywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmZ1bmN0aW9uIHVzZUhpc3RvcnkoZWRpdG9yLCBleHRlcm5hbEhpc3RvcnlTdGF0ZSwgZGVsYXkgPSAxMDAwKSB7XG4gIGNvbnN0IGhpc3RvcnlTdGF0ZSA9IHVzZU1lbW8oKCkgPT4gZXh0ZXJuYWxIaXN0b3J5U3RhdGUgfHwgY3JlYXRlRW1wdHlIaXN0b3J5U3RhdGUoKSwgW2V4dGVybmFsSGlzdG9yeVN0YXRlXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuIHJlZ2lzdGVySGlzdG9yeShlZGl0b3IsIGhpc3RvcnlTdGF0ZSwgZGVsYXkpO1xuICB9LCBbZGVsYXksIGVkaXRvciwgaGlzdG9yeVN0YXRlXSk7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gSGlzdG9yeVBsdWdpbih7XG4gIGRlbGF5LFxuICBleHRlcm5hbEhpc3RvcnlTdGF0ZVxufSkge1xuICBjb25zdCBbZWRpdG9yXSA9IHVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgdXNlSGlzdG9yeShlZGl0b3IsIGV4dGVybmFsSGlzdG9yeVN0YXRlLCBkZWxheSk7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgeyBIaXN0b3J5UGx1Z2luIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnChangePlugin: () => (/* binding */ OnChangePlugin)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction OnChangePlugin({\n  ignoreHistoryMergeTagChange = true,\n  ignoreSelectionChange = false,\n  onChange\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_1__.useLexicalComposerContext)();\n  useLayoutEffectImpl(() => {\n    if (onChange) {\n      return editor.registerUpdateListener(({\n        editorState,\n        dirtyElements,\n        dirtyLeaves,\n        prevEditorState,\n        tags\n      }) => {\n        if (ignoreSelectionChange && dirtyElements.size === 0 && dirtyLeaves.size === 0 || ignoreHistoryMergeTagChange && tags.has('history-merge') || prevEditorState.isEmpty()) {\n          return;\n        }\n        onChange(editorState, editor, tags);\n      });\n    }\n  }, [editor, ignoreHistoryMergeTagChange, ignoreSelectionChange, onChange]);\n  return null;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsT25DaGFuZ2VQbHVnaW4uZGV2Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFa0Y7QUFDL0I7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsa0RBQWUsR0FBRyw0Q0FBUzs7QUFFckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbUJBQW1CLGdHQUF5QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRTBCIiwic291cmNlcyI6WyIvVXNlcnMvdHJhbmdpYWtpZXQvRG9jdW1lbnRzL0dpdEh1Yi9ncmVlbmJvb2stY21zL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsT25DaGFuZ2VQbHVnaW4uZGV2Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmltcG9ydCB7IHVzZUxleGljYWxDb21wb3NlckNvbnRleHQgfSBmcm9tICdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXJDb250ZXh0JztcbmltcG9ydCB7IHVzZUxheW91dEVmZmVjdCwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmNvbnN0IENBTl9VU0VfRE9NID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5cbi8vIFRoaXMgd29ya2Fyb3VuZCBpcyBubyBsb25nZXIgbmVjZXNzYXJ5IGluIFJlYWN0IDE5LFxuLy8gYnV0IHdlIGN1cnJlbnRseSBzdXBwb3J0IFJlYWN0ID49MTcueFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMjYzOTVcbmNvbnN0IHVzZUxheW91dEVmZmVjdEltcGwgPSBDQU5fVVNFX0RPTSA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5mdW5jdGlvbiBPbkNoYW5nZVBsdWdpbih7XG4gIGlnbm9yZUhpc3RvcnlNZXJnZVRhZ0NoYW5nZSA9IHRydWUsXG4gIGlnbm9yZVNlbGVjdGlvbkNoYW5nZSA9IGZhbHNlLFxuICBvbkNoYW5nZVxufSkge1xuICBjb25zdCBbZWRpdG9yXSA9IHVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgdXNlTGF5b3V0RWZmZWN0SW1wbCgoKSA9PiB7XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICByZXR1cm4gZWRpdG9yLnJlZ2lzdGVyVXBkYXRlTGlzdGVuZXIoKHtcbiAgICAgICAgZWRpdG9yU3RhdGUsXG4gICAgICAgIGRpcnR5RWxlbWVudHMsXG4gICAgICAgIGRpcnR5TGVhdmVzLFxuICAgICAgICBwcmV2RWRpdG9yU3RhdGUsXG4gICAgICAgIHRhZ3NcbiAgICAgIH0pID0+IHtcbiAgICAgICAgaWYgKGlnbm9yZVNlbGVjdGlvbkNoYW5nZSAmJiBkaXJ0eUVsZW1lbnRzLnNpemUgPT09IDAgJiYgZGlydHlMZWF2ZXMuc2l6ZSA9PT0gMCB8fCBpZ25vcmVIaXN0b3J5TWVyZ2VUYWdDaGFuZ2UgJiYgdGFncy5oYXMoJ2hpc3RvcnktbWVyZ2UnKSB8fCBwcmV2RWRpdG9yU3RhdGUuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG9uQ2hhbmdlKGVkaXRvclN0YXRlLCBlZGl0b3IsIHRhZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBbZWRpdG9yLCBpZ25vcmVIaXN0b3J5TWVyZ2VUYWdDaGFuZ2UsIGlnbm9yZVNlbGVjdGlvbkNoYW5nZSwgb25DaGFuZ2VdKTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCB7IE9uQ2hhbmdlUGx1Z2luIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RichTextPlugin: () => (/* binding */ RichTextPlugin)\n/* harmony export */ });\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_react_useLexicalEditable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @lexical/react/useLexicalEditable */ \"(app-pages-browser)/./node_modules/@lexical/react/useLexicalEditable.dev.mjs\");\n/* harmony import */ var _lexical_text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lexical/text */ \"(app-pages-browser)/./node_modules/@lexical/text/LexicalText.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var _lexical_dragon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lexical/dragon */ \"(app-pages-browser)/./node_modules/@lexical/dragon/LexicalDragon.dev.mjs\");\n/* harmony import */ var _lexical_rich_text__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lexical/rich-text */ \"(app-pages-browser)/./node_modules/@lexical/rich-text/LexicalRichText.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction canShowPlaceholderFromCurrentEditorState(editor) {\n  const currentCanShowPlaceholder = editor.getEditorState().read((0,_lexical_text__WEBPACK_IMPORTED_MODULE_3__.$canShowPlaceholderCurry)(editor.isComposing()));\n  return currentCanShowPlaceholder;\n}\nfunction useCanShowPlaceholder(editor) {\n  const [canShowPlaceholder, setCanShowPlaceholder] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => canShowPlaceholderFromCurrentEditorState(editor));\n  useLayoutEffectImpl(() => {\n    function resetCanShowPlaceholder() {\n      const currentCanShowPlaceholder = canShowPlaceholderFromCurrentEditorState(editor);\n      setCanShowPlaceholder(currentCanShowPlaceholder);\n    }\n    resetCanShowPlaceholder();\n    return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_4__.mergeRegister)(editor.registerUpdateListener(() => {\n      resetCanShowPlaceholder();\n    }), editor.registerEditableListener(() => {\n      resetCanShowPlaceholder();\n    }));\n  }, [editor]);\n  return canShowPlaceholder;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useDecorators(editor, ErrorBoundary) {\n  const [decorators, setDecorators] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => editor.getDecorators());\n\n  // Subscribe to changes\n  useLayoutEffectImpl(() => {\n    return editor.registerDecoratorListener(nextDecorators => {\n      (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(() => {\n        setDecorators(nextDecorators);\n      });\n    });\n  }, [editor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    // If the content editable mounts before the subscription is added, then\n    // nothing will be rendered on initial pass. We can get around that by\n    // ensuring that we set the value.\n    setDecorators(editor.getDecorators());\n  }, [editor]);\n\n  // Return decorators defined as React Portals\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const decoratedPortals = [];\n    const decoratorKeys = Object.keys(decorators);\n    for (let i = 0; i < decoratorKeys.length; i++) {\n      const nodeKey = decoratorKeys[i];\n      const reactDecorator = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ErrorBoundary, {\n        onError: e => editor._onError(e),\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n          fallback: null,\n          children: decorators[nodeKey]\n        })\n      });\n      const element = editor.getElementByKey(nodeKey);\n      if (element !== null) {\n        decoratedPortals.push(/*#__PURE__*/(0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(reactDecorator, element, nodeKey));\n      }\n    }\n    return decoratedPortals;\n  }, [ErrorBoundary, decorators, editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useRichTextSetup(editor) {\n  useLayoutEffectImpl(() => {\n    return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_4__.mergeRegister)((0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_5__.registerRichText)(editor), (0,_lexical_dragon__WEBPACK_IMPORTED_MODULE_6__.registerDragonSupport)(editor));\n\n    // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction RichTextPlugin({\n  contentEditable,\n  // TODO Remove. This property is now part of ContentEditable\n  placeholder = null,\n  ErrorBoundary\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_7__.useLexicalComposerContext)();\n  const decorators = useDecorators(editor, ErrorBoundary);\n  useRichTextSetup(editor);\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, {\n    children: [contentEditable, /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Placeholder, {\n      content: placeholder\n    }), decorators]\n  });\n}\n\n// TODO remove\nfunction Placeholder({\n  content\n}) {\n  const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_7__.useLexicalComposerContext)();\n  const showPlaceholder = useCanShowPlaceholder(editor);\n  const editable = (0,_lexical_react_useLexicalEditable__WEBPACK_IMPORTED_MODULE_8__.useLexicalEditable)();\n  if (!showPlaceholder) {\n    return null;\n  }\n  if (typeof content === 'function') {\n    return content(editable);\n  } else {\n    return content;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@lexical/text/LexicalText.dev.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@lexical/text/LexicalText.dev.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $canShowPlaceholder: () => (/* binding */ $canShowPlaceholder),\n/* harmony export */   $canShowPlaceholderCurry: () => (/* binding */ $canShowPlaceholderCurry),\n/* harmony export */   $findTextIntersectionFromCharacters: () => (/* binding */ $findTextIntersectionFromCharacters),\n/* harmony export */   $isRootTextContentEmpty: () => (/* binding */ $isRootTextContentEmpty),\n/* harmony export */   $isRootTextContentEmptyCurry: () => (/* binding */ $isRootTextContentEmptyCurry),\n/* harmony export */   $rootTextContent: () => (/* binding */ $rootTextContent),\n/* harmony export */   registerLexicalTextEntity: () => (/* binding */ registerLexicalTextEntity)\n/* harmony export */ });\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Returns the root's text content.\n * @returns The root's text content.\n */\nfunction $rootTextContent() {\n  const root = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getRoot)();\n  return root.getTextContent();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Determines if the root has any text content and can trim any whitespace if it does.\n * @param isEditorComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @param trim - Should the root text have its whitespaced trimmed? Defaults to true.\n * @returns true if text content is empty, false if there is text or isEditorComposing is true.\n */\nfunction $isRootTextContentEmpty(isEditorComposing, trim = true) {\n  if (isEditorComposing) {\n    return false;\n  }\n  let text = $rootTextContent();\n  if (trim) {\n    text = text.trim();\n  }\n  return text === '';\n}\n\n/**\n * Returns a function that executes {@link $isRootTextContentEmpty}\n * @param isEditorComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @param trim - Should the root text have its whitespaced trimmed? Defaults to true.\n * @returns A function that executes $isRootTextContentEmpty based on arguments.\n */\nfunction $isRootTextContentEmptyCurry(isEditorComposing, trim) {\n  return () => $isRootTextContentEmpty(isEditorComposing, trim);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Determines if the input should show the placeholder. If anything is in\n * in the root the placeholder should not be shown.\n * @param isComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @returns true if the input should show the placeholder, false otherwise.\n */\nfunction $canShowPlaceholder(isComposing) {\n  if (!$isRootTextContentEmpty(isComposing, false)) {\n    return false;\n  }\n  const root = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$getRoot)();\n  const children = root.getChildren();\n  const childrenLength = children.length;\n  if (childrenLength > 1) {\n    return false;\n  }\n  for (let i = 0; i < childrenLength; i++) {\n    const topBlock = children[i];\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isDecoratorNode)(topBlock)) {\n      return false;\n    }\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isElementNode)(topBlock)) {\n      if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isParagraphNode)(topBlock)) {\n        return false;\n      }\n      if (topBlock.__indent !== 0) {\n        return false;\n      }\n      const topBlockChildren = topBlock.getChildren();\n      const topBlockChildrenLength = topBlockChildren.length;\n      for (let s = 0; s < topBlockChildrenLength; s++) {\n        const child = topBlockChildren[i];\n        if (!(0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(child)) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * Returns a function that executes {@link $canShowPlaceholder}\n * @param isEditorComposing - Is the editor in composition mode due to an active Input Method Editor?\n * @returns A function that executes $canShowPlaceholder with arguments.\n */\nfunction $canShowPlaceholderCurry(isEditorComposing) {\n  return () => $canShowPlaceholder(isEditorComposing);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Finds a TextNode with a size larger than targetCharacters and returns\n * the node along with the remaining length of the text.\n * @param root - The RootNode.\n * @param targetCharacters - The number of characters whose TextNode must be larger than.\n * @returns The TextNode and the intersections offset, or null if no TextNode is found.\n */\nfunction $findTextIntersectionFromCharacters(root, targetCharacters) {\n  let node = root.getFirstChild();\n  let currentCharacters = 0;\n  mainLoop: while (node !== null) {\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isElementNode)(node)) {\n      const child = node.getFirstChild();\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n    } else if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(node)) {\n      const characters = node.getTextContentSize();\n      if (currentCharacters + characters > targetCharacters) {\n        return {\n          node,\n          offset: targetCharacters - currentCharacters\n        };\n      }\n      currentCharacters += characters;\n    }\n    const sibling = node.getNextSibling();\n    if (sibling !== null) {\n      node = sibling;\n      continue;\n    }\n    let parent = node.getParent();\n    while (parent !== null) {\n      const parentSibling = parent.getNextSibling();\n      if (parentSibling !== null) {\n        node = parentSibling;\n        continue mainLoop;\n      }\n      parent = parent.getParent();\n    }\n    break;\n  }\n  return null;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// Do not require this module directly! Use normal `invariant` calls.\n\nfunction formatDevErrorMessage(message) {\n  throw new Error(message);\n}\n\n/**\n * Returns a tuple that can be rested (...) into mergeRegister to clean up\n * node transforms listeners that transforms text into another node, eg. a HashtagNode.\n * @example\n * ```ts\n *   useEffect(() => {\n    return mergeRegister(\n      ...registerLexicalTextEntity(editor, getMatch, targetNode, createNode),\n    );\n  }, [createNode, editor, getMatch, targetNode]);\n * ```\n * Where targetNode is the type of node containing the text you want to transform (like a text input),\n * then getMatch uses a regex to find a matching text and creates the proper node to include the matching text.\n * @param editor - The lexical editor.\n * @param getMatch - Finds a matching string that satisfies a regex expression.\n * @param targetNode - The node type that contains text to match with. eg. HashtagNode\n * @param createNode - A function that creates a new node to contain the matched text. eg createHashtagNode\n * @returns An array containing the plain text and reverse node transform listeners.\n */\nfunction registerLexicalTextEntity(editor, getMatch, targetNode, createNode) {\n  const isTargetNode = node => {\n    return node instanceof targetNode;\n  };\n  const $replaceWithSimpleText = node => {\n    const textNode = (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$createTextNode)(node.getTextContent());\n    textNode.setFormat(node.getFormat());\n    node.replace(textNode);\n  };\n  const getMode = node => {\n    return node.getLatest().__mode;\n  };\n  const $textNodeTransform = node => {\n    if (!node.isSimpleText()) {\n      return;\n    }\n    let prevSibling = node.getPreviousSibling();\n    let text = node.getTextContent();\n    let currentNode = node;\n    let match;\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevSibling)) {\n      const previousText = prevSibling.getTextContent();\n      const combinedText = previousText + text;\n      const prevMatch = getMatch(combinedText);\n      if (isTargetNode(prevSibling)) {\n        if (prevMatch === null || getMode(prevSibling) !== 0) {\n          $replaceWithSimpleText(prevSibling);\n          return;\n        } else {\n          const diff = prevMatch.end - previousText.length;\n          if (diff > 0) {\n            const concatText = text.slice(0, diff);\n            const newTextContent = previousText + concatText;\n            prevSibling.select();\n            prevSibling.setTextContent(newTextContent);\n            if (diff === text.length) {\n              node.remove();\n            } else {\n              const remainingText = text.slice(diff);\n              node.setTextContent(remainingText);\n            }\n            return;\n          }\n        }\n      } else if (prevMatch === null || prevMatch.start < previousText.length) {\n        return;\n      }\n    }\n    let prevMatchLengthToSkip = 0;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      match = getMatch(text);\n      let nextText = match === null ? '' : text.slice(match.end);\n      text = nextText;\n      if (nextText === '') {\n        const nextSibling = currentNode.getNextSibling();\n        if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextSibling)) {\n          nextText = currentNode.getTextContent() + nextSibling.getTextContent();\n          const nextMatch = getMatch(nextText);\n          if (nextMatch === null) {\n            if (isTargetNode(nextSibling)) {\n              $replaceWithSimpleText(nextSibling);\n            } else {\n              nextSibling.markDirty();\n            }\n            return;\n          } else if (nextMatch.start !== 0) {\n            return;\n          }\n        }\n      }\n      if (match === null) {\n        return;\n      }\n      if (match.start === 0 && (0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevSibling) && prevSibling.isTextEntity()) {\n        prevMatchLengthToSkip += match.end;\n        continue;\n      }\n      let nodeToReplace;\n      if (match.start === 0) {\n        [nodeToReplace, currentNode] = currentNode.splitText(match.end);\n      } else {\n        [, nodeToReplace, currentNode] = currentNode.splitText(match.start + prevMatchLengthToSkip, match.end + prevMatchLengthToSkip);\n      }\n      if (!(nodeToReplace !== undefined)) {\n        formatDevErrorMessage(`${'nodeToReplace'} should not be undefined. You may want to check splitOffsets passed to the splitText.`);\n      }\n      const replacementNode = createNode(nodeToReplace);\n      replacementNode.setFormat(nodeToReplace.getFormat());\n      nodeToReplace.replace(replacementNode);\n      if (currentNode == null) {\n        return;\n      }\n      prevMatchLengthToSkip = 0;\n      prevSibling = replacementNode;\n    }\n  };\n  const $reverseNodeTransform = node => {\n    const text = node.getTextContent();\n    const match = getMatch(text);\n    if (match === null || match.start !== 0) {\n      $replaceWithSimpleText(node);\n      return;\n    }\n    if (text.length > match.end) {\n      // This will split out the rest of the text as simple text\n      node.splitText(match.end);\n      return;\n    }\n    const prevSibling = node.getPreviousSibling();\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(prevSibling) && prevSibling.isTextEntity()) {\n      $replaceWithSimpleText(prevSibling);\n      $replaceWithSimpleText(node);\n    }\n    const nextSibling = node.getNextSibling();\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_0__.$isTextNode)(nextSibling) && nextSibling.isTextEntity()) {\n      $replaceWithSimpleText(nextSibling);\n\n      // This may have already been converted in the previous block\n      if (isTargetNode(node)) {\n        $replaceWithSimpleText(node);\n      }\n    }\n  };\n  const removePlainTextTransform = editor.registerNodeTransform(lexical__WEBPACK_IMPORTED_MODULE_0__.TextNode, $textNodeTransform);\n  const removeReverseNodeTransform = editor.registerNodeTransform(targetNode, $reverseNodeTransform);\n  return [removePlainTextTransform, removeReverseNodeTransform];\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@lexical/text/LexicalText.dev.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/exports/client/Field-QFHWUA2L.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/exports/client/Field-QFHWUA2L.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RichText: () => (/* binding */ qi)\n/* harmony export */ });\n/* harmony import */ var _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./chunk-DOZWITPU.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/exports/client/chunk-DOZWITPU.js\");\n/* harmony import */ var _chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./chunk-BZZVLW4U.js */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/exports/client/chunk-BZZVLW4U.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var _payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @payloadcms/ui */ \"(app-pages-browser)/./node_modules/@payloadcms/ui/dist/exports/client/index.js\");\n/* harmony import */ var _payloadcms_ui_shared__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @payloadcms/ui/shared */ \"(app-pages-browser)/./node_modules/@payloadcms/ui/dist/exports/shared/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_error_boundary__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! react-error-boundary */ \"(app-pages-browser)/./node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js\");\n/* harmony import */ var _bundled_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bundled.css */ \"(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/exports/client/bundled.css\");\n/* harmony import */ var _lexical_react_LexicalComposer_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @lexical/react/LexicalComposer.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposer.dev.mjs\");\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/compiler-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/compiler-runtime.js\");\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalComposerContext.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalErrorBoundary_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @lexical/react/LexicalErrorBoundary.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalErrorBoundary.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalHistoryPlugin_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @lexical/react/LexicalHistoryPlugin.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalHistoryPlugin.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalOnChangePlugin_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @lexical/react/LexicalOnChangePlugin.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalOnChangePlugin.dev.mjs\");\n/* harmony import */ var _lexical_react_LexicalRichTextPlugin_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @lexical/react/LexicalRichTextPlugin.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalRichTextPlugin.dev.mjs\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lexical */ \"(app-pages-browser)/./node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lexical/utils */ \"(app-pages-browser)/./node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _lexical_rich_text__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @lexical/rich-text */ \"(app-pages-browser)/./node_modules/@lexical/rich-text/LexicalRichText.dev.mjs\");\n/* harmony import */ var _payloadcms_ui__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @payloadcms/ui */ \"(app-pages-browser)/./node_modules/@payloadcms/ui/dist/exports/client/chunk-OA4JPMVI.js\");\n/* harmony import */ var _lexical_react_LexicalContentEditable_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @lexical/react/LexicalContentEditable.js */ \"(app-pages-browser)/./node_modules/@lexical/react/LexicalContentEditable.dev.mjs\");\n/* __next_internal_client_entry_do_not_use__ RichText auto */ var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar K = (param)=>{\n    let { anchorElem: t, clientProps: e, plugin: o } = param;\n    return o.position === \"floatingAnchorElem\" && t ? o.Component && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(o.Component, {\n        anchorElem: t,\n        clientProps: e\n    }) : o.Component && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(o.Component, {\n        clientProps: e\n    });\n};\n_c = K;\n\n\n\n\n\nfunction Ae() {\n    let t = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__.c)(3), [e] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)(), o = Wt, r, n;\n    return t[0] !== e ? (r = ()=>(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_5__.mergeRegister)(e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.CLICK_COMMAND, zt, lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW), e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.KEY_DELETE_COMMAND, o, lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW), e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.KEY_BACKSPACE_COMMAND, o, lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW), e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.SELECTION_CHANGE_COMMAND, jt, lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW), e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.KEY_ARROW_UP_COMMAND, Kt, lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW), e.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.KEY_ARROW_DOWN_COMMAND, Ft, lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW)), n = [\n        e\n    ], t[0] = e, t[1] = r, t[2] = n) : (r = t[1], n = t[2]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(r, n), null;\n}\n_c1 = Ae;\nfunction Ft(t) {\n    let e = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getSelection)();\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isNodeSelection)(e)) {\n        var _e_getNodes_, _ne;\n        t.preventDefault();\n        let i = (_e_getNodes_ = e.getNodes()[0]) === null || _e_getNodes_ === void 0 ? void 0 : _e_getNodes_.getNextSibling();\n        if ((0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isDecoratorNode)(i)) {\n            let y = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getEditor)().getElementByKey(i.getKey());\n            return y && Z({\n                element: y,\n                node: i\n            }), !0;\n        }\n        if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isElementNode)(i)) return !0;\n        var _i_getFirstDescendant;\n        let s = (_i_getFirstDescendant = i.getFirstDescendant()) !== null && _i_getFirstDescendant !== void 0 ? _i_getFirstDescendant : i;\n        return s && ((_ne = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_5__.$findMatchingParent)(s, se)) === null || _ne === void 0 ? void 0 : _ne.selectEnd(), t.preventDefault()), !0;\n    }\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isRangeSelection)(e)) return !1;\n    let r = (e.isBackward() ? e.anchor : e.focus).getNode(), n = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_5__.$findMatchingParent)(r, $t), c = n === null || n === void 0 ? void 0 : n.getNextSibling();\n    if (!n || c !== Ie(n)) return !1;\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isDecoratorNode)(c)) {\n        let i = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getEditor)().getElementByKey(c.getKey());\n        if (i) return Z({\n            element: i,\n            node: c\n        }), t.preventDefault(), !0;\n    }\n    return !1;\n}\n_c2 = Ft;\nfunction $t(t) {\n    return Ie(t) !== null;\n}\nfunction Kt(t) {\n    let e = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getSelection)();\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isNodeSelection)(e)) {\n        var _e_getNodes_, _ne;\n        let i = (_e_getNodes_ = e.getNodes()[0]) === null || _e_getNodes_ === void 0 ? void 0 : _e_getNodes_.getPreviousSibling();\n        if ((0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isDecoratorNode)(i)) {\n            let y = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getEditor)().getElementByKey(i.getKey());\n            return y ? (Z({\n                element: y,\n                node: i\n            }), t.preventDefault(), !0) : !1;\n        }\n        if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isElementNode)(i)) return !1;\n        var _i_getLastDescendant;\n        let s = (_i_getLastDescendant = i.getLastDescendant()) !== null && _i_getLastDescendant !== void 0 ? _i_getLastDescendant : i;\n        return s ? ((_ne = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_5__.$findMatchingParent)(s, se)) === null || _ne === void 0 ? void 0 : _ne.selectStart(), t.preventDefault(), !0) : !1;\n    }\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isRangeSelection)(e)) return !1;\n    let r = (e.isBackward() ? e.anchor : e.focus).getNode(), n = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_5__.$findMatchingParent)(r, Ht), c = n === null || n === void 0 ? void 0 : n.getPreviousSibling();\n    if (!n || c !== _e(n)) return !1;\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isDecoratorNode)(c)) {\n        let i = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getEditor)().getElementByKey(c.getKey());\n        if (i) return Z({\n            element: i,\n            node: c\n        }), t.preventDefault(), !0;\n    }\n    return !1;\n}\n_c3 = Kt;\nfunction Ht(t) {\n    return _e(t) !== null;\n}\n_c4 = Ht;\nfunction jt() {\n    var _document_querySelector, _t_element;\n    let t = Gt();\n    return (_document_querySelector = document.querySelector(\".decorator-selected\")) === null || _document_querySelector === void 0 ? void 0 : _document_querySelector.classList.remove(\"decorator-selected\"), t ? ((_t_element = t.element) === null || _t_element === void 0 ? void 0 : _t_element.classList.add(\"decorator-selected\"), !0) : !1;\n}\nfunction zt(t) {\n    var _document_querySelector;\n    (_document_querySelector = document.querySelector(\".decorator-selected\")) === null || _document_querySelector === void 0 ? void 0 : _document_querySelector.classList.remove(\"decorator-selected\");\n    let e = Vt(t);\n    if (!e) return !0;\n    let { target: o } = t;\n    return !(o instanceof HTMLElement) || o.isContentEditable || o.closest('button, textarea, input, .react-select, .code-editor, .no-select-decorator, [role=\"button\"]') ? (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$setSelection)(null) : Z(e), !0;\n}\nfunction Wt(t) {\n    let e = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getSelection)();\n    return (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isNodeSelection)(e) ? (t.preventDefault(), e.getNodes().forEach(Yt), !0) : !1;\n}\n_c5 = Wt;\nfunction Yt(t) {\n    t.remove();\n}\n_c6 = Yt;\nfunction Vt(t) {\n    if (!(t.target instanceof HTMLElement)) return;\n    let e = t.target.closest('[data-lexical-decorator=\"true\"]');\n    if (!(e instanceof HTMLElement)) return;\n    let o = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNearestNodeFromDOMNode)(e);\n    return (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isDecoratorNode)(o) ? {\n        element: e,\n        node: o\n    } : void 0;\n}\n_c7 = Vt;\nfunction Gt() {\n    let t = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getSelection)();\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isNodeSelection)(t)) return;\n    let e = t.getNodes();\n    if (e.length !== 1) return;\n    let o = e[0];\n    return (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isDecoratorNode)(o) ? {\n        decorator: o,\n        element: (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getEditor)().getElementByKey(o.getKey())\n    } : void 0;\n}\n_c8 = Gt;\nfunction Z(param) {\n    let { element: t, node: e } = param;\n    var _document_querySelector;\n    (_document_querySelector = document.querySelector(\".decorator-selected\")) === null || _document_querySelector === void 0 ? void 0 : _document_querySelector.classList.remove(\"decorator-selected\");\n    let o = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$createNodeSelection)();\n    o.add(e.getKey()), (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$setSelection)(o), t.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"nearest\"\n    }), t.classList.add(\"decorator-selected\");\n}\n_c9 = Z;\nfunction se(t) {\n    if ((0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isDecoratorNode)(t) && !t.isInline()) return !0;\n    if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isElementNode)(t) || (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isRootOrShadowRoot)(t)) return !1;\n    let e = t.getFirstChild(), o = e === null || (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isLineBreakNode)(e) || (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isTextNode)(e) || e.isInline();\n    return !t.isInline() && t.canBeEmpty() !== !1 && o;\n}\nfunction Ie(t) {\n    let e = t.getNextSibling();\n    for(; e !== null;){\n        if (se(e)) return e;\n        e = e.getNextSibling();\n    }\n    return null;\n}\n_c10 = Ie;\nfunction _e(t) {\n    let e = t.getPreviousSibling();\n    for(; e !== null;){\n        if (se(e)) return e;\n        e = e.getPreviousSibling();\n    }\n    return null;\n}\n\n\n\n\n\n\nvar V = function(t, e, o, r) {\n    let n = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 50, c = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 25;\n    let i = 0;\n    if (t && !t.contains(r)) {\n        let { bottom: s, left: d, right: y, top: g } = t.getBoundingClientRect(), a = g + window.scrollY, l = s + window.scrollY;\n        if (o < a - c || o > l + c || e < d - n || e > y + n) return -1;\n        (e < d || e > y) && (i = e < d ? e - d : e - y);\n    }\n    return i;\n};\n_c11 = V;\n\nfunction G(t) {\n    let e = t.getBoundingClientRect(), o = getComputedStyle(t).getPropertyValue(\"transform\");\n    if (!o || o === \"none\") return e;\n    let r = o.split(\",\").pop();\n    return e.y = e.y - Number(r === null || r === void 0 ? void 0 : r.replace(\")\", \"\")), e;\n}\n_c12 = G;\nfunction le(t) {\n    let e = (d, y)=>d ? parseFloat(window.getComputedStyle(d)[y]) : 0, { marginBottom: o, marginTop: r } = window.getComputedStyle(t), n = e(t.previousElementSibling, \"marginBottom\"), c = e(t.nextElementSibling, \"marginTop\"), i = Math.max(parseFloat(r), n);\n    return {\n        marginBottom: Math.max(parseFloat(o), c),\n        marginTop: i\n    };\n}\n\nfunction j(t) {\n    return t.getEditorState().read(()=>(0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getRoot)().getChildrenKeys());\n}\nvar qt = 1, Jt = -1, Oe = 0, B = {\n    props: null,\n    result: null\n};\nfunction Qt(t, e) {\n    let o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 20;\n    let r = t.x - e.x, n = t.y - e.y;\n    return r * r + n * n <= o * o;\n}\n_c13 = Qt;\nfunction U(t) {\n    let { anchorElem: e, cache_threshold: o = 20, editor: r, fuzzy: n = !1, horizontalOffset: c = 0, point: { x: i, y: s }, startIndex: d = 0, useEdgeAsDefault: y = !1 } = t;\n    if (o > 0 && B.props && B.result && B.props.fuzzy === t.fuzzy && B.props.horizontalOffset === t.horizontalOffset && B.props.useEdgeAsDefault === t.useEdgeAsDefault && Qt(B.props.point, t.point, o)) return B.result;\n    let g = e.getBoundingClientRect(), a = j(r), l = {\n        blockElem: null,\n        blockNode: null,\n        distance: 1 / 0,\n        foundAtIndex: -1,\n        isFoundNodeEmptyParagraph: !1\n    };\n    return r.getEditorState().read(()=>{\n        if (y) {\n            let m = r.getElementByKey(a[0]), h = r.getElementByKey(a[a.length - 1]);\n            if (m && h) {\n                let [u, f] = [\n                    G(m),\n                    G(h)\n                ];\n                if (s < u.top ? (l.blockElem = m, l.distance = u.top - s, l.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNodeByKey)(a[0]), l.foundAtIndex = 0) : s > f.bottom && (l.distance = s - f.bottom, l.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNodeByKey)(a[a.length - 1]), l.blockElem = h, l.foundAtIndex = a.length - 1), l === null || l === void 0 ? void 0 : l.blockElem) return {\n                    blockElem: null,\n                    isFoundNodeEmptyParagraph: !1\n                };\n            }\n        }\n        let p = d, x = Oe;\n        for(; p >= 0 && p < a.length;){\n            let m = a[p], h = r.getElementByKey(m);\n            if (h === null) break;\n            let u = new _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.e(i + c, s), f = _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.j.fromDOMRect(G(h)), { marginBottom: E, marginTop: v } = le(h), S = f.generateNewRect({\n                bottom: f.bottom + E,\n                left: g.left,\n                right: g.right,\n                top: f.top - v\n            }), { distance: C, isOnBottomSide: k, isOnTopSide: N } = S.distanceFromPoint(u);\n            if (C === 0) {\n                l.blockElem = h, l.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNodeByKey)(m), l.foundAtIndex = p, l.distance = C, l.blockNode && l.blockNode.getType() === \"paragraph\" && l.blockNode.getTextContent() === \"\" && (!n && !t.returnEmptyParagraphs && (l.blockElem = null, l.blockNode = null), l.isFoundNodeEmptyParagraph = !0);\n                break;\n            } else n && C < l.distance && (l.blockElem = h, l.blockNode = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNodeByKey)(m), l.distance = C, l.foundAtIndex = p);\n            x === Oe && (N ? x = Jt : k ? x = qt : x = 1 / 0), p += x;\n        }\n    }), B.props = t, B.result = {\n        blockElem: l.blockElem,\n        blockNode: l.blockNode,\n        foundAtIndex: l.foundAtIndex,\n        isFoundNodeEmptyParagraph: l.isFoundNodeEmptyParagraph\n    }, {\n        blockElem: l.blockElem,\n        blockNode: l.blockNode,\n        foundAtIndex: l.foundAtIndex,\n        isFoundNodeEmptyParagraph: l.isFoundNodeEmptyParagraph\n    };\n}\n_c14 = U;\nfunction ce(t, e) {\n    return !!t.closest(\".\".concat(e));\n}\nvar Xt = [\n    \"IMG\",\n    \"INPUT\",\n    \"TEXTAREA\",\n    \"SELECT\",\n    \"BUTTON\",\n    \"VIDEO\",\n    \"OBJECT\",\n    \"EMBED\",\n    \"IFRAME\",\n    \"HR\"\n];\nfunction Fe(t) {\n    if (!t || Xt.includes(t.tagName) || t.offsetHeight === 0 || t.offsetWidth === 0) return !1;\n    let e = window.getComputedStyle(t);\n    return !(e.display === \"table-cell\" || e.position === \"absolute\" || e.visibility === \"hidden\" || e.opacity === \"0\");\n}\n_c15 = Fe;\nfunction de(t, e, o) {\n    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;\n    if (!t) {\n        e.style.opacity = \"0\", e.style.transform = \"translate(-10000px, -10000px)\";\n        return;\n    }\n    let n = t.getBoundingClientRect(), c = window.getComputedStyle(t), i = e.getBoundingClientRect(), s = o.getBoundingClientRect(), d;\n    if ([\n        \"lexical-block\",\n        \"lexical-upload\",\n        \"lexical-relationship\"\n    ].some((a)=>{\n        var _t_firstElementChild;\n        return (_t_firstElementChild = t.firstElementChild) === null || _t_firstElementChild === void 0 ? void 0 : _t_firstElementChild.classList.contains(a);\n    })) d = n.top + 8 - s.top;\n    else {\n        let a = Fe(t) ? parseInt(c.lineHeight, 10) : 0;\n        d = n.top + (a - i.height) / 2 - s.top;\n    }\n    let g = r;\n    e.style.opacity = \"1\", e.style.transform = \"translate(\".concat(g, \"px, \").concat(d, \"px)\");\n}\nvar so = \"add-block-menu\", ue = 1 / 0;\nfunction lo(t) {\n    return t === 0 ? 1 / 0 : ue >= 0 && ue < t ? ue : Math.floor(t / 2);\n}\nfunction ao(t, e, o) {\n    var _n_admin;\n    let r = e.parentElement, { editorConfig: n } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), c = (n === null || n === void 0 ? void 0 : (_n_admin = n.admin) === null || _n_admin === void 0 ? void 0 : _n_admin.hideGutter) ? -24 : 12, i = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), [s, d] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        var _document;\n        function g(a) {\n            let l = a.target;\n            if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.isHTMLElement)(l)) return;\n            let p = V(r, a.pageX, a.pageY, l);\n            if (p === -1) {\n                d(null);\n                return;\n            }\n            if (ce(l, so)) return;\n            let x = j(t), { blockElem: m, blockNode: h, foundAtIndex: u } = U({\n                anchorElem: e,\n                cache_threshold: 0,\n                editor: t,\n                horizontalOffset: -p,\n                point: new _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.e(a.x, a.y),\n                returnEmptyParagraphs: !0,\n                startIndex: lo(x.length),\n                useEdgeAsDefault: !1\n            });\n            ue = u, m && h && ((s === null || s === void 0 ? void 0 : s.node) !== h || (s === null || s === void 0 ? void 0 : s.elem) !== m) && d({\n                elem: m,\n                node: h\n            });\n        }\n        return (_document = document) === null || _document === void 0 ? void 0 : _document.addEventListener(\"mousemove\", g), ()=>{\n            var _document;\n            (_document = document) === null || _document === void 0 ? void 0 : _document.removeEventListener(\"mousemove\", g);\n        };\n    }, [\n        r,\n        e,\n        t,\n        s\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        i.current && (s === null || s === void 0 ? void 0 : s.node) && de(s === null || s === void 0 ? void 0 : s.elem, i.current, e, c);\n    }, [\n        e,\n        s,\n        c\n    ]);\n    let y = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((g)=>{\n        let a = s;\n        (a === null || a === void 0 ? void 0 : a.node) && (t.update(()=>{\n            let l = !0;\n            if (((a === null || a === void 0 ? void 0 : a.node.getType()) !== \"paragraph\" || a.node.getTextContent() !== \"\") && (l = !1), !l) {\n                let p = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$createParagraphNode)();\n                a === null || a === void 0 ? void 0 : a.node.insertAfter(p), setTimeout(()=>{\n                    a = {\n                        elem: t.getElementByKey(p.getKey()),\n                        node: p\n                    }, d(a);\n                }, 0);\n            }\n        }), setTimeout(()=>{\n            t.update(()=>{\n                t.focus(), (a === null || a === void 0 ? void 0 : a.node) && \"select\" in a.node && typeof a.node.select == \"function\" && a.node.select();\n            });\n        }, 1), setTimeout(()=>{\n            t.dispatchCommand(_chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.h, {\n                node: a === null || a === void 0 ? void 0 : a.node\n            });\n        }, 2), g.stopPropagation(), g.preventDefault());\n    }, [\n        t,\n        s\n    ]);\n    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_7__.createPortal)((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n            \"aria-label\": \"Add block\",\n            className: \"icon add-block-menu\",\n            onClick: (g)=>{\n                y(g);\n            },\n            ref: i,\n            type: \"button\",\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: o ? \"icon\" : \"\"\n            })\n        })\n    }), e);\n}\nfunction He(t) {\n    let { anchorElem: e } = t, o = e === void 0 ? document.body : e, [r] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)();\n    return ao(r, o, r._editable);\n}\n_c16 = He;\n\n\n\n\n\n\n\nvar je = 0, co = -24;\nvar z = 0;\nfunction ze(t, e, o, r, n, c, i, s, d) {\n    let y = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : !1;\n    let { height: g, top: a } = r.getBoundingClientRect(), { top: l, width: p } = i.getBoundingClientRect(), { marginBottom: x, marginTop: m } = le(r), h = a, u = c >= a + g / 2 + window.scrollY, f = !1;\n    if (n === null || n === void 0 ? void 0 : n.elem) if (r !== (n === null || n === void 0 ? void 0 : n.elem)) (u && (n === null || n === void 0 ? void 0 : n.elem) && (n === null || n === void 0 ? void 0 : n.elem) === r.nextElementSibling || !u && (n === null || n === void 0 ? void 0 : n.elem) && (n === null || n === void 0 ? void 0 : n.elem) === r.previousElementSibling) && (z++, z < 200 && (f = !0));\n    else {\n        var _n_boundingBox;\n        z++;\n        let C = n === null || n === void 0 ? void 0 : (_n_boundingBox = n.boundingBox) === null || _n_boundingBox === void 0 ? void 0 : _n_boundingBox.y, k = r.getBoundingClientRect().y;\n        (u === (n === null || n === void 0 ? void 0 : n.isBelow) && C === k || z < 200) && (f = !1);\n    }\n    if (f) return {\n        isBelow: u,\n        willStayInSamePosition: f\n    };\n    y ? h += g / 2 : u ? h += g + x / 2 : h -= m / 2;\n    let E = 0;\n    y || (u ? E = -je : E = je);\n    let v = h - l + E, S = co - e;\n    return o.style.width = \"calc(\".concat(p, \"px - \").concat(t, \")\"), o.style.opacity = \".8\", o.style.transform = \"translate(\".concat(S, \"px, calc(\").concat(v, \"px - 2px))\"), (n === null || n === void 0 ? void 0 : n.elem) && (n.elem.style.opacity = \"\", (n === null || n === void 0 ? void 0 : n.elem) === r ? u ? n.elem.style.marginTop = \"\" : n.elem.style.marginBottom = \"\" : (n.elem.style.marginBottom = \"\", n.elem.style.marginTop = \"\")), z = 0, {\n        isBelow: u,\n        willStayInSamePosition: f\n    };\n}\nvar go = \"draggable-block-menu\", Ge = \"application/x-lexical-drag-block\", ee = 1 / 0;\nfunction Ue(t) {\n    return t === 0 ? 1 / 0 : ee >= 0 && ee < t ? ee : Math.floor(t / 2);\n}\n_c17 = Ue;\nfunction ho(t, e) {\n    let { transform: o } = e.style;\n    t.setDragImage(e, 0, 0), setTimeout(()=>{\n        e.style.transform = o;\n    });\n}\nfunction qe(t, e) {\n    t && (t.style.opacity = \"0\"), e && (e.style.opacity = \"\", e.style.marginBottom = \"\", e.style.marginTop = \"\");\n}\nfunction yo(t, e, o) {\n    var _l_admin, _l_admin1;\n    let r = e.parentElement, n = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), c = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), i = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), s = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(!1), [d, y] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null), [g, a] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null), { editorConfig: l } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), p = (l === null || l === void 0 ? void 0 : (_l_admin = l.admin) === null || _l_admin === void 0 ? void 0 : _l_admin.hideGutter) ? -44 : -8;\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        var _document;\n        function h(u) {\n            let f = u.target;\n            if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.isHTMLElement)(f)) return;\n            let E = V(r, u.pageX, u.pageY, f);\n            if (E === -1) {\n                y(null);\n                return;\n            }\n            if (ce(f, go)) return;\n            let v = j(t), { blockElem: S, foundAtIndex: C, isFoundNodeEmptyParagraph: k } = U({\n                anchorElem: e,\n                cache_threshold: 0,\n                editor: t,\n                horizontalOffset: -E,\n                point: new _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.e(u.x, u.y),\n                startIndex: Ue(v.length),\n                useEdgeAsDefault: !1,\n                verbose: !1\n            });\n            ee = C, !(!S && !k) && d !== S && y(S);\n        }\n        return (_document = document) === null || _document === void 0 ? void 0 : _document.addEventListener(\"mousemove\", h), ()=>{\n            var _document;\n            (_document = document) === null || _document === void 0 ? void 0 : _document.removeEventListener(\"mousemove\", h);\n        };\n    }, [\n        r,\n        e,\n        t,\n        d\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        n.current && de(d, n.current, e, p);\n    }, [\n        e,\n        d,\n        p\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        function h(f) {\n            if (!s.current) return !1;\n            let [E] = (0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_10__.eventFiles)(f);\n            if (E) return !1;\n            let { pageY: v, target: S } = f;\n            if (!(0,lexical__WEBPACK_IMPORTED_MODULE_6__.isHTMLElement)(S)) return !1;\n            let C = V(r, f.pageX, f.pageY, S, 100, 50), k = j(t), { blockElem: N, foundAtIndex: L, isFoundNodeEmptyParagraph: I } = U({\n                anchorElem: e,\n                editor: t,\n                fuzzy: !0,\n                horizontalOffset: -C,\n                point: new _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.e(f.x, f.y),\n                startIndex: Ue(k.length),\n                useEdgeAsDefault: !0,\n                verbose: !0\n            });\n            ee = L;\n            let T = c.current;\n            if (N === null || T === null) return !1;\n            if (d !== N) {\n                var _l_admin, _l_admin1, _n_current_getBoundingClientRect, _n_current, _n_current_getBoundingClientRect1, _n_current1;\n                var _n_current_getBoundingClientRect_width, _n_current_getBoundingClientRect_width1;\n                let { isBelow: D, willStayInSamePosition: Q } = ze((l === null || l === void 0 ? void 0 : (_l_admin = l.admin) === null || _l_admin === void 0 ? void 0 : _l_admin.hideGutter) ? \"0px\" : \"3rem\", p + ((l === null || l === void 0 ? void 0 : (_l_admin1 = l.admin) === null || _l_admin1 === void 0 ? void 0 : _l_admin1.hideGutter) ? (_n_current_getBoundingClientRect_width = n === null || n === void 0 ? void 0 : (_n_current = n.current) === null || _n_current === void 0 ? void 0 : (_n_current_getBoundingClientRect = _n_current.getBoundingClientRect()) === null || _n_current_getBoundingClientRect === void 0 ? void 0 : _n_current_getBoundingClientRect.width) !== null && _n_current_getBoundingClientRect_width !== void 0 ? _n_current_getBoundingClientRect_width : 0 : -((_n_current_getBoundingClientRect_width1 = n === null || n === void 0 ? void 0 : (_n_current1 = n.current) === null || _n_current1 === void 0 ? void 0 : (_n_current_getBoundingClientRect1 = _n_current1.getBoundingClientRect()) === null || _n_current_getBoundingClientRect1 === void 0 ? void 0 : _n_current_getBoundingClientRect1.width) !== null && _n_current_getBoundingClientRect_width1 !== void 0 ? _n_current_getBoundingClientRect_width1 : 0)), T, N, g, v, e, f, i, I);\n                f.preventDefault(), Q || a({\n                    boundingBox: N.getBoundingClientRect(),\n                    elem: N,\n                    isBelow: D\n                });\n            } else (g === null || g === void 0 ? void 0 : g.elem) && (qe(T, g.elem), a({\n                boundingBox: N.getBoundingClientRect(),\n                elem: N,\n                isBelow: !1\n            }));\n            return !0;\n        }\n        function u(f) {\n            if (!s.current) return !1;\n            let [E] = (0,_lexical_rich_text__WEBPACK_IMPORTED_MODULE_10__.eventFiles)(f);\n            if (E) return !1;\n            let { dataTransfer: v, pageY: S, target: C } = f, k = (v === null || v === void 0 ? void 0 : v.getData(Ge)) || \"\";\n            return t.update(()=>{\n                let N = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNodeByKey)(k);\n                if (!N || !(0,lexical__WEBPACK_IMPORTED_MODULE_6__.isHTMLElement)(C)) return !1;\n                let L = V(r, f.pageX, f.pageY, C, 100, 50), { blockElem: I, isFoundNodeEmptyParagraph: T } = U({\n                    anchorElem: e,\n                    editor: t,\n                    fuzzy: !0,\n                    horizontalOffset: -L,\n                    point: new _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.e(f.x, f.y),\n                    useEdgeAsDefault: !0\n                });\n                if (!I) return !1;\n                let D = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNearestNodeFromDOMNode)(I);\n                if (!D) return !1;\n                if (D === N) return !0;\n                let { height: Q, top: he } = G(I), W = S >= he + Q / 2 + window.scrollY;\n                T ? (D.insertBefore(N), D.remove()) : W ? D.insertAfter(N) : D.insertBefore(N), d !== null && y(null), document.querySelectorAll(\".lexical-block-highlighter\").forEach((M)=>{\n                    M.remove();\n                });\n                let oe = t.getElementByKey(N.getKey());\n                setTimeout(()=>{\n                    let M = oe === null || oe === void 0 ? void 0 : oe.getBoundingClientRect();\n                    if (!M) return;\n                    let P = document.createElement(\"div\");\n                    P.className = \"lexical-block-highlighter\", P.style.backgroundColor = \"var(--theme-elevation-1000\", P.style.transition = \"opacity 0.5s ease-in-out\", P.style.zIndex = \"1\", P.style.pointerEvents = \"none\", P.style.boxSizing = \"border-box\", P.style.borderRadius = \"4px\", P.style.position = \"absolute\", document.body.appendChild(P), P.style.opacity = \"0.1\", P.style.height = \"\".concat(M.height + 8, \"px\"), P.style.width = \"\".concat(M.width + 8, \"px\"), P.style.top = \"\".concat(M.top + window.scrollY - 4, \"px\"), P.style.left = \"\".concat(M.left - 4, \"px\"), setTimeout(()=>{\n                        P.style.opacity = \"0\", setTimeout(()=>{\n                            P.remove();\n                        }, 500);\n                    }, 1e3);\n                }, 120);\n            }), !0;\n        }\n        return document.addEventListener(\"dragover\", h), document.addEventListener(\"drop\", u), ()=>{\n            document.removeEventListener(\"dragover\", h), document.removeEventListener(\"drop\", u);\n        };\n    }, [\n        r,\n        p,\n        e,\n        t,\n        g,\n        d,\n        l === null || l === void 0 ? void 0 : (_l_admin1 = l.admin) === null || _l_admin1 === void 0 ? void 0 : _l_admin1.hideGutter\n    ]);\n    function x(h) {\n        let u = h.dataTransfer;\n        if (!u || !d) return;\n        ho(u, d);\n        let f = \"\";\n        t.update(()=>{\n            let E = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getNearestNodeFromDOMNode)(d);\n            E && (f = E.getKey());\n        }), s.current = !0, u.setData(Ge, f);\n    }\n    function m() {\n        s.current = !1, (g === null || g === void 0 ? void 0 : g.elem) && qe(c.current, g === null || g === void 0 ? void 0 : g.elem);\n    }\n    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_7__.createPortal)((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: \"icon draggable-block-menu\",\n                draggable: !0,\n                onDragEnd: m,\n                onDragStart: x,\n                ref: n,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    className: o ? \"icon\" : \"\"\n                })\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: \"draggable-block-target-line\",\n                ref: c\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: \"debug-highlight\",\n                ref: i\n            })\n        ]\n    }), e);\n}\nfunction Qe(t) {\n    let { anchorElem: e } = t, o = e === void 0 ? document.body : e, [r] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)();\n    return yo(r, o, r._editable);\n}\n_c18 = Qe;\n\n\n\n\n\nvar Xe = \"insert-paragraph-at-end\", Ze = ()=>{\n    var _o_admin;\n    let t = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__.c)(4), [e] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)(), { editorConfig: o } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)();\n    if (o === null || o === void 0 ? void 0 : (_o_admin = o.admin) === null || _o_admin === void 0 ? void 0 : _o_admin.hideInsertParagraphAtEnd) return null;\n    let r;\n    t[0] !== e ? (r = ()=>{\n        e.update(No);\n    }, t[0] = e, t[1] = r) : r = t[1];\n    let n = r, c;\n    return t[2] !== n ? (c = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        \"aria-label\": \"Insert Paragraph\",\n        className: Xe,\n        onClick: n,\n        role: \"button\",\n        tabIndex: 0,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            className: \"\".concat(Xe, \"-inside\"),\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                children: \"+\"\n            })\n        })\n    }), t[2] = n, t[3] = c) : c = t[3], c;\n};\nfunction No() {\n    let t = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$createParagraphNode)();\n    (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getRoot)().append(t), t.select();\n}\n_c19 = No;\n\n\n\nvar tt = ()=>{\n    _s();\n    let t = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__.c)(4), { editorConfig: e } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), [o] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)(), r, n;\n    return t[0] !== o || t[1] !== e.features.markdownTransformers ? (r = ()=>{\n        var _e_features_markdownTransformers;\n        return (0,_chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.b)(o, (_e_features_markdownTransformers = e.features.markdownTransformers) !== null && _e_features_markdownTransformers !== void 0 ? _e_features_markdownTransformers : []);\n    }, n = [\n        o,\n        e.features.markdownTransformers\n    ], t[0] = o, t[1] = e.features.markdownTransformers, t[2] = r, t[3] = n) : (r = t[2], n = t[3]), react__WEBPACK_IMPORTED_MODULE_1__.useEffect(r, n), null;\n};\n_s(tt, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n\n\nfunction ot() {\n    let [t] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>t.registerNodeTransform(lexical__WEBPACK_IMPORTED_MODULE_6__.RootNode, (e)=>{\n            let o = (0,lexical__WEBPACK_IMPORTED_MODULE_6__.$getSelection)();\n            if ((0,lexical__WEBPACK_IMPORTED_MODULE_6__.$isRangeSelection)(o)) {\n                let r = o.anchor.getNode(), n = o.focus.getNode();\n                (!r.isAttached() || !n.isAttached()) && (e.selectEnd(), console.warn(\"updateEditor: selection has been moved to the end of the editor because the previously selected nodes have been removed and selection wasn't moved to another node. Ensure selection changes after removing/replacing a selected node.\"));\n            }\n            return !1;\n        }), [\n        t\n    ]), null;\n}\n\n\n\n\n\n\n\n\nfunction nt(t, e) {\n    let o = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__.c)(4), { maxLength: r, minLength: n } = e, c = r === void 0 ? 75 : r, i = n === void 0 ? 1 : n, s;\n    return o[0] !== c || o[1] !== i || o[2] !== t ? (s = (d)=>{\n        let { query: y } = d, g = \"[^\" + t + _chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.g + \"\\\\s]\", l = new RegExp(\"(^|\\\\s|\\\\()([\" + t + \"]((?:\" + g + \"){0,\" + c + \"}))$\").exec(y);\n        if (l !== null) {\n            let p = l[1], x = l[3];\n            if (x.length >= i) return {\n                leadOffset: l.index + p.length,\n                matchingString: x,\n                replaceableString: l[2]\n            };\n        }\n        return null;\n    }, o[0] = c, o[1] = i, o[2] = t, o[3] = s) : s = o[3], s;\n}\nvar A = \"slash-menu-popup\";\nfunction Io(param) {\n    let { isSelected: t, item: e, onClick: o, onMouseEnter: r, ref: n } = param;\n    let { fieldProps: { featureClientSchemaMap: c, schemaPath: i } } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), { i18n: s } = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_11__.d)(), d = \"\".concat(A, \"__item \").concat(A, \"__item-\").concat(e.key);\n    t && (d += \" \".concat(A, \"__item--selected\"));\n    let y = e.key;\n    return e.label && (y = typeof e.label == \"function\" ? e.label({\n        featureClientSchemaMap: c,\n        i18n: s,\n        schemaPath: i\n    }) : e.label), y.length > 25 && (y = y.substring(0, 25) + \"...\"), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n        \"aria-selected\": t,\n        className: d,\n        id: A + \"__item-\" + e.key,\n        onClick: o,\n        onMouseEnter: r,\n        ref: n,\n        role: \"option\",\n        tabIndex: -1,\n        type: \"button\",\n        children: [\n            (e === null || e === void 0 ? void 0 : e.Icon) && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(e.Icon, {}),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                className: \"\".concat(A, \"__item-text\"),\n                children: y\n            })\n        ]\n    }, e.key);\n}\n_c20 = Io;\nfunction lt(param) {\n    let { anchorElem: t = document.body } = param;\n    let [e] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)(), [o, r] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null), { editorConfig: n } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), { i18n: c } = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_11__.d)(), { fieldProps: { featureClientSchemaMap: i, schemaPath: s } } = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), d = nt(\"/\", {\n        minLength: 0\n    }), y = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        let a = [];\n        for (let l of n.features.slashMenu.dynamicGroups)if (o) {\n            let p = l({\n                editor: e,\n                queryString: o\n            });\n            a = a.concat(p);\n        }\n        return a;\n    }, [\n        e,\n        o,\n        n === null || n === void 0 ? void 0 : n.features\n    ]), g = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        let a = [];\n        var _n_features_slashMenu_groups;\n        for (let l of (_n_features_slashMenu_groups = n === null || n === void 0 ? void 0 : n.features.slashMenu.groups) !== null && _n_features_slashMenu_groups !== void 0 ? _n_features_slashMenu_groups : [])a.push(l);\n        if (o) {\n            a = a.map((p)=>{\n                let x = p.items.filter((m)=>{\n                    let h = m.key;\n                    return m.label && (h = typeof m.label == \"function\" ? m.label({\n                        featureClientSchemaMap: i,\n                        i18n: c,\n                        schemaPath: s\n                    }) : m.label), new RegExp(o, \"gi\").exec(h) ? !0 : m.keywords != null ? m.keywords.some((u)=>new RegExp(o, \"gi\").exec(u)) : !1;\n                });\n                return x.length ? {\n                    ...p,\n                    items: x\n                } : null;\n            }), a = a.filter((p)=>p != null);\n            let l = y();\n            for (let p of l){\n                var _x_items;\n                let x = a.find((m)=>m.key === p.key);\n                x ? a = a.filter((m)=>m.key !== p.key) : x = {\n                    ...p,\n                    items: []\n                }, (x === null || x === void 0 ? void 0 : (_x_items = x.items) === null || _x_items === void 0 ? void 0 : _x_items.length) && (x.items = x.items.concat(x.items)), a.push(x);\n            }\n        }\n        return a;\n    }, [\n        o,\n        n === null || n === void 0 ? void 0 : n.features.slashMenu.groups,\n        y,\n        i,\n        c,\n        s\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.i, {\n        anchorElem: t,\n        groups: g,\n        menuRenderFn: (a, param)=>{\n            let { selectedItemKey: l, selectItemAndCleanUp: p, setSelectedItemKey: x } = param;\n            return a.current && g.length ? /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_7__.createPortal((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: A,\n                children: g.map((m)=>{\n                    let h = m.key;\n                    return m.label && i && (h = typeof m.label == \"function\" ? m.label({\n                        featureClientSchemaMap: i,\n                        i18n: c,\n                        schemaPath: s\n                    }) : m.label), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        className: \"\".concat(A, \"__group \").concat(A, \"__group-\").concat(m.key),\n                        children: [\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                className: \"\".concat(A, \"__group-title\"),\n                                children: h\n                            }),\n                            m.items.map((u, f)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Io, {\n                                    index: f,\n                                    isSelected: l === u.key,\n                                    item: u,\n                                    onClick: ()=>{\n                                        x(u.key), p(u);\n                                    },\n                                    onMouseEnter: ()=>{\n                                        x(u.key);\n                                    },\n                                    ref: (E)=>{\n                                        u.ref = {\n                                            current: E\n                                        };\n                                    }\n                                }, u.key))\n                        ]\n                    }, m.key);\n                })\n            }), a.current) : null;\n        },\n        onQueryChange: r,\n        triggerFn: d\n    });\n}\n\n\n\n\nfunction at(t) {\n    let e = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__.c)(6), { features: o } = t, [r] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)(), n;\n    e[0] !== r || e[1] !== o.enabledFormats ? (n = ()=>{\n        let i = Ho(o.enabledFormats);\n        if (i.length !== 0) return r.registerNodeTransform(lexical__WEBPACK_IMPORTED_MODULE_6__.TextNode, (s)=>{\n            i.forEach((d)=>{\n                s.hasFormat(d) && s.toggleFormat(d);\n            });\n        });\n    }, e[0] = r, e[1] = o.enabledFormats, e[2] = n) : n = e[2];\n    let c;\n    return e[3] !== r || e[4] !== o ? (c = [\n        r,\n        o\n    ], e[3] = r, e[4] = o, e[5] = c) : c = e[5], (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(n, c), null;\n}\nfunction Ho(t) {\n    let e = Object.keys(lexical__WEBPACK_IMPORTED_MODULE_6__.TEXT_TYPE_TO_FORMAT), o = new Set(t);\n    return e.filter((r)=>!o.has(r));\n}\n_c21 = Ho;\n\n\n\n\n\nfunction dt(t) {\n    var _r_admin;\n    let e = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__.c)(7), { className: o, editorConfig: r } = t, { t: n } = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_11__.d)(), c;\n    if (e[0] !== o || e[1] !== (r === null || r === void 0 ? void 0 : (_r_admin = r.admin) === null || _r_admin === void 0 ? void 0 : _r_admin.placeholder) || e[2] !== n) {\n        var _r_admin1, _r_admin2, _r_admin3, _r_admin4;\n        let i;\n        var _r_admin_placeholder;\n        e[4] !== (r === null || r === void 0 ? void 0 : (_r_admin1 = r.admin) === null || _r_admin1 === void 0 ? void 0 : _r_admin1.placeholder) || e[5] !== n ? (i = (_r_admin_placeholder = r === null || r === void 0 ? void 0 : (_r_admin2 = r.admin) === null || _r_admin2 === void 0 ? void 0 : _r_admin2.placeholder) !== null && _r_admin_placeholder !== void 0 ? _r_admin_placeholder : n(\"lexical:general:placeholder\"), e[4] = r === null || r === void 0 ? void 0 : (_r_admin3 = r.admin) === null || _r_admin3 === void 0 ? void 0 : _r_admin3.placeholder, e[5] = n, e[6] = i) : i = e[6], c = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lexical_react_LexicalContentEditable_js__WEBPACK_IMPORTED_MODULE_12__.ContentEditable, {\n            \"aria-placeholder\": n(\"lexical:general:placeholder\"),\n            className: o !== null && o !== void 0 ? o : \"ContentEditable__root\",\n            placeholder: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                className: \"editor-placeholder\",\n                children: i\n            })\n        }), e[0] = o, e[1] = r === null || r === void 0 ? void 0 : (_r_admin4 = r.admin) === null || _r_admin4 === void 0 ? void 0 : _r_admin4.placeholder, e[2] = n, e[3] = c;\n    } else c = e[3];\n    return c;\n}\nvar mt = (t)=>{\n    let e = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_3__.c)(19), { editorConfig: o, editorContainerRef: r, isSmallWidthViewport: n, onChange: c } = t, i = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), [s] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_4__.useLexicalComposerContext)(), [d, y] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null), g;\n    e[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (g = (m)=>{\n        m !== null && y(m);\n    }, e[0] = g) : g = e[0];\n    let a = g, l, p;\n    e[1] !== s || e[2] !== i ? (l = ()=>{\n        var _i_parentEditor, _i_parentEditor1;\n        if (!(i === null || i === void 0 ? void 0 : i.uuid)) {\n            console.error(\"Lexical Editor must be used within an EditorConfigProvider\");\n            return;\n        }\n        (i === null || i === void 0 ? void 0 : (_i_parentEditor = i.parentEditor) === null || _i_parentEditor === void 0 ? void 0 : _i_parentEditor.uuid) && ((_i_parentEditor1 = i.parentEditor) === null || _i_parentEditor1 === void 0 ? void 0 : _i_parentEditor1.registerChild(i.uuid, i));\n        let m = ()=>{\n            i.focusEditor(i);\n        }, h = ()=>{\n            i.blurEditor(i);\n        }, u = s.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.FOCUS_COMMAND, ()=>(m(), !0), lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW), f = s.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_6__.BLUR_COMMAND, ()=>(h(), !0), lexical__WEBPACK_IMPORTED_MODULE_6__.COMMAND_PRIORITY_LOW);\n        return ()=>{\n            var _i_parentEditor_unregisterChild, _i_parentEditor;\n            u(), f(), (_i_parentEditor = i.parentEditor) === null || _i_parentEditor === void 0 ? void 0 : (_i_parentEditor_unregisterChild = _i_parentEditor.unregisterChild) === null || _i_parentEditor_unregisterChild === void 0 ? void 0 : _i_parentEditor_unregisterChild.call(_i_parentEditor, i.uuid);\n        };\n    }, p = [\n        s,\n        i\n    ], e[1] = s, e[2] = i, e[3] = l, e[4] = p) : (l = e[3], p = e[4]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(l, p);\n    let x;\n    if (e[5] !== s || e[6] !== o || e[7] !== r || e[8] !== d || e[9] !== n || e[10] !== c) {\n        var _o_features_plugins, _o_features_plugins1, _o_features_plugins2, _o_features_markdownTransformers, _o_features, _o_features_plugins3, _o_features_plugins4, _o_features_plugins5;\n        let m;\n        e[12] !== c ? (m = (u, f, E)=>{\n            (!E.has(\"focus\") || E.size > 1) && (c === null || c === void 0 ? void 0 : c(u, f, E));\n        }, e[12] = c, e[13] = m) : m = e[13];\n        let h;\n        e[14] !== s || e[15] !== o.features.plugins || e[16] !== d || e[17] !== n ? (h = d && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n            children: [\n                !n && s.isEditable() && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Qe, {\n                            anchorElem: d\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(He, {\n                            anchorElem: d\n                        })\n                    ]\n                }),\n                (_o_features_plugins = o.features.plugins) === null || _o_features_plugins === void 0 ? void 0 : _o_features_plugins.map((u)=>{\n                    if (u.position === \"floatingAnchorElem\" && !(u.desktopOnly === !0 && n)) return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(K, {\n                        anchorElem: d,\n                        clientProps: u.clientProps,\n                        plugin: u\n                    }, u.key);\n                }),\n                s.isEditable() && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(lt, {\n                        anchorElem: d\n                    })\n                })\n            ]\n        }), e[14] = s, e[15] = o.features.plugins, e[16] = d, e[17] = n, e[18] = h) : h = e[18], x = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n            children: [\n                (_o_features_plugins1 = o.features.plugins) === null || _o_features_plugins1 === void 0 ? void 0 : _o_features_plugins1.map(tn),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                    className: \"editor-container\",\n                    ref: r,\n                    children: [\n                        (_o_features_plugins2 = o.features.plugins) === null || _o_features_plugins2 === void 0 ? void 0 : _o_features_plugins2.map(on),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lexical_react_LexicalRichTextPlugin_js__WEBPACK_IMPORTED_MODULE_13__.RichTextPlugin, {\n                            contentEditable: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                className: \"editor-scroller\",\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                    className: \"editor\",\n                                    ref: a,\n                                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(dt, {\n                                        editorConfig: o\n                                    })\n                                })\n                            }),\n                            ErrorBoundary: _lexical_react_LexicalErrorBoundary_js__WEBPACK_IMPORTED_MODULE_14__.LexicalErrorBoundary\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ot, {}),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Ze, {}),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Ae, {}),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(at, {\n                            features: o.features\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lexical_react_LexicalOnChangePlugin_js__WEBPACK_IMPORTED_MODULE_15__.OnChangePlugin, {\n                            ignoreSelectionChange: !0,\n                            onChange: m\n                        }),\n                        h,\n                        s.isEditable() && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                            children: [\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lexical_react_LexicalHistoryPlugin_js__WEBPACK_IMPORTED_MODULE_16__.HistoryPlugin, {}),\n                                (o === null || o === void 0 ? void 0 : (_o_features = o.features) === null || _o_features === void 0 ? void 0 : (_o_features_markdownTransformers = _o_features.markdownTransformers) === null || _o_features_markdownTransformers === void 0 ? void 0 : _o_features_markdownTransformers.length) > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tt, {})\n                            ]\n                        }),\n                        (_o_features_plugins3 = o.features.plugins) === null || _o_features_plugins3 === void 0 ? void 0 : _o_features_plugins3.map(nn),\n                        (_o_features_plugins4 = o.features.plugins) === null || _o_features_plugins4 === void 0 ? void 0 : _o_features_plugins4.map(rn)\n                    ]\n                }),\n                (_o_features_plugins5 = o.features.plugins) === null || _o_features_plugins5 === void 0 ? void 0 : _o_features_plugins5.map(sn)\n            ]\n        }), e[5] = s, e[6] = o, e[7] = r, e[8] = d, e[9] = n, e[10] = c, e[11] = x;\n    } else x = e[11];\n    return x;\n};\nfunction tn(t) {\n    if (t.position === \"aboveContainer\") return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(K, {\n        clientProps: t.clientProps,\n        plugin: t\n    }, t.key);\n}\nfunction on(t) {\n    if (t.position === \"top\") return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(K, {\n        clientProps: t.clientProps,\n        plugin: t\n    }, t.key);\n}\nfunction nn(t) {\n    if (t.position === \"normal\") return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(K, {\n        clientProps: t.clientProps,\n        plugin: t\n    }, t.key);\n}\nfunction rn(t) {\n    if (t.position === \"bottom\") return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(K, {\n        clientProps: t.clientProps,\n        plugin: t\n    }, t.key);\n}\nfunction sn(t) {\n    if (t.position === \"belowContainer\") return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(K, {\n        clientProps: t.clientProps,\n        plugin: t\n    }, t.key);\n}\nvar pt = (param)=>{\n    let { children: t, providers: e } = param;\n    if (!(e === null || e === void 0 ? void 0 : e.length)) return t;\n    let o = e[0];\n    return e.length > 1 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(o, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(pt, {\n            providers: e.slice(1),\n            children: t\n        })\n    }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(o, {\n        children: t\n    });\n}, gt = (t)=>{\n    _s1();\n    let { composerKey: e, editorConfig: o, fieldProps: r, isSmallWidthViewport: n, onChange: c, readOnly: i, value: s } = t, d = (0,_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.b)(), y = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.useEditDepth)(), g = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null), a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (s && typeof s != \"object\") throw new Error(\"The value passed to the Lexical editor is not an object. This is not supported. Please remove the data from the field and start again. This is the value that was passed in: \" + JSON.stringify(s));\n        if (s && Array.isArray(s) && !(\"root\" in s)) throw new Error(\"You have tried to pass in data from the old Slate editor to the new Lexical editor. The data structure is different, thus you will have to migrate your data. We offer a one-line migration script which migrates all your rich text fields: https://payloadcms.com/docs/lexical/migration#migration-via-migration-script-recommended\");\n        if (s && \"jsonContent\" in s) throw new Error(\"You have tried to pass in data from payload-plugin-lexical. The data structure is different, thus you will have to migrate your data. Migration guide: https://payloadcms.com/docs/lexical/migration#migrating-from-payload-plugin-lexical\");\n        return {\n            editable: i !== !0,\n            editorState: s != null ? JSON.stringify(s) : void 0,\n            namespace: o.lexical.namespace,\n            nodes: (0,_chunk_DOZWITPU_js__WEBPACK_IMPORTED_MODULE_8__.k)({\n                editorConfig: o\n            }),\n            onError: (l)=>{\n                throw l;\n            },\n            theme: o.lexical.theme\n        };\n    }, [\n        o\n    ]);\n    return a ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_lexical_react_LexicalComposer_js__WEBPACK_IMPORTED_MODULE_18__.LexicalComposer, {\n        initialConfig: a,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_chunk_BZZVLW4U_js__WEBPACK_IMPORTED_MODULE_9__.a, {\n            editorConfig: o,\n            editorContainerRef: g,\n            fieldProps: r,\n            parentContext: (d === null || d === void 0 ? void 0 : d.editDepth) === y ? d : void 0,\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(pt, {\n                providers: o.features.providers,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(mt, {\n                    editorConfig: o,\n                    editorContainerRef: g,\n                    isSmallWidthViewport: n,\n                    onChange: c\n                })\n            })\n        })\n    }, e + a.editable) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n        children: \"Loading...\"\n    });\n};\n_s1(gt, \"9onNMVqjoAdY6r9VTthePjMIitY=\");\nvar pe = \"rich-text-lexical\", En = (t)=>{\n    var _e_admin;\n    _s2();\n    let { editorConfig: e, field: o, field: { admin: { className: r, description: n, readOnly: c } = {}, label: i, localized: s, required: d }, path: y, readOnly: g, validate: a } = t, l = g || c, p = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.useEditDepth)(), x = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((w, $)=>typeof a == \"function\" ? a(w, {\n            ...$,\n            required: d\n        }) : !0, [\n        a,\n        d\n    ]), { customComponents: { AfterInput: m, BeforeInput: h, Description: u, Error: f, Label: E } = {}, disabled: v, initialValue: S, path: C, setValue: k, showError: N, value: L } = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.useField)({\n        potentiallyStalePath: y,\n        validate: x\n    }), I = l || v, [T, D] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1), [Q, he] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(), ye = react__WEBPACK_IMPORTED_MODULE_1__.useRef(S), W = react__WEBPACK_IMPORTED_MODULE_1__.useRef(L);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        let w = ()=>{\n            let $ = window.matchMedia(\"(max-width: 768px)\").matches;\n            $ !== T && D($);\n        };\n        return w(), window.addEventListener(\"resize\", w), ()=>{\n            window.removeEventListener(\"resize\", w);\n        };\n    }, [\n        T\n    ]);\n    let Pe = [\n        pe,\n        \"field-type\",\n        r,\n        N && \"error\",\n        I && \"\".concat(pe, \"--read-only\"),\n        (e === null || e === void 0 ? void 0 : (_e_admin = e.admin) === null || _e_admin === void 0 ? void 0 : _e_admin.hideGutter) !== !0 && !T ? \"\".concat(pe, \"--show-gutter\") : null\n    ].filter(Boolean).join(\" \"), oe = \"\".concat(C, \".\").concat(p), M = (w)=>{\n        let $ = w.toJSON();\n        W.current = $, k($);\n    }, P = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((w)=>{\n        typeof window.requestIdleCallback == \"function\" ? requestIdleCallback(()=>M(w)) : M(w);\n    }, [\n        k\n    ]), Ct = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>(0,_payloadcms_ui_shared__WEBPACK_IMPORTED_MODULE_19__.mergeFieldStyles)(o), [\n        o\n    ]), Nt = (0,_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.useEffectEvent)((w)=>{\n        W.current !== L && JSON.stringify(W.current) !== JSON.stringify(L) && (ye.current = w, W.current = L, he(new Date));\n    });\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        Object.is(S, ye.current) || Nt(S);\n    }, [\n        S\n    ]), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: Pe,\n        style: Ct,\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.RenderCustomComponent, {\n                CustomComponent: f,\n                Fallback: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.FieldError, {\n                    path: C,\n                    showError: N\n                })\n            }),\n            E || (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.FieldLabel, {\n                label: i,\n                localized: s,\n                path: C,\n                required: d\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: \"\".concat(pe, \"__wrap\"),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_error_boundary__WEBPACK_IMPORTED_MODULE_20__.ErrorBoundary, {\n                        fallbackRender: bn,\n                        onReset: ()=>{},\n                        children: [\n                            h,\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(gt, {\n                                composerKey: oe,\n                                editorConfig: e,\n                                fieldProps: t,\n                                isSmallWidthViewport: T,\n                                onChange: P,\n                                readOnly: I,\n                                value: L\n                            }, JSON.stringify({\n                                path: C,\n                                rerenderProviderKey: Q\n                            })),\n                            m\n                        ]\n                    }),\n                    u,\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.RenderCustomComponent, {\n                        CustomComponent: u,\n                        Fallback: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_payloadcms_ui__WEBPACK_IMPORTED_MODULE_17__.FieldDescription, {\n                            description: n,\n                            path: C\n                        })\n                    })\n                ]\n            })\n        ]\n    }, oe);\n};\n_s2(En, \"U5mjXSXwD7vXoGwwoB+lNa48HJk=\");\nfunction bn(param) {\n    let { error: t } = param;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: \"errorBoundary\",\n        role: \"alert\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                children: \"Something went wrong:\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"pre\", {\n                style: {\n                    color: \"red\"\n                },\n                children: t.message\n            })\n        ]\n    });\n}\nvar qi = En;\n //# sourceMappingURL=Field-QFHWUA2L.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21;\n$RefreshReg$(_c, \"K\");\n$RefreshReg$(_c1, \"Ae\");\n$RefreshReg$(_c2, \"Ft\");\n$RefreshReg$(_c3, \"Kt\");\n$RefreshReg$(_c4, \"Ht\");\n$RefreshReg$(_c5, \"Wt\");\n$RefreshReg$(_c6, \"Yt\");\n$RefreshReg$(_c7, \"Vt\");\n$RefreshReg$(_c8, \"Gt\");\n$RefreshReg$(_c9, \"Z\");\n$RefreshReg$(_c10, \"Ie\");\n$RefreshReg$(_c11, \"V\");\n$RefreshReg$(_c12, \"G\");\n$RefreshReg$(_c13, \"Qt\");\n$RefreshReg$(_c14, \"U\");\n$RefreshReg$(_c15, \"Fe\");\n$RefreshReg$(_c16, \"He\");\n$RefreshReg$(_c17, \"Ue\");\n$RefreshReg$(_c18, \"Qe\");\n$RefreshReg$(_c19, \"No\");\n$RefreshReg$(_c20, \"Io\");\n$RefreshReg$(_c21, \"Ho\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZXhwb3J0cy9jbGllbnQvRmllbGQtUUZIV1VBMkwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlBO0FBUU87QUFDMEI7QUFDZ0M7QUFDbkM7QUFLdkI7QUFBQTtBQ2hCeUI7QUFFaEM7QUFBdUI7QUFDQztBQ1B4QjtBQUFBO0FBRUE7QUFBcUM7QUFDUDtBQUNDO0FBQ0E7QUFFL0I7QUFBdUI7QUFDYTtBQUFBO0FDSDdCO1FBSUZ5QjtRQUFDLEVBQUVDLFlBQUFBLENBQUFBLEVBQVlDLGFBQUFBLENBQUFBLEVBQWFDLFFBQUFBLENBQU07V0FDakNBLEVBQU9DLFFBQUFBLEtBQWEsd0JBQXdCSCxJQUU1Q0UsRUFBT0UsU0FBQUEsSUFBYU8sc0RBQUFOLENBQUNILEVBQU9FLFNBQUFBLEVBQVM7UUFBQ0osWUFBWUE7UUFBWUMsYUFBYUE7SUFBQUEsS0FLeEVDLEVBQU9FLFNBQUFBLElBQWFPLHNEQUFBTixDQUFDSCxFQUFPRSxTQUFBQSxFQUFTO1FBQUNILGFBQWFBO0lBQUFBOztLQVovQ0Y7QUNMYjtBQUkwQztBQUNTO0FBcUI1QztBQUNtQjtBQU1uQixTQUFBMkIsSUFBQTtJQUFBLElBQUFDLElBQUFkLHlEQUFBdkIsQ0FBQSxJQUNMLENBQUFzQyxDQUFBLElBQWlCZCxnR0FBQXZCLENBQUEsR0FFakJzQyxJQUFBQyxJQVVBQyxHQUFBQztJQUFBLE9BQUFMLENBQUFBLENBQUEsT0FBQUMsSUFFVUcsS0FBQUEsSUFDRGYsNkRBQUFULENBQ0xxQixFQUFBSyxlQUFBQSxDQUFBSixrREFBQVQsRUFBQWMsSUFBQUoseURBc0JFLEdBRUZGLEVBQUFLLGVBQUFBLENBQUFDLHVEQUFBVixFQUEyQ0ssR0FBQUMseURBQVcsR0FDdERGLEVBQUFLLGVBQUFBLENBQUFBLDBEQUFBVixFQUE4Q00sR0FBQUMseURBQVcs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QUFPO2dCQUFNO2dCQUFBLFVBQUloRyxFQUFNaUcsT0FBQUE7WUFBQUE7U0FBQUE7SUFBQUE7QUFHM0M7QUFFTyxJQUFNQyxLQUFxQ25EO0FBQUFBIiwic291cmNlcyI6WyIvVXNlcnMvdHJhbmdpYWtpZXQvc3JjL2ZpZWxkL0ZpZWxkLnRzeCIsIi9Vc2Vycy90cmFuZ2lha2lldC9zcmMvbGV4aWNhbC9MZXhpY2FsUHJvdmlkZXIudHN4IiwiL1VzZXJzL3RyYW5naWFraWV0L3NyYy9sZXhpY2FsL0xleGljYWxFZGl0b3IudHN4IiwiL1VzZXJzL3RyYW5naWFraWV0L3NyYy9sZXhpY2FsL0VkaXRvclBsdWdpbi50c3giLCIvVXNlcnMvdHJhbmdpYWtpZXQvc3JjL2xleGljYWwvcGx1Z2lucy9EZWNvcmF0b3JQbHVnaW4vaW5kZXgudHN4IiwiL1VzZXJzL3RyYW5naWFraWV0L3NyYy9sZXhpY2FsL3BsdWdpbnMvaGFuZGxlcy9BZGRCbG9ja0hhbmRsZVBsdWdpbi9pbmRleC50c3giLCIvVXNlcnMvdHJhbmdpYWtpZXQvc3JjL2xleGljYWwvcGx1Z2lucy9oYW5kbGVzL3V0aWxzL2NhbGN1bGF0ZURpc3RhbmNlRnJvbVNjcm9sbGVyRWxlbS50cyIsIi9Vc2Vycy90cmFuZ2lha2lldC9zcmMvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvdXRpbHMvZ2V0Tm9kZUNsb3NlVG9Qb2ludC50cyIsIi9Vc2Vycy90cmFuZ2lha2lldC9zcmMvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvRHJhZ2dhYmxlQmxvY2tQbHVnaW4vZ2V0Qm91bmRpbmdSZWN0V2l0aG91dFRyYW5zZm9ybS50cyIsIi9Vc2Vycy90cmFuZ2lha2lldC9zcmMvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvdXRpbHMvZ2V0Q29sbGFwc2VkTWFyZ2lucy50cyIsIi9Vc2Vycy90cmFuZ2lha2lldC9zcmMvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvdXRpbHMvZ2V0VG9wTGV2ZWxOb2RlS2V5cy50cyIsIi9Vc2Vycy90cmFuZ2lha2lldC9zcmMvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvdXRpbHMvaXNPbkhhbmRsZUVsZW1lbnQudHMiLCIvVXNlcnMvdHJhbmdpYWtpZXQvc3JjL2xleGljYWwvcGx1Z2lucy9oYW5kbGVzL3V0aWxzL2RvZXNMaW5lSGVpZ2h0QWZmZWN0RWxlbWVudC50cyIsIi9Vc2Vycy90cmFuZ2lha2lldC9zcmMvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvdXRpbHMvc2V0SGFuZGxlUG9zaXRpb24udHMiLCIvVXNlcnMvdHJhbmdpYWtpZXQvc3JjL2xleGljYWwvcGx1Z2lucy9oYW5kbGVzL0RyYWdnYWJsZUJsb2NrUGx1Z2luL2luZGV4LnRzeCIsIi9Vc2Vycy90cmFuZ2lha2lldC9zcmMvbGV4aWNhbC9wbHVnaW5zL2hhbmRsZXMvRHJhZ2dhYmxlQmxvY2tQbHVnaW4vc2V0VGFyZ2V0TGluZS50cyIsIi9Vc2Vycy90cmFuZ2lha2lldC9zcmMvbGV4aWNhbC9wbHVnaW5zL0luc2VydFBhcmFncmFwaEF0RW5kL2luZGV4LnRzeCIsIi9Vc2Vycy90cmFuZ2lha2lldC9zcmMvbGV4aWNhbC9wbHVnaW5zL01hcmtkb3duU2hvcnRjdXQvaW5kZXgudHN4IiwiL1VzZXJzL3RyYW5naWFraWV0L3NyYy9sZXhpY2FsL3BsdWdpbnMvTm9ybWFsaXplU2VsZWN0aW9uL2luZGV4LnRzeCIsIi9Vc2Vycy90cmFuZ2lha2lldC9zcmMvbGV4aWNhbC9wbHVnaW5zL1NsYXNoTWVudS9pbmRleC50c3giLCIvVXNlcnMvdHJhbmdpYWtpZXQvc3JjL2xleGljYWwvcGx1Z2lucy9TbGFzaE1lbnUvdXNlTWVudVRyaWdnZXJNYXRjaC50cyIsIi9Vc2Vycy90cmFuZ2lha2lldC9zcmMvbGV4aWNhbC9wbHVnaW5zL1RleHRQbHVnaW4vaW5kZXgudHN4IiwiL1VzZXJzL3RyYW5naWFraWV0L3NyYy9sZXhpY2FsL3VpL0NvbnRlbnRFZGl0YWJsZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5pbXBvcnQgdHlwZSB7IEVkaXRvclN0YXRlLCBTZXJpYWxpemVkRWRpdG9yU3RhdGUgfSBmcm9tICdsZXhpY2FsJ1xuaW1wb3J0IHR5cGUgeyBWYWxpZGF0ZSB9IGZyb20gJ3BheWxvYWQnXG5cbmltcG9ydCB7XG4gIEZpZWxkRGVzY3JpcHRpb24sXG4gIEZpZWxkRXJyb3IsXG4gIEZpZWxkTGFiZWwsXG4gIFJlbmRlckN1c3RvbUNvbXBvbmVudCxcbiAgdXNlRWRpdERlcHRoLFxuICB1c2VFZmZlY3RFdmVudCxcbiAgdXNlRmllbGQsXG59IGZyb20gJ0BwYXlsb2FkY21zL3VpJ1xuaW1wb3J0IHsgbWVyZ2VGaWVsZFN0eWxlcyB9IGZyb20gJ0BwYXlsb2FkY21zL3VpL3NoYXJlZCdcbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgRXJyb3JCb3VuZGFyeSB9IGZyb20gJ3JlYWN0LWVycm9yLWJvdW5kYXJ5J1xuXG5pbXBvcnQgdHlwZSB7IFNhbml0aXplZENsaWVudEVkaXRvckNvbmZpZyB9IGZyb20gJy4uL2xleGljYWwvY29uZmlnL3R5cGVzLmpzJ1xuXG5pbXBvcnQgJy4uL2xleGljYWwvdGhlbWUvRWRpdG9yVGhlbWUuc2NzcydcbmltcG9ydCAnLi9idW5kbGVkLmNzcydcbmltcG9ydCAnLi9pbmRleC5zY3NzJ1xuXG5pbXBvcnQgdHlwZSB7IExleGljYWxSaWNoVGV4dEZpZWxkUHJvcHMgfSBmcm9tICcuLi90eXBlcy5qcydcblxuaW1wb3J0IHsgTGV4aWNhbFByb3ZpZGVyIH0gZnJvbSAnLi4vbGV4aWNhbC9MZXhpY2FsUHJvdmlkZXIuanMnXG5cbmNvbnN0IGJhc2VDbGFzcyA9ICdyaWNoLXRleHQtbGV4aWNhbCdcblxuY29uc3QgUmljaFRleHRDb21wb25lbnQ6IFJlYWN0LkZDPFxuICB7XG4gICAgcmVhZG9ubHkgZWRpdG9yQ29uZmlnOiBTYW5pdGl6ZWRDbGllbnRFZGl0b3JDb25maWcgLy8gV2l0aCByZW5kZXJlZCBmZWF0dXJlcyBuIHN0dWZmXG4gIH0gJiBMZXhpY2FsUmljaFRleHRGaWVsZFByb3BzXG4+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBlZGl0b3JDb25maWcsXG4gICAgZmllbGQsXG4gICAgZmllbGQ6IHtcbiAgICAgIGFkbWluOiB7IGNsYXNzTmFtZSwgZGVzY3JpcHRpb24sIHJlYWRPbmx5OiByZWFkT25seUZyb21BZG1pbiB9ID0ge30sXG4gICAgICBsYWJlbCxcbiAgICAgIGxvY2FsaXplZCxcbiAgICAgIHJlcXVpcmVkLFxuICAgIH0sXG4gICAgcGF0aDogcGF0aEZyb21Qcm9wcyxcbiAgICByZWFkT25seTogcmVhZE9ubHlGcm9tVG9wTGV2ZWxQcm9wcyxcbiAgICB2YWxpZGF0ZSwgLy8gVXNlcnMgY2FuIHBhc3MgaW4gY2xpZW50IHNpZGUgdmFsaWRhdGlvbiBpZiB0aGV5IFdBTlQgdG8sIGJ1dCBpdCdzIG5vdCByZXF1aXJlZCBhbnltb3JlXG4gIH0gPSBwcm9wc1xuXG4gIGNvbnN0IHJlYWRPbmx5RnJvbVByb3BzID0gcmVhZE9ubHlGcm9tVG9wTGV2ZWxQcm9wcyB8fCByZWFkT25seUZyb21BZG1pblxuXG4gIGNvbnN0IGVkaXREZXB0aCA9IHVzZUVkaXREZXB0aCgpXG5cbiAgY29uc3QgbWVtb2l6ZWRWYWxpZGF0ZSA9IHVzZUNhbGxiYWNrPFZhbGlkYXRlPihcbiAgICAodmFsdWUsIHZhbGlkYXRpb25PcHRpb25zKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHZhbGlkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSB2ZXN0aWdlcyBvZiB3aGVuIHRzY29uZmlnIHdhcyBub3Qgc3RyaWN0LiBGZWVsIGZyZWUgdG8gaW1wcm92ZVxuICAgICAgICByZXR1cm4gdmFsaWRhdGUodmFsdWUsIHsgLi4udmFsaWRhdGlvbk9wdGlvbnMsIHJlcXVpcmVkIH0pXG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG4gICAgLy8gSW1wb3J0YW50OiBkbyBub3QgYWRkIHByb3BzIHRvIHRoZSBkZXBlbmRlbmNpZXMgYXJyYXkuXG4gICAgLy8gVGhpcyB3b3VsZCBjYXVzZSBhbiBpbmZpbml0ZSBsb29wIGFuZCBlbmRsZXNzIHJlLXJlbmRlcmluZy5cbiAgICAvLyBSZW1vdmluZyBwcm9wcyBmcm9tIHRoZSBkZXBlbmRlbmNpZXMgYXJyYXkgZml4ZWQgdGhpcyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3BheWxvYWRjbXMvcGF5bG9hZC9pc3N1ZXMvMzcwOVxuICAgIFt2YWxpZGF0ZSwgcmVxdWlyZWRdLFxuICApXG5cbiAgY29uc3Qge1xuICAgIGN1c3RvbUNvbXBvbmVudHM6IHsgQWZ0ZXJJbnB1dCwgQmVmb3JlSW5wdXQsIERlc2NyaXB0aW9uLCBFcnJvciwgTGFiZWwgfSA9IHt9LFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZEZyb21GaWVsZCxcbiAgICBpbml0aWFsVmFsdWUsXG4gICAgcGF0aCxcbiAgICBzZXRWYWx1ZSxcbiAgICBzaG93RXJyb3IsXG4gICAgdmFsdWUsXG4gIH0gPSB1c2VGaWVsZDxTZXJpYWxpemVkRWRpdG9yU3RhdGU+KHtcbiAgICBwb3RlbnRpYWxseVN0YWxlUGF0aDogcGF0aEZyb21Qcm9wcyxcbiAgICB2YWxpZGF0ZTogbWVtb2l6ZWRWYWxpZGF0ZSxcbiAgfSlcblxuICBjb25zdCBkaXNhYmxlZCA9IHJlYWRPbmx5RnJvbVByb3BzIHx8IGRpc2FibGVkRnJvbUZpZWxkXG5cbiAgY29uc3QgW2lzU21hbGxXaWR0aFZpZXdwb3J0LCBzZXRJc1NtYWxsV2lkdGhWaWV3cG9ydF0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgY29uc3QgW3JlcmVuZGVyUHJvdmlkZXJLZXksIHNldFJlcmVuZGVyUHJvdmlkZXJLZXldID0gdXNlU3RhdGU8RGF0ZT4oKVxuXG4gIGNvbnN0IHByZXZJbml0aWFsVmFsdWVSZWYgPSBSZWFjdC51c2VSZWY8U2VyaWFsaXplZEVkaXRvclN0YXRlIHwgdW5kZWZpbmVkPihpbml0aWFsVmFsdWUpXG4gIGNvbnN0IHByZXZWYWx1ZVJlZiA9IFJlYWN0LnVzZVJlZjxTZXJpYWxpemVkRWRpdG9yU3RhdGUgfCB1bmRlZmluZWQ+KHZhbHVlKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdXBkYXRlVmlld1BvcnRXaWR0aCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGlzTmV4dFNtYWxsV2lkdGhWaWV3cG9ydCA9IHdpbmRvdy5tYXRjaE1lZGlhKCcobWF4LXdpZHRoOiA3NjhweCknKS5tYXRjaGVzXG5cbiAgICAgIGlmIChpc05leHRTbWFsbFdpZHRoVmlld3BvcnQgIT09IGlzU21hbGxXaWR0aFZpZXdwb3J0KSB7XG4gICAgICAgIHNldElzU21hbGxXaWR0aFZpZXdwb3J0KGlzTmV4dFNtYWxsV2lkdGhWaWV3cG9ydClcbiAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlVmlld1BvcnRXaWR0aCgpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZVZpZXdQb3J0V2lkdGgpXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZVZpZXdQb3J0V2lkdGgpXG4gICAgfVxuICB9LCBbaXNTbWFsbFdpZHRoVmlld3BvcnRdKVxuXG4gIGNvbnN0IGNsYXNzZXMgPSBbXG4gICAgYmFzZUNsYXNzLFxuICAgICdmaWVsZC10eXBlJyxcbiAgICBjbGFzc05hbWUsXG4gICAgc2hvd0Vycm9yICYmICdlcnJvcicsXG4gICAgZGlzYWJsZWQgJiYgYCR7YmFzZUNsYXNzfS0tcmVhZC1vbmx5YCxcbiAgICBlZGl0b3JDb25maWc/LmFkbWluPy5oaWRlR3V0dGVyICE9PSB0cnVlICYmICFpc1NtYWxsV2lkdGhWaWV3cG9ydFxuICAgICAgPyBgJHtiYXNlQ2xhc3N9LS1zaG93LWd1dHRlcmBcbiAgICAgIDogbnVsbCxcbiAgXVxuICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAuam9pbignICcpXG5cbiAgY29uc3QgcGF0aFdpdGhFZGl0RGVwdGggPSBgJHtwYXRofS4ke2VkaXREZXB0aH1gXG5cbiAgY29uc3QgdXBkYXRlRmllbGRWYWx1ZSA9IChlZGl0b3JTdGF0ZTogRWRpdG9yU3RhdGUpID0+IHtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IGVkaXRvclN0YXRlLnRvSlNPTigpXG4gICAgcHJldlZhbHVlUmVmLmN1cnJlbnQgPSBuZXdTdGF0ZVxuICAgIHNldFZhbHVlKG5ld1N0YXRlKVxuICB9XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKGVkaXRvclN0YXRlOiBFZGl0b3JTdGF0ZSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cucmVxdWVzdElkbGVDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXF1ZXN0SWRsZUNhbGxiYWNrKCgpID0+IHVwZGF0ZUZpZWxkVmFsdWUoZWRpdG9yU3RhdGUpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXBkYXRlRmllbGRWYWx1ZShlZGl0b3JTdGF0ZSlcbiAgICAgIH1cbiAgICB9LFxuICAgIFtzZXRWYWx1ZV0sXG4gIClcblxuICBjb25zdCBzdHlsZXMgPSB1c2VNZW1vKCgpID0+IG1lcmdlRmllbGRTdHlsZXMoZmllbGQpLCBbZmllbGRdKVxuXG4gIGNvbnN0IGhhbmRsZUluaXRpYWxWYWx1ZUNoYW5nZSA9IHVzZUVmZmVjdEV2ZW50KFxuICAgIChpbml0aWFsVmFsdWU6IFNlcmlhbGl6ZWRFZGl0b3JTdGF0ZSB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgLy8gT2JqZWN0IGRlZXAgZXF1YWxpdHkgY2hlY2sgaGVyZSwgYXMgcmUtbW91bnRpbmcgdGhlIGVkaXRvciBpZlxuICAgICAgLy8gdGhlIG5ldyB2YWx1ZSBpcyB0aGUgc2FtZSBhcyB0aGUgb2xkIG9uZSBpcyBub3QgbmVjZXNzYXJ5XG4gICAgICBpZiAoXG4gICAgICAgIHByZXZWYWx1ZVJlZi5jdXJyZW50ICE9PSB2YWx1ZSAmJlxuICAgICAgICBKU09OLnN0cmluZ2lmeShwcmV2VmFsdWVSZWYuY3VycmVudCkgIT09IEpTT04uc3RyaW5naWZ5KHZhbHVlKVxuICAgICAgKSB7XG4gICAgICAgIHByZXZJbml0aWFsVmFsdWVSZWYuY3VycmVudCA9IGluaXRpYWxWYWx1ZVxuICAgICAgICBwcmV2VmFsdWVSZWYuY3VycmVudCA9IHZhbHVlXG4gICAgICAgIHNldFJlcmVuZGVyUHJvdmlkZXJLZXkobmV3IERhdGUoKSlcbiAgICAgIH1cbiAgICB9LFxuICApXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBOZWVkcyB0byB0cmlnZ2VyIGZvciBvYmplY3QgcmVmZXJlbmNlIGNoYW5nZXMgLSBvdGhlcndpc2UsXG4gICAgLy8gcmVhY3RpbmcgdG8gdGhlIHNhbWUgaW5pdGlhbCB2YWx1ZSBjaGFuZ2UgdHdpY2Ugd2lsbCBjYXVzZVxuICAgIC8vIHRoZSBzZWNvbmQgY2hhbmdlIHRvIGJlIGlnbm9yZWQsIGV2ZW4gdGhvdWdoIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZC5cbiAgICAvLyBUaGF0J3MgYmVjYXVzZSBpbml0aWFsVmFsdWUgaXMgbm90IGtlcHQgdXAtdG8tZGF0ZVxuICAgIGlmICghT2JqZWN0LmlzKGluaXRpYWxWYWx1ZSwgcHJldkluaXRpYWxWYWx1ZVJlZi5jdXJyZW50KSkge1xuICAgICAgaGFuZGxlSW5pdGlhbFZhbHVlQ2hhbmdlKGluaXRpYWxWYWx1ZSlcbiAgICB9XG4gIH0sIFtpbml0aWFsVmFsdWVdKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXN9IGtleT17cGF0aFdpdGhFZGl0RGVwdGh9IHN0eWxlPXtzdHlsZXN9PlxuICAgICAgPFJlbmRlckN1c3RvbUNvbXBvbmVudFxuICAgICAgICBDdXN0b21Db21wb25lbnQ9e0Vycm9yfVxuICAgICAgICBGYWxsYmFjaz17PEZpZWxkRXJyb3IgcGF0aD17cGF0aH0gc2hvd0Vycm9yPXtzaG93RXJyb3J9IC8+fVxuICAgICAgLz5cbiAgICAgIHtMYWJlbCB8fCA8RmllbGRMYWJlbCBsYWJlbD17bGFiZWx9IGxvY2FsaXplZD17bG9jYWxpemVkfSBwYXRoPXtwYXRofSByZXF1aXJlZD17cmVxdWlyZWR9IC8+fVxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX3dyYXBgfT5cbiAgICAgICAgPEVycm9yQm91bmRhcnkgZmFsbGJhY2tSZW5kZXI9e2ZhbGxiYWNrUmVuZGVyfSBvblJlc2V0PXsoKSA9PiB7fX0+XG4gICAgICAgICAge0JlZm9yZUlucHV0fVxuICAgICAgICAgIDxMZXhpY2FsUHJvdmlkZXJcbiAgICAgICAgICAgIGNvbXBvc2VyS2V5PXtwYXRoV2l0aEVkaXREZXB0aH1cbiAgICAgICAgICAgIGVkaXRvckNvbmZpZz17ZWRpdG9yQ29uZmlnfVxuICAgICAgICAgICAgZmllbGRQcm9wcz17cHJvcHN9XG4gICAgICAgICAgICBpc1NtYWxsV2lkdGhWaWV3cG9ydD17aXNTbWFsbFdpZHRoVmlld3BvcnR9XG4gICAgICAgICAgICBrZXk9e0pTT04uc3RyaW5naWZ5KHsgcGF0aCwgcmVyZW5kZXJQcm92aWRlcktleSB9KX0gLy8gbWFrZXMgc3VyZSBsZXhpY2FsIGlzIGNvbXBsZXRlbHkgcmUtcmVuZGVyZWQgd2hlbiBpbml0aWFsVmFsdWUgY2hhbmdlcywgYnlwYXNzaW5nIHRoZSBsZXhpY2FsLWludGVybmFsIHZhbHVlIG1lbW9pemF0aW9uLiBUaGF0IHdheSwgZXh0ZXJuYWwgY2hhbmdlcyB0byB0aGUgZm9ybSB3aWxsIHVwZGF0ZSB0aGUgZWRpdG9yLiBNb3JlIGluZm9zIGluIFBSIGRlc2NyaXB0aW9uIChodHRwczovL2dpdGh1Yi5jb20vcGF5bG9hZGNtcy9wYXlsb2FkL3B1bGwvNTAxMClcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICByZWFkT25seT17ZGlzYWJsZWR9XG4gICAgICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7QWZ0ZXJJbnB1dH1cbiAgICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgICAgICB7RGVzY3JpcHRpb259XG4gICAgICAgIDxSZW5kZXJDdXN0b21Db21wb25lbnRcbiAgICAgICAgICBDdXN0b21Db21wb25lbnQ9e0Rlc2NyaXB0aW9ufVxuICAgICAgICAgIEZhbGxiYWNrPXs8RmllbGREZXNjcmlwdGlvbiBkZXNjcmlwdGlvbj17ZGVzY3JpcHRpb259IHBhdGg9e3BhdGh9IC8+fVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gZmFsbGJhY2tSZW5kZXIoeyBlcnJvciB9OiB7IGVycm9yOiBFcnJvciB9KSB7XG4gIC8vIENhbGwgcmVzZXRFcnJvckJvdW5kYXJ5KCkgdG8gcmVzZXQgdGhlIGVycm9yIGJvdW5kYXJ5IGFuZCByZXRyeSB0aGUgcmVuZGVyLlxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJlcnJvckJvdW5kYXJ5XCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgICA8cD5Tb21ldGhpbmcgd2VudCB3cm9uZzo8L3A+XG4gICAgICA8cHJlIHN0eWxlPXt7IGNvbG9yOiAncmVkJyB9fT57ZXJyb3IubWVzc2FnZX08L3ByZT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgY29uc3QgUmljaFRleHQ6IHR5cGVvZiBSaWNoVGV4dENvbXBvbmVudCA9IFJpY2hUZXh0Q29tcG9uZW50XG4iLCIndXNlIGNsaWVudCdcbmltcG9ydCB0eXBlIHsgSW5pdGlhbENvbmZpZ1R5cGUgfSBmcm9tICdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXIuanMnXG5pbXBvcnQgdHlwZSB7IEVkaXRvclN0YXRlLCBMZXhpY2FsRWRpdG9yLCBTZXJpYWxpemVkRWRpdG9yU3RhdGUgfSBmcm9tICdsZXhpY2FsJ1xuXG5pbXBvcnQgeyBMZXhpY2FsQ29tcG9zZXIgfSBmcm9tICdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXIuanMnXG5pbXBvcnQgeyB1c2VFZGl0RGVwdGggfSBmcm9tICdAcGF5bG9hZGNtcy91aSdcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgdHlwZSB7IExleGljYWxSaWNoVGV4dEZpZWxkUHJvcHMgfSBmcm9tICcuLi90eXBlcy5qcydcbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkQ2xpZW50RWRpdG9yQ29uZmlnIH0gZnJvbSAnLi9jb25maWcvdHlwZXMuanMnXG5cbmltcG9ydCB7XG4gIEVkaXRvckNvbmZpZ1Byb3ZpZGVyLFxuICB1c2VFZGl0b3JDb25maWdDb250ZXh0LFxufSBmcm9tICcuL2NvbmZpZy9jbGllbnQvRWRpdG9yQ29uZmlnUHJvdmlkZXIuanMnXG5pbXBvcnQgeyBMZXhpY2FsRWRpdG9yIGFzIExleGljYWxFZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL0xleGljYWxFZGl0b3IuanMnXG5pbXBvcnQgeyBnZXRFbmFibGVkTm9kZXMgfSBmcm9tICcuL25vZGVzL2luZGV4LmpzJ1xuXG5leHBvcnQgdHlwZSBMZXhpY2FsUHJvdmlkZXJQcm9wcyA9IHtcbiAgY29tcG9zZXJLZXk6IHN0cmluZ1xuICBlZGl0b3JDb25maWc6IFNhbml0aXplZENsaWVudEVkaXRvckNvbmZpZ1xuICBmaWVsZFByb3BzOiBMZXhpY2FsUmljaFRleHRGaWVsZFByb3BzXG4gIGlzU21hbGxXaWR0aFZpZXdwb3J0OiBib29sZWFuXG4gIG9uQ2hhbmdlOiAoZWRpdG9yU3RhdGU6IEVkaXRvclN0YXRlLCBlZGl0b3I6IExleGljYWxFZGl0b3IsIHRhZ3M6IFNldDxzdHJpbmc+KSA9PiB2b2lkXG4gIHJlYWRPbmx5OiBib29sZWFuXG4gIHZhbHVlOiBTZXJpYWxpemVkRWRpdG9yU3RhdGVcbn1cblxuY29uc3QgTmVzdFByb3ZpZGVycyA9ICh7XG4gIGNoaWxkcmVuLFxuICBwcm92aWRlcnMsXG59OiB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgcHJvdmlkZXJzOiBhbnlbXVxufSkgPT4ge1xuICBpZiAoIXByb3ZpZGVycz8ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuXG4gIH1cbiAgY29uc3QgQ29tcG9uZW50ID0gcHJvdmlkZXJzWzBdXG4gIGlmIChwcm92aWRlcnMubGVuZ3RoID4gMSkge1xuICAgIHJldHVybiAoXG4gICAgICA8Q29tcG9uZW50PlxuICAgICAgICA8TmVzdFByb3ZpZGVycyBwcm92aWRlcnM9e3Byb3ZpZGVycy5zbGljZSgxKX0+e2NoaWxkcmVufTwvTmVzdFByb3ZpZGVycz5cbiAgICAgIDwvQ29tcG9uZW50PlxuICAgIClcbiAgfVxuICByZXR1cm4gPENvbXBvbmVudD57Y2hpbGRyZW59PC9Db21wb25lbnQ+XG59XG5cbmV4cG9ydCBjb25zdCBMZXhpY2FsUHJvdmlkZXI6IFJlYWN0LkZDPExleGljYWxQcm92aWRlclByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IGNvbXBvc2VyS2V5LCBlZGl0b3JDb25maWcsIGZpZWxkUHJvcHMsIGlzU21hbGxXaWR0aFZpZXdwb3J0LCBvbkNoYW5nZSwgcmVhZE9ubHksIHZhbHVlIH0gPVxuICAgIHByb3BzXG5cbiAgY29uc3QgcGFyZW50Q29udGV4dCA9IHVzZUVkaXRvckNvbmZpZ0NvbnRleHQoKVxuXG4gIGNvbnN0IGVkaXREZXB0aCA9IHVzZUVkaXREZXB0aCgpXG5cbiAgY29uc3QgZWRpdG9yQ29udGFpbmVyUmVmID0gUmVhY3QudXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKVxuXG4gIC8vIHVzZU1lbW8gZm9yIHRoZSBpbml0aWFsQ29uZmlnIHRoYXQgZGVwZW5kcyBvbiByZWFkT25seSBhbmQgdmFsdWVcbiAgY29uc3QgaW5pdGlhbENvbmZpZyA9IHVzZU1lbW88SW5pdGlhbENvbmZpZ1R5cGU+KCgpID0+IHtcbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHZhbHVlIHBhc3NlZCB0byB0aGUgTGV4aWNhbCBlZGl0b3IgaXMgbm90IGFuIG9iamVjdC4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgcmVtb3ZlIHRoZSBkYXRhIGZyb20gdGhlIGZpZWxkIGFuZCBzdGFydCBhZ2Fpbi4gVGhpcyBpcyB0aGUgdmFsdWUgdGhhdCB3YXMgcGFzc2VkIGluOiAnICtcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh2YWx1ZSksXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKHZhbHVlICYmIEFycmF5LmlzQXJyYXkodmFsdWUpICYmICEoJ3Jvb3QnIGluIHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnWW91IGhhdmUgdHJpZWQgdG8gcGFzcyBpbiBkYXRhIGZyb20gdGhlIG9sZCBTbGF0ZSBlZGl0b3IgdG8gdGhlIG5ldyBMZXhpY2FsIGVkaXRvci4gVGhlIGRhdGEgc3RydWN0dXJlIGlzIGRpZmZlcmVudCwgdGh1cyB5b3Ugd2lsbCBoYXZlIHRvIG1pZ3JhdGUgeW91ciBkYXRhLiBXZSBvZmZlciBhIG9uZS1saW5lIG1pZ3JhdGlvbiBzY3JpcHQgd2hpY2ggbWlncmF0ZXMgYWxsIHlvdXIgcmljaCB0ZXh0IGZpZWxkczogaHR0cHM6Ly9wYXlsb2FkY21zLmNvbS9kb2NzL2xleGljYWwvbWlncmF0aW9uI21pZ3JhdGlvbi12aWEtbWlncmF0aW9uLXNjcmlwdC1yZWNvbW1lbmRlZCcsXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKHZhbHVlICYmICdqc29uQ29udGVudCcgaW4gdmFsdWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1lvdSBoYXZlIHRyaWVkIHRvIHBhc3MgaW4gZGF0YSBmcm9tIHBheWxvYWQtcGx1Z2luLWxleGljYWwuIFRoZSBkYXRhIHN0cnVjdHVyZSBpcyBkaWZmZXJlbnQsIHRodXMgeW91IHdpbGwgaGF2ZSB0byBtaWdyYXRlIHlvdXIgZGF0YS4gTWlncmF0aW9uIGd1aWRlOiBodHRwczovL3BheWxvYWRjbXMuY29tL2RvY3MvbGV4aWNhbC9taWdyYXRpb24jbWlncmF0aW5nLWZyb20tcGF5bG9hZC1wbHVnaW4tbGV4aWNhbCcsXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVkaXRhYmxlOiByZWFkT25seSAhPT0gdHJ1ZSxcbiAgICAgIGVkaXRvclN0YXRlOiB2YWx1ZSAhPSBudWxsID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogdW5kZWZpbmVkLFxuICAgICAgbmFtZXNwYWNlOiBlZGl0b3JDb25maWcubGV4aWNhbC5uYW1lc3BhY2UsXG4gICAgICBub2RlczogZ2V0RW5hYmxlZE5vZGVzKHsgZWRpdG9yQ29uZmlnIH0pLFxuICAgICAgb25FcnJvcjogKGVycm9yOiBFcnJvcikgPT4ge1xuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgfSxcbiAgICAgIHRoZW1lOiBlZGl0b3JDb25maWcubGV4aWNhbC50aGVtZSxcbiAgICB9XG4gICAgLy8gSW1wb3J0YW50OiBkbyBub3QgYWRkIHJlYWRPbmx5IGFuZCB2YWx1ZSB0byB0aGUgZGVwZW5kZW5jaWVzIGFycmF5LiBUaGlzIHdpbGwgY2F1c2UgdGhlIGVudGlyZSBsZXhpY2FsIGVkaXRvciB0byByZS1yZW5kZXIgaWYgdGhlIGRvY3VtZW50IGlzIHNhdmVkLCB3aGljaCB3aWxsXG4gICAgLy8gY2F1c2UgdGhlIGVkaXRvciB0byBsb3NlIGZvY3VzLlxuICB9LCBbZWRpdG9yQ29uZmlnXSlcblxuICBpZiAoIWluaXRpYWxDb25maWcpIHtcbiAgICByZXR1cm4gPHA+TG9hZGluZy4uLjwvcD5cbiAgfVxuXG4gIC8vIFdlIG5lZWQgdG8gYWRkIGluaXRpYWxDb25maWcuZWRpdGFibGUgdG8gdGhlIGtleSB0byBmb3JjZSBhIHJlLXJlbmRlciB3aGVuIHRoZSByZWFkT25seSBwcm9wIGNoYW5nZXMuXG4gIC8vIFdpdGhvdXQgaXQsIHRoZXJlIHdlcmUgY2FzZXMgd2hlcmUgbGV4aWNhbCBlZGl0b3JzIGluc2lkZSBkcmF3ZXJzIHR1cm4gcmVhZE9ubHkgaW5pdGlhbGx5IC0gYSBmZXcgbWlsaXNlY29uZHMgbGF0ZXIgdGhleSB0dXJuIGVkaXRhYmxlLCBidXQgdGhlIGVkaXRvciBkb2VzIG5vdCByZS1yZW5kZXIgYW5kIHN0YXlzIHJlYWRPbmx5LlxuICByZXR1cm4gKFxuICAgIDxMZXhpY2FsQ29tcG9zZXIgaW5pdGlhbENvbmZpZz17aW5pdGlhbENvbmZpZ30ga2V5PXtjb21wb3NlcktleSArIGluaXRpYWxDb25maWcuZWRpdGFibGV9PlxuICAgICAgPEVkaXRvckNvbmZpZ1Byb3ZpZGVyXG4gICAgICAgIGVkaXRvckNvbmZpZz17ZWRpdG9yQ29uZmlnfVxuICAgICAgICBlZGl0b3JDb250YWluZXJSZWY9e2VkaXRvckNvbnRhaW5lclJlZn1cbiAgICAgICAgZmllbGRQcm9wcz17ZmllbGRQcm9wc31cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBhcmVudCBlZGl0b3IgaXMgbm90IHRydWx5IHRoZSBwYXJlbnQgZWRpdG9yLCBpZiB0aGUgY3VycmVudCBlZGl0b3IgaXMgcGFydCBvZiBhIGRyYXdlciBhbmQgdGhlIHBhcmVudCBlZGl0b3IgaXMgdGhlIG1haW4gZWRpdG9yLlxuICAgICAgICAgKi9cbiAgICAgICAgcGFyZW50Q29udGV4dD17cGFyZW50Q29udGV4dD8uZWRpdERlcHRoID09PSBlZGl0RGVwdGggPyBwYXJlbnRDb250ZXh0IDogdW5kZWZpbmVkfVxuICAgICAgPlxuICAgICAgICA8TmVzdFByb3ZpZGVycyBwcm92aWRlcnM9e2VkaXRvckNvbmZpZy5mZWF0dXJlcy5wcm92aWRlcnN9PlxuICAgICAgICAgIDxMZXhpY2FsRWRpdG9yQ29tcG9uZW50XG4gICAgICAgICAgICBlZGl0b3JDb25maWc9e2VkaXRvckNvbmZpZ31cbiAgICAgICAgICAgIGVkaXRvckNvbnRhaW5lclJlZj17ZWRpdG9yQ29udGFpbmVyUmVmfVxuICAgICAgICAgICAgaXNTbWFsbFdpZHRoVmlld3BvcnQ9e2lzU21hbGxXaWR0aFZpZXdwb3J0fVxuICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvTmVzdFByb3ZpZGVycz5cbiAgICAgIDwvRWRpdG9yQ29uZmlnUHJvdmlkZXI+XG4gICAgPC9MZXhpY2FsQ29tcG9zZXI+XG4gIClcbn1cbiIsIid1c2UgY2xpZW50J1xuaW1wb3J0IHsgdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQuanMnXG5pbXBvcnQgeyBMZXhpY2FsRXJyb3JCb3VuZGFyeSB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxFcnJvckJvdW5kYXJ5LmpzJ1xuaW1wb3J0IHsgSGlzdG9yeVBsdWdpbiB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxIaXN0b3J5UGx1Z2luLmpzJ1xuaW1wb3J0IHsgT25DaGFuZ2VQbHVnaW4gfSBmcm9tICdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsT25DaGFuZ2VQbHVnaW4uanMnXG5pbXBvcnQgeyBSaWNoVGV4dFBsdWdpbiB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxSaWNoVGV4dFBsdWdpbi5qcydcbmltcG9ydCB7IEJMVVJfQ09NTUFORCwgQ09NTUFORF9QUklPUklUWV9MT1csIEZPQ1VTX0NPTU1BTkQgfSBmcm9tICdsZXhpY2FsJ1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCB0eXBlIHsgTGV4aWNhbFByb3ZpZGVyUHJvcHMgfSBmcm9tICcuL0xleGljYWxQcm92aWRlci5qcydcblxuaW1wb3J0IHsgdXNlRWRpdG9yQ29uZmlnQ29udGV4dCB9IGZyb20gJy4vY29uZmlnL2NsaWVudC9FZGl0b3JDb25maWdQcm92aWRlci5qcydcbmltcG9ydCB7IEVkaXRvclBsdWdpbiB9IGZyb20gJy4vRWRpdG9yUGx1Z2luLmpzJ1xuaW1wb3J0ICcuL0xleGljYWxFZGl0b3Iuc2NzcydcbmltcG9ydCB7IERlY29yYXRvclBsdWdpbiB9IGZyb20gJy4vcGx1Z2lucy9EZWNvcmF0b3JQbHVnaW4vaW5kZXguanMnXG5pbXBvcnQgeyBBZGRCbG9ja0hhbmRsZVBsdWdpbiB9IGZyb20gJy4vcGx1Z2lucy9oYW5kbGVzL0FkZEJsb2NrSGFuZGxlUGx1Z2luL2luZGV4LmpzJ1xuaW1wb3J0IHsgRHJhZ2dhYmxlQmxvY2tQbHVnaW4gfSBmcm9tICcuL3BsdWdpbnMvaGFuZGxlcy9EcmFnZ2FibGVCbG9ja1BsdWdpbi9pbmRleC5qcydcbmltcG9ydCB7IEluc2VydFBhcmFncmFwaEF0RW5kUGx1Z2luIH0gZnJvbSAnLi9wbHVnaW5zL0luc2VydFBhcmFncmFwaEF0RW5kL2luZGV4LmpzJ1xuaW1wb3J0IHsgTWFya2Rvd25TaG9ydGN1dFBsdWdpbiB9IGZyb20gJy4vcGx1Z2lucy9NYXJrZG93blNob3J0Y3V0L2luZGV4LmpzJ1xuaW1wb3J0IHsgTm9ybWFsaXplU2VsZWN0aW9uUGx1Z2luIH0gZnJvbSAnLi9wbHVnaW5zL05vcm1hbGl6ZVNlbGVjdGlvbi9pbmRleC5qcydcbmltcG9ydCB7IFNsYXNoTWVudVBsdWdpbiB9IGZyb20gJy4vcGx1Z2lucy9TbGFzaE1lbnUvaW5kZXguanMnXG5pbXBvcnQgeyBUZXh0UGx1Z2luIH0gZnJvbSAnLi9wbHVnaW5zL1RleHRQbHVnaW4vaW5kZXguanMnXG5pbXBvcnQgeyBMZXhpY2FsQ29udGVudEVkaXRhYmxlIH0gZnJvbSAnLi91aS9Db250ZW50RWRpdGFibGUuanMnXG5cbmV4cG9ydCBjb25zdCBMZXhpY2FsRWRpdG9yOiBSZWFjdC5GQzxcbiAge1xuICAgIGVkaXRvckNvbnRhaW5lclJlZjogUmVhY3QuUmVmT2JqZWN0PEhUTUxEaXZFbGVtZW50IHwgbnVsbD5cbiAgICBpc1NtYWxsV2lkdGhWaWV3cG9ydDogYm9vbGVhblxuICB9ICYgUGljazxMZXhpY2FsUHJvdmlkZXJQcm9wcywgJ2VkaXRvckNvbmZpZycgfCAnb25DaGFuZ2UnPlxuPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IGVkaXRvckNvbmZpZywgZWRpdG9yQ29udGFpbmVyUmVmLCBpc1NtYWxsV2lkdGhWaWV3cG9ydCwgb25DaGFuZ2UgfSA9IHByb3BzXG4gIGNvbnN0IGVkaXRvckNvbmZpZ0NvbnRleHQgPSB1c2VFZGl0b3JDb25maWdDb250ZXh0KClcbiAgY29uc3QgW2VkaXRvcl0gPSB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KClcblxuICBjb25zdCBbZmxvYXRpbmdBbmNob3JFbGVtLCBzZXRGbG9hdGluZ0FuY2hvckVsZW1dID0gdXNlU3RhdGU8SFRNTERpdkVsZW1lbnQgfCBudWxsPihudWxsKVxuICBjb25zdCBvblJlZiA9IChfZmxvYXRpbmdBbmNob3JFbGVtOiBIVE1MRGl2RWxlbWVudCkgPT4ge1xuICAgIGlmIChfZmxvYXRpbmdBbmNob3JFbGVtICE9PSBudWxsKSB7XG4gICAgICBzZXRGbG9hdGluZ0FuY2hvckVsZW0oX2Zsb2F0aW5nQW5jaG9yRWxlbSlcbiAgICB9XG4gIH1cblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZWRpdG9yQ29uZmlnQ29udGV4dD8udXVpZCkge1xuICAgICAgY29uc29sZS5lcnJvcignTGV4aWNhbCBFZGl0b3IgbXVzdCBiZSB1c2VkIHdpdGhpbiBhbiBFZGl0b3JDb25maWdQcm92aWRlcicpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKGVkaXRvckNvbmZpZ0NvbnRleHQ/LnBhcmVudEVkaXRvcj8udXVpZCkge1xuICAgICAgZWRpdG9yQ29uZmlnQ29udGV4dC5wYXJlbnRFZGl0b3I/LnJlZ2lzdGVyQ2hpbGQoZWRpdG9yQ29uZmlnQ29udGV4dC51dWlkLCBlZGl0b3JDb25maWdDb250ZXh0KVxuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZUZvY3VzID0gKCkgPT4ge1xuICAgICAgZWRpdG9yQ29uZmlnQ29udGV4dC5mb2N1c0VkaXRvcihlZGl0b3JDb25maWdDb250ZXh0KVxuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZUJsdXIgPSAoKSA9PiB7XG4gICAgICBlZGl0b3JDb25maWdDb250ZXh0LmJsdXJFZGl0b3IoZWRpdG9yQ29uZmlnQ29udGV4dClcbiAgICB9XG5cbiAgICBjb25zdCB1bnJlZ2lzdGVyRm9jdXMgPSBlZGl0b3IucmVnaXN0ZXJDb21tYW5kPE1vdXNlRXZlbnQ+KFxuICAgICAgRk9DVVNfQ09NTUFORCxcbiAgICAgICgpID0+IHtcbiAgICAgICAgaGFuZGxlRm9jdXMoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSxcbiAgICAgIENPTU1BTkRfUFJJT1JJVFlfTE9XLFxuICAgIClcblxuICAgIGNvbnN0IHVucmVnaXN0ZXJCbHVyID0gZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZDxNb3VzZUV2ZW50PihcbiAgICAgIEJMVVJfQ09NTUFORCxcbiAgICAgICgpID0+IHtcbiAgICAgICAgaGFuZGxlQmx1cigpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9LFxuICAgICAgQ09NTUFORF9QUklPUklUWV9MT1csXG4gICAgKVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHVucmVnaXN0ZXJGb2N1cygpXG4gICAgICB1bnJlZ2lzdGVyQmx1cigpXG4gICAgICBlZGl0b3JDb25maWdDb250ZXh0LnBhcmVudEVkaXRvcj8udW5yZWdpc3RlckNoaWxkPy4oZWRpdG9yQ29uZmlnQ29udGV4dC51dWlkKVxuICAgIH1cbiAgfSwgW2VkaXRvciwgZWRpdG9yQ29uZmlnQ29udGV4dF0pXG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICB7ZWRpdG9yQ29uZmlnLmZlYXR1cmVzLnBsdWdpbnM/Lm1hcCgocGx1Z2luKSA9PiB7XG4gICAgICAgIGlmIChwbHVnaW4ucG9zaXRpb24gPT09ICdhYm92ZUNvbnRhaW5lcicpIHtcbiAgICAgICAgICByZXR1cm4gPEVkaXRvclBsdWdpbiBjbGllbnRQcm9wcz17cGx1Z2luLmNsaWVudFByb3BzfSBrZXk9e3BsdWdpbi5rZXl9IHBsdWdpbj17cGx1Z2lufSAvPlxuICAgICAgICB9XG4gICAgICB9KX1cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdG9yLWNvbnRhaW5lclwiIHJlZj17ZWRpdG9yQ29udGFpbmVyUmVmfT5cbiAgICAgICAge2VkaXRvckNvbmZpZy5mZWF0dXJlcy5wbHVnaW5zPy5tYXAoKHBsdWdpbikgPT4ge1xuICAgICAgICAgIGlmIChwbHVnaW4ucG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8RWRpdG9yUGx1Z2luIGNsaWVudFByb3BzPXtwbHVnaW4uY2xpZW50UHJvcHN9IGtleT17cGx1Z2luLmtleX0gcGx1Z2luPXtwbHVnaW59IC8+XG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICB9KX1cbiAgICAgICAgPFJpY2hUZXh0UGx1Z2luXG4gICAgICAgICAgY29udGVudEVkaXRhYmxlPXtcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdG9yLXNjcm9sbGVyXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdG9yXCIgcmVmPXtvblJlZn0+XG4gICAgICAgICAgICAgICAgPExleGljYWxDb250ZW50RWRpdGFibGUgZWRpdG9yQ29uZmlnPXtlZGl0b3JDb25maWd9IC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgfVxuICAgICAgICAgIEVycm9yQm91bmRhcnk9e0xleGljYWxFcnJvckJvdW5kYXJ5fVxuICAgICAgICAvPlxuICAgICAgICA8Tm9ybWFsaXplU2VsZWN0aW9uUGx1Z2luIC8+XG4gICAgICAgIDxJbnNlcnRQYXJhZ3JhcGhBdEVuZFBsdWdpbiAvPlxuICAgICAgICA8RGVjb3JhdG9yUGx1Z2luIC8+XG4gICAgICAgIDxUZXh0UGx1Z2luIGZlYXR1cmVzPXtlZGl0b3JDb25maWcuZmVhdHVyZXN9IC8+XG4gICAgICAgIDxPbkNoYW5nZVBsdWdpblxuICAgICAgICAgIC8vIFNlbGVjdGlvbiBjaGFuZ2VzIGNhbiBiZSBpZ25vcmVkIGhlcmUsIHJlZHVjaW5nIHRoZVxuICAgICAgICAgIC8vIGZyZXF1ZW5jeSB0aGF0IHRoZSBGaWVsZENvbXBvbmVudCBhbmQgUGF5bG9hZCByZWNlaXZlIHVwZGF0ZXMuXG4gICAgICAgICAgLy8gU2VsZWN0aW9uIGNoYW5nZXMgYXJlIG9ubHkgbmVlZGVkIGlmIHlvdSBhcmUgc2F2aW5nIHNlbGVjdGlvbiBzdGF0ZVxuICAgICAgICAgIGlnbm9yZVNlbGVjdGlvbkNoYW5nZVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZWRpdG9yU3RhdGUsIGVkaXRvciwgdGFncykgPT4ge1xuICAgICAgICAgICAgLy8gSWdub3JlIGFueSBvbkNoYW5nZSBldmVudCB0cmlnZ2VyZWQgYnkgZm9jdXMgb25seVxuICAgICAgICAgICAgaWYgKCF0YWdzLmhhcygnZm9jdXMnKSB8fCB0YWdzLnNpemUgPiAxKSB7XG4gICAgICAgICAgICAgIGlmIChvbkNoYW5nZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb25DaGFuZ2UoZWRpdG9yU3RhdGUsIGVkaXRvciwgdGFncylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIHtmbG9hdGluZ0FuY2hvckVsZW0gJiYgKFxuICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgIHshaXNTbWFsbFdpZHRoVmlld3BvcnQgJiYgZWRpdG9yLmlzRWRpdGFibGUoKSAmJiAoXG4gICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICA8RHJhZ2dhYmxlQmxvY2tQbHVnaW4gYW5jaG9yRWxlbT17ZmxvYXRpbmdBbmNob3JFbGVtfSAvPlxuICAgICAgICAgICAgICAgIDxBZGRCbG9ja0hhbmRsZVBsdWdpbiBhbmNob3JFbGVtPXtmbG9hdGluZ0FuY2hvckVsZW19IC8+XG4gICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge2VkaXRvckNvbmZpZy5mZWF0dXJlcy5wbHVnaW5zPy5tYXAoKHBsdWdpbikgPT4ge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgcGx1Z2luLnBvc2l0aW9uID09PSAnZmxvYXRpbmdBbmNob3JFbGVtJyAmJlxuICAgICAgICAgICAgICAgICEocGx1Z2luLmRlc2t0b3BPbmx5ID09PSB0cnVlICYmIGlzU21hbGxXaWR0aFZpZXdwb3J0KVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPEVkaXRvclBsdWdpblxuICAgICAgICAgICAgICAgICAgICBhbmNob3JFbGVtPXtmbG9hdGluZ0FuY2hvckVsZW19XG4gICAgICAgICAgICAgICAgICAgIGNsaWVudFByb3BzPXtwbHVnaW4uY2xpZW50UHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIGtleT17cGx1Z2luLmtleX1cbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luPXtwbHVnaW59XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICB7ZWRpdG9yLmlzRWRpdGFibGUoKSAmJiAoXG4gICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICA8U2xhc2hNZW51UGx1Z2luIGFuY2hvckVsZW09e2Zsb2F0aW5nQW5jaG9yRWxlbX0gLz5cbiAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgKX1cbiAgICAgICAge2VkaXRvci5pc0VkaXRhYmxlKCkgJiYgKFxuICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgIDxIaXN0b3J5UGx1Z2luIC8+XG4gICAgICAgICAgICB7ZWRpdG9yQ29uZmlnPy5mZWF0dXJlcz8ubWFya2Rvd25UcmFuc2Zvcm1lcnM/Lmxlbmd0aCA+IDAgJiYgPE1hcmtkb3duU2hvcnRjdXRQbHVnaW4gLz59XG4gICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgKX1cbiAgICAgICAge2VkaXRvckNvbmZpZy5mZWF0dXJlcy5wbHVnaW5zPy5tYXAoKHBsdWdpbikgPT4ge1xuICAgICAgICAgIGlmIChwbHVnaW4ucG9zaXRpb24gPT09ICdub3JtYWwnKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8RWRpdG9yUGx1Z2luIGNsaWVudFByb3BzPXtwbHVnaW4uY2xpZW50UHJvcHN9IGtleT17cGx1Z2luLmtleX0gcGx1Z2luPXtwbHVnaW59IC8+XG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICB9KX1cbiAgICAgICAge2VkaXRvckNvbmZpZy5mZWF0dXJlcy5wbHVnaW5zPy5tYXAoKHBsdWdpbikgPT4ge1xuICAgICAgICAgIGlmIChwbHVnaW4ucG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8RWRpdG9yUGx1Z2luIGNsaWVudFByb3BzPXtwbHVnaW4uY2xpZW50UHJvcHN9IGtleT17cGx1Z2luLmtleX0gcGx1Z2luPXtwbHVnaW59IC8+XG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICB9KX1cbiAgICAgIDwvZGl2PlxuICAgICAge2VkaXRvckNvbmZpZy5mZWF0dXJlcy5wbHVnaW5zPy5tYXAoKHBsdWdpbikgPT4ge1xuICAgICAgICBpZiAocGx1Z2luLnBvc2l0aW9uID09PSAnYmVsb3dDb250YWluZXInKSB7XG4gICAgICAgICAgcmV0dXJuIDxFZGl0b3JQbHVnaW4gY2xpZW50UHJvcHM9e3BsdWdpbi5jbGllbnRQcm9wc30ga2V5PXtwbHVnaW4ua2V5fSBwbHVnaW49e3BsdWdpbn0gLz5cbiAgICAgICAgfVxuICAgICAgfSl9XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuIiwiJ3VzZSBjbGllbnQnXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkUGx1Z2luIH0gZnJvbSAnLi4vZmVhdHVyZXMvdHlwZXNDbGllbnQuanMnXG5cbmV4cG9ydCBjb25zdCBFZGl0b3JQbHVnaW46IFJlYWN0LkZDPHtcbiAgYW5jaG9yRWxlbT86IEhUTUxEaXZFbGVtZW50XG4gIGNsaWVudFByb3BzOiB1bmtub3duXG4gIHBsdWdpbjogU2FuaXRpemVkUGx1Z2luXG59PiA9ICh7IGFuY2hvckVsZW0sIGNsaWVudFByb3BzLCBwbHVnaW4gfSkgPT4ge1xuICBpZiAocGx1Z2luLnBvc2l0aW9uID09PSAnZmxvYXRpbmdBbmNob3JFbGVtJyAmJiBhbmNob3JFbGVtKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHBsdWdpbi5Db21wb25lbnQgJiYgPHBsdWdpbi5Db21wb25lbnQgYW5jaG9yRWxlbT17YW5jaG9yRWxlbX0gY2xpZW50UHJvcHM9e2NsaWVudFByb3BzfSAvPlxuICAgIClcbiAgfVxuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgLSB0cyBpcyBub3QgYWJsZSB0byBpbmZlciB0aGF0IHBsdWdpbi5Db21wb25lbnQgaXMgb2YgdHlwZSBQbHVnaW5Db21wb25lbnRcbiAgcmV0dXJuIHBsdWdpbi5Db21wb25lbnQgJiYgPHBsdWdpbi5Db21wb25lbnQgY2xpZW50UHJvcHM9e2NsaWVudFByb3BzfSAvPlxufVxuIiwiJ3VzZSBjbGllbnQnXG5cbmltcG9ydCB0eXBlIHsgRGVjb3JhdG9yTm9kZSwgRWxlbWVudE5vZGUsIExleGljYWxOb2RlIH0gZnJvbSAnbGV4aWNhbCdcblxuaW1wb3J0IHsgdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnXG5pbXBvcnQgeyAkZmluZE1hdGNoaW5nUGFyZW50LCBtZXJnZVJlZ2lzdGVyIH0gZnJvbSAnQGxleGljYWwvdXRpbHMnXG5pbXBvcnQge1xuICAkY3JlYXRlTm9kZVNlbGVjdGlvbixcbiAgJGdldEVkaXRvcixcbiAgJGdldE5lYXJlc3ROb2RlRnJvbURPTU5vZGUsXG4gICRnZXRTZWxlY3Rpb24sXG4gICRpc0RlY29yYXRvck5vZGUsXG4gICRpc0VsZW1lbnROb2RlLFxuICAkaXNMaW5lQnJlYWtOb2RlLFxuICAkaXNOb2RlU2VsZWN0aW9uLFxuICAkaXNSYW5nZVNlbGVjdGlvbixcbiAgJGlzUm9vdE9yU2hhZG93Um9vdCxcbiAgJGlzVGV4dE5vZGUsXG4gICRzZXRTZWxlY3Rpb24sXG4gIENMSUNLX0NPTU1BTkQsXG4gIENPTU1BTkRfUFJJT1JJVFlfTE9XLFxuICBLRVlfQVJST1dfRE9XTl9DT01NQU5ELFxuICBLRVlfQVJST1dfVVBfQ09NTUFORCxcbiAgS0VZX0JBQ0tTUEFDRV9DT01NQU5ELFxuICBLRVlfREVMRVRFX0NPTU1BTkQsXG4gIFNFTEVDVElPTl9DSEFOR0VfQ09NTUFORCxcbn0gZnJvbSAnbGV4aWNhbCdcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgJy4vaW5kZXguc2NzcydcblxuLy8gVE9ETzogVGhpcyBzaG91bGQgaWRlYWxseSBiZSBmaXhlZCBpbiBMZXhpY2FsLiBTZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9sZXhpY2FsL3B1bGwvNzA3MlxuZXhwb3J0IGZ1bmN0aW9uIERlY29yYXRvclBsdWdpbigpIHtcbiAgY29uc3QgW2VkaXRvcl0gPSB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KClcblxuICBjb25zdCAkb25EZWxldGUgPSAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICBjb25zdCBzZWxlY3Rpb24gPSAkZ2V0U2VsZWN0aW9uKClcbiAgICBpZiAoISRpc05vZGVTZWxlY3Rpb24oc2VsZWN0aW9uKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBzZWxlY3Rpb24uZ2V0Tm9kZXMoKS5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICBub2RlLnJlbW92ZSgpXG4gICAgfSlcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gbWVyZ2VSZWdpc3RlcihcbiAgICAgIGVkaXRvci5yZWdpc3RlckNvbW1hbmQoXG4gICAgICAgIENMSUNLX0NPTU1BTkQsXG4gICAgICAgIChldmVudCkgPT4ge1xuICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZWNvcmF0b3Itc2VsZWN0ZWQnKT8uY2xhc3NMaXN0LnJlbW92ZSgnZGVjb3JhdG9yLXNlbGVjdGVkJylcbiAgICAgICAgICBjb25zdCBkZWNvcmF0b3IgPSAkZ2V0RGVjb3JhdG9yQnlNb3VzZUV2ZW50KGV2ZW50KVxuICAgICAgICAgIGlmICghZGVjb3JhdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB7IHRhcmdldCB9ID0gZXZlbnRcbiAgICAgICAgICBjb25zdCBpc0ludGVyYWN0aXZlID1cbiAgICAgICAgICAgICEodGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHx8XG4gICAgICAgICAgICB0YXJnZXQuaXNDb250ZW50RWRpdGFibGUgfHxcbiAgICAgICAgICAgIHRhcmdldC5jbG9zZXN0KFxuICAgICAgICAgICAgICAnYnV0dG9uLCB0ZXh0YXJlYSwgaW5wdXQsIC5yZWFjdC1zZWxlY3QsIC5jb2RlLWVkaXRvciwgLm5vLXNlbGVjdC1kZWNvcmF0b3IsIFtyb2xlPVwiYnV0dG9uXCJdJyxcbiAgICAgICAgICAgIClcbiAgICAgICAgICBpZiAoaXNJbnRlcmFjdGl2ZSkge1xuICAgICAgICAgICAgJHNldFNlbGVjdGlvbihudWxsKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc2VsZWN0RGVjb3JhdG9yKGRlY29yYXRvcilcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgQ09NTUFORF9QUklPUklUWV9MT1csXG4gICAgICApLFxuICAgICAgZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChLRVlfREVMRVRFX0NPTU1BTkQsICRvbkRlbGV0ZSwgQ09NTUFORF9QUklPUklUWV9MT1cpLFxuICAgICAgZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChLRVlfQkFDS1NQQUNFX0NPTU1BTkQsICRvbkRlbGV0ZSwgQ09NTUFORF9QUklPUklUWV9MT1cpLFxuICAgICAgZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChcbiAgICAgICAgU0VMRUNUSU9OX0NIQU5HRV9DT01NQU5ELFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgZGVjb3JhdG9yID0gJGdldFNlbGVjdGVkRGVjb3JhdG9yKClcbiAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGVjb3JhdG9yLXNlbGVjdGVkJyk/LmNsYXNzTGlzdC5yZW1vdmUoJ2RlY29yYXRvci1zZWxlY3RlZCcpXG4gICAgICAgICAgaWYgKGRlY29yYXRvcikge1xuICAgICAgICAgICAgZGVjb3JhdG9yLmVsZW1lbnQ/LmNsYXNzTGlzdC5hZGQoJ2RlY29yYXRvci1zZWxlY3RlZCcpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgQ09NTUFORF9QUklPUklUWV9MT1csXG4gICAgICApLFxuICAgICAgZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChcbiAgICAgICAgS0VZX0FSUk9XX1VQX0NPTU1BTkQsXG4gICAgICAgIChldmVudCkgPT4ge1xuICAgICAgICAgIC8vIENBU0UgMTogTm9kZSBzZWxlY3Rpb25cbiAgICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSAkZ2V0U2VsZWN0aW9uKClcbiAgICAgICAgICBpZiAoJGlzTm9kZVNlbGVjdGlvbihzZWxlY3Rpb24pKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2U2libGluZyA9IHNlbGVjdGlvbi5nZXROb2RlcygpWzBdPy5nZXRQcmV2aW91c1NpYmxpbmcoKVxuICAgICAgICAgICAgaWYgKCRpc0RlY29yYXRvck5vZGUocHJldlNpYmxpbmcpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSAkZ2V0RWRpdG9yKCkuZ2V0RWxlbWVudEJ5S2V5KHByZXZTaWJsaW5nLmdldEtleSgpKVxuICAgICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICRzZWxlY3REZWNvcmF0b3IoeyBlbGVtZW50LCBub2RlOiBwcmV2U2libGluZyB9KVxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEkaXNFbGVtZW50Tm9kZShwcmV2U2libGluZykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsYXN0RGVzY2VuZGFudCA9IHByZXZTaWJsaW5nLmdldExhc3REZXNjZW5kYW50KCkgPz8gcHJldlNpYmxpbmdcbiAgICAgICAgICAgIGlmICghbGFzdERlc2NlbmRhbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBibG9jayA9ICRmaW5kTWF0Y2hpbmdQYXJlbnQobGFzdERlc2NlbmRhbnQsIElOVEVSTkFMXyRpc0Jsb2NrKVxuICAgICAgICAgICAgYmxvY2s/LnNlbGVjdFN0YXJ0KClcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghJGlzUmFuZ2VTZWxlY3Rpb24oc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQ0FTRSAyOiBSYW5nZSBzZWxlY3Rpb25cbiAgICAgICAgICAvLyBHZXQgZmlyc3Qgc2VsZWN0ZWQgYmxvY2tcbiAgICAgICAgICBjb25zdCBmaXJzdFBvaW50ID0gc2VsZWN0aW9uLmlzQmFja3dhcmQoKSA/IHNlbGVjdGlvbi5hbmNob3IgOiBzZWxlY3Rpb24uZm9jdXNcbiAgICAgICAgICBjb25zdCBmaXJzdE5vZGUgPSBmaXJzdFBvaW50LmdldE5vZGUoKVxuICAgICAgICAgIGNvbnN0IGZpcnN0U2VsZWN0ZWRCbG9jayA9ICRmaW5kTWF0Y2hpbmdQYXJlbnQoZmlyc3ROb2RlLCAobm9kZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGZpbmRGaXJzdFNpYmxpbmdCbG9jayhub2RlKSAhPT0gbnVsbFxuICAgICAgICAgIH0pXG4gICAgICAgICAgY29uc3QgcHJldkJsb2NrID0gZmlyc3RTZWxlY3RlZEJsb2NrPy5nZXRQcmV2aW91c1NpYmxpbmcoKVxuICAgICAgICAgIGlmICghZmlyc3RTZWxlY3RlZEJsb2NrIHx8IHByZXZCbG9jayAhPT0gZmluZEZpcnN0U2libGluZ0Jsb2NrKGZpcnN0U2VsZWN0ZWRCbG9jaykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgkaXNEZWNvcmF0b3JOb2RlKHByZXZCbG9jaykpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZXZCbG9ja0VsZW1lbnQgPSAkZ2V0RWRpdG9yKCkuZ2V0RWxlbWVudEJ5S2V5KHByZXZCbG9jay5nZXRLZXkoKSlcbiAgICAgICAgICAgIGlmIChwcmV2QmxvY2tFbGVtZW50KSB7XG4gICAgICAgICAgICAgICRzZWxlY3REZWNvcmF0b3IoeyBlbGVtZW50OiBwcmV2QmxvY2tFbGVtZW50LCBub2RlOiBwcmV2QmxvY2sgfSlcbiAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBDT01NQU5EX1BSSU9SSVRZX0xPVyxcbiAgICAgICksXG4gICAgICBlZGl0b3IucmVnaXN0ZXJDb21tYW5kKFxuICAgICAgICBLRVlfQVJST1dfRE9XTl9DT01NQU5ELFxuICAgICAgICAoZXZlbnQpID0+IHtcbiAgICAgICAgICAvLyBDQVNFIDE6IE5vZGUgc2VsZWN0aW9uXG4gICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gJGdldFNlbGVjdGlvbigpXG4gICAgICAgICAgaWYgKCRpc05vZGVTZWxlY3Rpb24oc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgY29uc3QgbmV4dFNpYmxpbmcgPSBzZWxlY3Rpb24uZ2V0Tm9kZXMoKVswXT8uZ2V0TmV4dFNpYmxpbmcoKVxuICAgICAgICAgICAgaWYgKCRpc0RlY29yYXRvck5vZGUobmV4dFNpYmxpbmcpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSAkZ2V0RWRpdG9yKCkuZ2V0RWxlbWVudEJ5S2V5KG5leHRTaWJsaW5nLmdldEtleSgpKVxuICAgICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICRzZWxlY3REZWNvcmF0b3IoeyBlbGVtZW50LCBub2RlOiBuZXh0U2libGluZyB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISRpc0VsZW1lbnROb2RlKG5leHRTaWJsaW5nKSkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZmlyc3REZXNjZW5kYW50ID0gbmV4dFNpYmxpbmcuZ2V0Rmlyc3REZXNjZW5kYW50KCkgPz8gbmV4dFNpYmxpbmdcbiAgICAgICAgICAgIGlmICghZmlyc3REZXNjZW5kYW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBibG9jayA9ICRmaW5kTWF0Y2hpbmdQYXJlbnQoZmlyc3REZXNjZW5kYW50LCBJTlRFUk5BTF8kaXNCbG9jaylcbiAgICAgICAgICAgIGJsb2NrPy5zZWxlY3RFbmQoKVxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEkaXNSYW5nZVNlbGVjdGlvbihzZWxlY3Rpb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDQVNFIDI6IFJhbmdlIHNlbGVjdGlvblxuICAgICAgICAgIC8vIEdldCBsYXN0IHNlbGVjdGVkIGJsb2NrXG4gICAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gc2VsZWN0aW9uLmlzQmFja3dhcmQoKSA/IHNlbGVjdGlvbi5hbmNob3IgOiBzZWxlY3Rpb24uZm9jdXNcbiAgICAgICAgICBjb25zdCBsYXN0Tm9kZSA9IGxhc3RQb2ludC5nZXROb2RlKClcbiAgICAgICAgICBjb25zdCBsYXN0U2VsZWN0ZWRCbG9jayA9ICRmaW5kTWF0Y2hpbmdQYXJlbnQobGFzdE5vZGUsIChub2RlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZmluZExhdGVyU2libGluZ0Jsb2NrKG5vZGUpICE9PSBudWxsXG4gICAgICAgICAgfSlcbiAgICAgICAgICBjb25zdCBuZXh0QmxvY2sgPSBsYXN0U2VsZWN0ZWRCbG9jaz8uZ2V0TmV4dFNpYmxpbmcoKVxuICAgICAgICAgIGlmICghbGFzdFNlbGVjdGVkQmxvY2sgfHwgbmV4dEJsb2NrICE9PSBmaW5kTGF0ZXJTaWJsaW5nQmxvY2sobGFzdFNlbGVjdGVkQmxvY2spKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoJGlzRGVjb3JhdG9yTm9kZShuZXh0QmxvY2spKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0QmxvY2tFbGVtZW50ID0gJGdldEVkaXRvcigpLmdldEVsZW1lbnRCeUtleShuZXh0QmxvY2suZ2V0S2V5KCkpXG4gICAgICAgICAgICBpZiAobmV4dEJsb2NrRWxlbWVudCkge1xuICAgICAgICAgICAgICAkc2VsZWN0RGVjb3JhdG9yKHsgZWxlbWVudDogbmV4dEJsb2NrRWxlbWVudCwgbm9kZTogbmV4dEJsb2NrIH0pXG4gICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgQ09NTUFORF9QUklPUklUWV9MT1csXG4gICAgICApLFxuICAgIClcbiAgfSwgW2VkaXRvcl0pXG5cbiAgcmV0dXJuIG51bGxcbn1cblxuZnVuY3Rpb24gJGdldERlY29yYXRvckJ5TW91c2VFdmVudChcbiAgZXZlbnQ6IE1vdXNlRXZlbnQsXG4pOiB7IGVsZW1lbnQ6IEhUTUxFbGVtZW50OyBub2RlOiBEZWNvcmF0b3JOb2RlPHVua25vd24+IH0gfCB1bmRlZmluZWQge1xuICBpZiAoIShldmVudC50YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgY29uc3QgZWxlbWVudCA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCdbZGF0YS1sZXhpY2FsLWRlY29yYXRvcj1cInRydWVcIl0nKVxuICBpZiAoIShlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIGNvbnN0IG5vZGUgPSAkZ2V0TmVhcmVzdE5vZGVGcm9tRE9NTm9kZShlbGVtZW50KVxuICByZXR1cm4gJGlzRGVjb3JhdG9yTm9kZShub2RlKSA/IHsgZWxlbWVudCwgbm9kZSB9IDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uICRnZXRTZWxlY3RlZERlY29yYXRvcigpIHtcbiAgY29uc3Qgc2VsZWN0aW9uID0gJGdldFNlbGVjdGlvbigpXG4gIGlmICghJGlzTm9kZVNlbGVjdGlvbihzZWxlY3Rpb24pKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIGNvbnN0IG5vZGVzID0gc2VsZWN0aW9uLmdldE5vZGVzKClcbiAgaWYgKG5vZGVzLmxlbmd0aCAhPT0gMSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuICBjb25zdCBub2RlID0gbm9kZXNbMF1cbiAgcmV0dXJuICRpc0RlY29yYXRvck5vZGUobm9kZSlcbiAgICA/IHtcbiAgICAgICAgZGVjb3JhdG9yOiBub2RlLFxuICAgICAgICBlbGVtZW50OiAkZ2V0RWRpdG9yKCkuZ2V0RWxlbWVudEJ5S2V5KG5vZGUuZ2V0S2V5KCkpLFxuICAgICAgfVxuICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uICRzZWxlY3REZWNvcmF0b3Ioe1xuICBlbGVtZW50LFxuICBub2RlLFxufToge1xuICBlbGVtZW50OiBIVE1MRWxlbWVudFxuICBub2RlOiBEZWNvcmF0b3JOb2RlPHVua25vd24+XG59KSB7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZWNvcmF0b3Itc2VsZWN0ZWQnKT8uY2xhc3NMaXN0LnJlbW92ZSgnZGVjb3JhdG9yLXNlbGVjdGVkJylcbiAgY29uc3Qgc2VsZWN0aW9uID0gJGNyZWF0ZU5vZGVTZWxlY3Rpb24oKVxuICBzZWxlY3Rpb24uYWRkKG5vZGUuZ2V0S2V5KCkpXG4gICRzZXRTZWxlY3Rpb24oc2VsZWN0aW9uKVxuICBlbGVtZW50LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnLCBibG9jazogJ25lYXJlc3QnIH0pXG4gIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZGVjb3JhdG9yLXNlbGVjdGVkJylcbn1cblxuLyoqXG4gKiBDb3BpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svbGV4aWNhbC9ibG9iL21haW4vcGFja2FnZXMvbGV4aWNhbC9zcmMvTGV4aWNhbFV0aWxzLnRzXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRydWUgZm9yIGEgRGVjb3JhdG9yTm9kZSB0aGF0IGlzIG5vdCBpbmxpbmUgT1JcbiAqIGFuIEVsZW1lbnROb2RlIHRoYXQgaXM6XG4gKiAtIG5vdCBhIHJvb3Qgb3Igc2hhZG93IHJvb3RcbiAqIC0gbm90IGlubGluZVxuICogLSBjYW4ndCBiZSBlbXB0eVxuICogLSBoYXMgbm8gY2hpbGRyZW4gb3IgYW4gaW5saW5lIGZpcnN0IGNoaWxkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBJTlRFUk5BTF8kaXNCbG9jayhub2RlOiBMZXhpY2FsTm9kZSk6IG5vZGUgaXMgRGVjb3JhdG9yTm9kZTx1bmtub3duPiB8IEVsZW1lbnROb2RlIHtcbiAgaWYgKCRpc0RlY29yYXRvck5vZGUobm9kZSkgJiYgIW5vZGUuaXNJbmxpbmUoKSkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKCEkaXNFbGVtZW50Tm9kZShub2RlKSB8fCAkaXNSb290T3JTaGFkb3dSb290KG5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBjb25zdCBmaXJzdENoaWxkID0gbm9kZS5nZXRGaXJzdENoaWxkKClcbiAgY29uc3QgaXNMZWFmRWxlbWVudCA9XG4gICAgZmlyc3RDaGlsZCA9PT0gbnVsbCB8fFxuICAgICRpc0xpbmVCcmVha05vZGUoZmlyc3RDaGlsZCkgfHxcbiAgICAkaXNUZXh0Tm9kZShmaXJzdENoaWxkKSB8fFxuICAgIGZpcnN0Q2hpbGQuaXNJbmxpbmUoKVxuXG4gIHJldHVybiAhbm9kZS5pc0lubGluZSgpICYmIG5vZGUuY2FuQmVFbXB0eSgpICE9PSBmYWxzZSAmJiBpc0xlYWZFbGVtZW50XG59XG5cbmZ1bmN0aW9uIGZpbmRMYXRlclNpYmxpbmdCbG9jayhub2RlOiBMZXhpY2FsTm9kZSk6IExleGljYWxOb2RlIHwgbnVsbCB7XG4gIGxldCBjdXJyZW50ID0gbm9kZS5nZXROZXh0U2libGluZygpXG4gIHdoaWxlIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgaWYgKElOVEVSTkFMXyRpc0Jsb2NrKGN1cnJlbnQpKSB7XG4gICAgICByZXR1cm4gY3VycmVudFxuICAgIH1cbiAgICBjdXJyZW50ID0gY3VycmVudC5nZXROZXh0U2libGluZygpXG4gIH1cbiAgcmV0dXJuIG51bGxcbn1cblxuZnVuY3Rpb24gZmluZEZpcnN0U2libGluZ0Jsb2NrKG5vZGU6IExleGljYWxOb2RlKTogTGV4aWNhbE5vZGUgfCBudWxsIHtcbiAgbGV0IGN1cnJlbnQgPSBub2RlLmdldFByZXZpb3VzU2libGluZygpXG4gIHdoaWxlIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgaWYgKElOVEVSTkFMXyRpc0Jsb2NrKGN1cnJlbnQpKSB7XG4gICAgICByZXR1cm4gY3VycmVudFxuICAgIH1cbiAgICBjdXJyZW50ID0gY3VycmVudC5nZXRQcmV2aW91c1NpYmxpbmcoKVxuICB9XG4gIHJldHVybiBudWxsXG59XG4iLCIndXNlIGNsaWVudCdcbmltcG9ydCB0eXBlIHsgTGV4aWNhbEVkaXRvciwgTGV4aWNhbE5vZGUsIFBhcmFncmFwaE5vZGUgfSBmcm9tICdsZXhpY2FsJ1xuXG5pbXBvcnQgeyB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0IH0gZnJvbSAnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dC5qcydcbmltcG9ydCB7ICRjcmVhdGVQYXJhZ3JhcGhOb2RlLCBpc0hUTUxFbGVtZW50IH0gZnJvbSAnbGV4aWNhbCdcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSAncmVhY3QtZG9tJ1xuXG5pbXBvcnQgeyB1c2VFZGl0b3JDb25maWdDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnL2NsaWVudC9FZGl0b3JDb25maWdQcm92aWRlci5qcydcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvcG9pbnQuanMnXG5pbXBvcnQgeyBFTkFCTEVfU0xBU0hfTUVOVV9DT01NQU5EIH0gZnJvbSAnLi4vLi4vU2xhc2hNZW51L0xleGljYWxUeXBlYWhlYWRNZW51UGx1Z2luL2luZGV4LmpzJ1xuaW1wb3J0IHsgY2FsY3VsYXRlRGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtIH0gZnJvbSAnLi4vdXRpbHMvY2FsY3VsYXRlRGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtLmpzJ1xuaW1wb3J0IHsgZ2V0Tm9kZUNsb3NlVG9Qb2ludCB9IGZyb20gJy4uL3V0aWxzL2dldE5vZGVDbG9zZVRvUG9pbnQuanMnXG5pbXBvcnQgeyBnZXRUb3BMZXZlbE5vZGVLZXlzIH0gZnJvbSAnLi4vdXRpbHMvZ2V0VG9wTGV2ZWxOb2RlS2V5cy5qcydcbmltcG9ydCB7IGlzT25IYW5kbGVFbGVtZW50IH0gZnJvbSAnLi4vdXRpbHMvaXNPbkhhbmRsZUVsZW1lbnQuanMnXG5pbXBvcnQgeyBzZXRIYW5kbGVQb3NpdGlvbiB9IGZyb20gJy4uL3V0aWxzL3NldEhhbmRsZVBvc2l0aW9uLmpzJ1xuaW1wb3J0ICcuL2luZGV4LnNjc3MnXG5cbmNvbnN0IEFERF9CTE9DS19NRU5VX0NMQVNTTkFNRSA9ICdhZGQtYmxvY2stbWVudSdcblxubGV0IHByZXZJbmRleCA9IEluZmluaXR5XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRJbmRleChrZXlzTGVuZ3RoOiBudW1iZXIpOiBudW1iZXIge1xuICBpZiAoa2V5c0xlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBJbmZpbml0eVxuICB9XG4gIGlmIChwcmV2SW5kZXggPj0gMCAmJiBwcmV2SW5kZXggPCBrZXlzTGVuZ3RoKSB7XG4gICAgcmV0dXJuIHByZXZJbmRleFxuICB9XG5cbiAgcmV0dXJuIE1hdGguZmxvb3Ioa2V5c0xlbmd0aCAvIDIpXG59XG5cbmZ1bmN0aW9uIHVzZUFkZEJsb2NrSGFuZGxlKFxuICBlZGl0b3I6IExleGljYWxFZGl0b3IsXG4gIGFuY2hvckVsZW06IEhUTUxFbGVtZW50LFxuICBpc0VkaXRhYmxlOiBib29sZWFuLFxuKTogUmVhY3QuUmVhY3RFbGVtZW50IHtcbiAgY29uc3Qgc2Nyb2xsZXJFbGVtID0gYW5jaG9yRWxlbS5wYXJlbnRFbGVtZW50XG5cbiAgY29uc3QgeyBlZGl0b3JDb25maWcgfSA9IHVzZUVkaXRvckNvbmZpZ0NvbnRleHQoKVxuICBjb25zdCBibG9ja0hhbmRsZUhvcml6b250YWxPZmZzZXQgPSBlZGl0b3JDb25maWc/LmFkbWluPy5oaWRlR3V0dGVyID8gLTI0IDogMTJcblxuICBjb25zdCBtZW51UmVmID0gdXNlUmVmPEhUTUxCdXR0b25FbGVtZW50PihudWxsKVxuICBjb25zdCBbaG92ZXJlZEVsZW1lbnQsIHNldEhvdmVyZWRFbGVtZW50XSA9IHVzZVN0YXRlPHtcbiAgICBlbGVtOiBIVE1MRWxlbWVudFxuICAgIG5vZGU6IExleGljYWxOb2RlXG4gIH0gfCBudWxsPihudWxsKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZnVuY3Rpb24gb25Eb2N1bWVudE1vdXNlTW92ZShldmVudDogTW91c2VFdmVudCkge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0XG4gICAgICBpZiAoIWlzSFRNTEVsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgZGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtID0gY2FsY3VsYXRlRGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtKFxuICAgICAgICBzY3JvbGxlckVsZW0sXG4gICAgICAgIGV2ZW50LnBhZ2VYLFxuICAgICAgICBldmVudC5wYWdlWSxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgKVxuXG4gICAgICBpZiAoZGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtID09PSAtMSkge1xuICAgICAgICBzZXRIb3ZlcmVkRWxlbWVudChudWxsKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKGlzT25IYW5kbGVFbGVtZW50KHRhcmdldCwgQUREX0JMT0NLX01FTlVfQ0xBU1NOQU1FKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNvbnN0IHRvcExldmVsTm9kZUtleXMgPSBnZXRUb3BMZXZlbE5vZGVLZXlzKGVkaXRvcilcblxuICAgICAgY29uc3Qge1xuICAgICAgICBibG9ja0VsZW06IF9lbXB0eUJsb2NrRWxlbSxcbiAgICAgICAgYmxvY2tOb2RlLFxuICAgICAgICBmb3VuZEF0SW5kZXgsXG4gICAgICB9ID0gZ2V0Tm9kZUNsb3NlVG9Qb2ludCh7XG4gICAgICAgIGFuY2hvckVsZW0sXG4gICAgICAgIGNhY2hlX3RocmVzaG9sZDogMCxcbiAgICAgICAgZWRpdG9yLFxuICAgICAgICBob3Jpem9udGFsT2Zmc2V0OiAtZGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtLFxuICAgICAgICBwb2ludDogbmV3IFBvaW50KGV2ZW50LngsIGV2ZW50LnkpLFxuICAgICAgICByZXR1cm5FbXB0eVBhcmFncmFwaHM6IHRydWUsXG4gICAgICAgIHN0YXJ0SW5kZXg6IGdldEN1cnJlbnRJbmRleCh0b3BMZXZlbE5vZGVLZXlzLmxlbmd0aCksXG4gICAgICAgIHVzZUVkZ2VBc0RlZmF1bHQ6IGZhbHNlLFxuICAgICAgfSlcblxuICAgICAgcHJldkluZGV4ID0gZm91bmRBdEluZGV4XG5cbiAgICAgIGlmICghX2VtcHR5QmxvY2tFbGVtKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICBibG9ja05vZGUgJiZcbiAgICAgICAgKGhvdmVyZWRFbGVtZW50Py5ub2RlICE9PSBibG9ja05vZGUgfHwgaG92ZXJlZEVsZW1lbnQ/LmVsZW0gIT09IF9lbXB0eUJsb2NrRWxlbSlcbiAgICAgICkge1xuICAgICAgICBzZXRIb3ZlcmVkRWxlbWVudCh7XG4gICAgICAgICAgZWxlbTogX2VtcHR5QmxvY2tFbGVtLFxuICAgICAgICAgIG5vZGU6IGJsb2NrTm9kZSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTaW5jZSB0aGUgZHJhZ2dhYmxlQmxvY2tFbGVtIGlzIG91dHNpZGUgdGhlIGFjdHVhbCBlZGl0b3IsIHdlIG5lZWQgdG8gbGlzdGVuIHRvIHRoZSBkb2N1bWVudFxuICAgIC8vIHRvIGJlIGFibGUgdG8gZGV0ZWN0IHdoZW4gdGhlIG1vdXNlIGlzIG91dHNpZGUgdGhlIGVkaXRvciBhbmQgcmVzcGVjdCBhIGJ1ZmZlciBhcm91bmRcbiAgICAvLyB0aGUgc2Nyb2xsZXJFbGVtIHRvIGF2b2lkIHRoZSBkcmFnZ2FibGVCbG9ja0VsZW0gZGlzYXBwZWFyaW5nIHRvbyBlYXJseS5cbiAgICBkb2N1bWVudD8uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Eb2N1bWVudE1vdXNlTW92ZSlcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkb2N1bWVudD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Eb2N1bWVudE1vdXNlTW92ZSlcbiAgICB9XG4gIH0sIFtzY3JvbGxlckVsZW0sIGFuY2hvckVsZW0sIGVkaXRvciwgaG92ZXJlZEVsZW1lbnRdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG1lbnVSZWYuY3VycmVudCAmJiBob3ZlcmVkRWxlbWVudD8ubm9kZSkge1xuICAgICAgc2V0SGFuZGxlUG9zaXRpb24oXG4gICAgICAgIGhvdmVyZWRFbGVtZW50Py5lbGVtLFxuICAgICAgICBtZW51UmVmLmN1cnJlbnQsXG4gICAgICAgIGFuY2hvckVsZW0sXG4gICAgICAgIGJsb2NrSGFuZGxlSG9yaXpvbnRhbE9mZnNldCxcbiAgICAgIClcbiAgICB9XG4gIH0sIFthbmNob3JFbGVtLCBob3ZlcmVkRWxlbWVudCwgYmxvY2tIYW5kbGVIb3Jpem9udGFsT2Zmc2V0XSlcblxuICBjb25zdCBoYW5kbGVBZGRDbGljayA9IHVzZUNhbGxiYWNrKFxuICAgIChldmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudCwgTW91c2VFdmVudD4pID0+IHtcbiAgICAgIGxldCBob3ZlcmVkRWxlbWVudFRvVXNlID0gaG92ZXJlZEVsZW1lbnRcbiAgICAgIGlmICghaG92ZXJlZEVsZW1lbnRUb1VzZT8ubm9kZSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gMS4gVXBkYXRlIGhvdmVyZWRFbGVtZW50Lm5vZGUgdG8gYSBuZXcgcGFyYWdyYXBoIG5vZGUgaWYgdGhlIGhvdmVyZWRFbGVtZW50Lm5vZGUgaXMgbm90IGEgcGFyYWdyYXBoIG5vZGVcbiAgICAgIGVkaXRvci51cGRhdGUoKCkgPT4ge1xuICAgICAgICAvLyBDaGVjayBpZiBibG9ja05vZGUgaXMgYW4gZW1wdHkgdGV4dCBub2RlXG4gICAgICAgIGxldCBpc0VtcHR5UGFyYWdyYXBoID0gdHJ1ZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgaG92ZXJlZEVsZW1lbnRUb1VzZT8ubm9kZS5nZXRUeXBlKCkgIT09ICdwYXJhZ3JhcGgnIHx8XG4gICAgICAgICAgaG92ZXJlZEVsZW1lbnRUb1VzZS5ub2RlLmdldFRleHRDb250ZW50KCkgIT09ICcnXG4gICAgICAgICkge1xuICAgICAgICAgIGlzRW1wdHlQYXJhZ3JhcGggPSBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0VtcHR5UGFyYWdyYXBoKSB7XG4gICAgICAgICAgY29uc3QgbmV3UGFyYWdyYXBoID0gJGNyZWF0ZVBhcmFncmFwaE5vZGUoKVxuICAgICAgICAgIGhvdmVyZWRFbGVtZW50VG9Vc2U/Lm5vZGUuaW5zZXJ0QWZ0ZXIobmV3UGFyYWdyYXBoKVxuXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBob3ZlcmVkRWxlbWVudFRvVXNlID0ge1xuICAgICAgICAgICAgICBlbGVtOiBlZGl0b3IuZ2V0RWxlbWVudEJ5S2V5KG5ld1BhcmFncmFwaC5nZXRLZXkoKSkhLFxuICAgICAgICAgICAgICBub2RlOiBuZXdQYXJhZ3JhcGgsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRIb3ZlcmVkRWxlbWVudChob3ZlcmVkRWxlbWVudFRvVXNlKVxuICAgICAgICAgIH0sIDApXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIC8vIDIuIEZvY3VzIG9uIHRoZSBuZXcgcGFyYWdyYXBoIG5vZGVcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBlZGl0b3IudXBkYXRlKCgpID0+IHtcbiAgICAgICAgICBlZGl0b3IuZm9jdXMoKVxuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgaG92ZXJlZEVsZW1lbnRUb1VzZT8ubm9kZSAmJlxuICAgICAgICAgICAgJ3NlbGVjdCcgaW4gaG92ZXJlZEVsZW1lbnRUb1VzZS5ub2RlICYmXG4gICAgICAgICAgICB0eXBlb2YgaG92ZXJlZEVsZW1lbnRUb1VzZS5ub2RlLnNlbGVjdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgaG92ZXJlZEVsZW1lbnRUb1VzZS5ub2RlLnNlbGVjdCgpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSwgMSlcblxuICAgICAgLy8gTWFrZSBzdXJlIHRoaXMgaXMgY2FsbGVkIEFGVEVSIHRoZSBmb2N1c2luZyBoYXMgYmVlbiBwcm9jZXNzZWQgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIE90aGVyd2lzZSwgdGhpcyB3b24ndCB3b3JrXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZWRpdG9yLmRpc3BhdGNoQ29tbWFuZChFTkFCTEVfU0xBU0hfTUVOVV9DT01NQU5ELCB7XG4gICAgICAgICAgbm9kZTogaG92ZXJlZEVsZW1lbnRUb1VzZT8ubm9kZSBhcyBQYXJhZ3JhcGhOb2RlLFxuICAgICAgICB9KVxuICAgICAgfSwgMilcblxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICB9LFxuICAgIFtlZGl0b3IsIGhvdmVyZWRFbGVtZW50XSxcbiAgKVxuXG4gIHJldHVybiBjcmVhdGVQb3J0YWwoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPGJ1dHRvblxuICAgICAgICBhcmlhLWxhYmVsPVwiQWRkIGJsb2NrXCJcbiAgICAgICAgY2xhc3NOYW1lPVwiaWNvbiBhZGQtYmxvY2stbWVudVwiXG4gICAgICAgIG9uQ2xpY2s9eyhldmVudCkgPT4ge1xuICAgICAgICAgIGhhbmRsZUFkZENsaWNrKGV2ZW50KVxuICAgICAgICB9fVxuICAgICAgICByZWY9e21lbnVSZWZ9XG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17aXNFZGl0YWJsZSA/ICdpY29uJyA6ICcnfSAvPlxuICAgICAgPC9idXR0b24+XG4gICAgPC9SZWFjdC5GcmFnbWVudD4sXG4gICAgYW5jaG9yRWxlbSxcbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gQWRkQmxvY2tIYW5kbGVQbHVnaW4oe1xuICBhbmNob3JFbGVtID0gZG9jdW1lbnQuYm9keSxcbn06IHtcbiAgYW5jaG9yRWxlbT86IEhUTUxFbGVtZW50XG59KTogUmVhY3QuUmVhY3RFbGVtZW50IHtcbiAgY29uc3QgW2VkaXRvcl0gPSB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KClcbiAgcmV0dXJuIHVzZUFkZEJsb2NrSGFuZGxlKGVkaXRvciwgYW5jaG9yRWxlbSwgZWRpdG9yLl9lZGl0YWJsZSlcbn1cbiIsIid1c2UgY2xpZW50J1xuLyoqXG4gKiBDYWxjdWxhdGUgZGlzdGFuY2UgYmV0d2VlbiBzY3JvbGxlckVsZW0gYW5kIHRhcmdldCBpZiB0YXJnZXQgaXMgbm90IGluIHNjcm9sbGVyRWxlbVxuICovXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlRGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtID0gKFxuICBzY3JvbGxlckVsZW06IEhUTUxFbGVtZW50IHwgbnVsbCxcbiAgcGFnZVg6IG51bWJlcixcbiAgcGFnZVk6IG51bWJlcixcbiAgdGFyZ2V0OiBIVE1MRWxlbWVudCxcbiAgaG9yaXpvbnRhbEJ1ZmZlcjogbnVtYmVyID0gNTAsXG4gIHZlcnRpY2FsQnVmZmVyOiBudW1iZXIgPSAyNSxcbik6IG51bWJlciA9PiB7XG4gIGxldCBkaXN0YW5jZUZyb21TY3JvbGxlckVsZW0gPSAwXG4gIGlmIChzY3JvbGxlckVsZW0gJiYgIXNjcm9sbGVyRWxlbS5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgY29uc3QgeyBib3R0b20sIGxlZnQsIHJpZ2h0LCB0b3AgfSA9IHNjcm9sbGVyRWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gICAgY29uc3QgYWRqdXN0ZWRUb3AgPSB0b3AgKyB3aW5kb3cuc2Nyb2xsWVxuICAgIGNvbnN0IGFkanVzdGVkQm90dG9tID0gYm90dG9tICsgd2luZG93LnNjcm9sbFlcblxuICAgIGlmIChcbiAgICAgIHBhZ2VZIDwgYWRqdXN0ZWRUb3AgLSB2ZXJ0aWNhbEJ1ZmZlciB8fFxuICAgICAgcGFnZVkgPiBhZGp1c3RlZEJvdHRvbSArIHZlcnRpY2FsQnVmZmVyIHx8XG4gICAgICBwYWdlWCA8IGxlZnQgLSBob3Jpem9udGFsQnVmZmVyIHx8XG4gICAgICBwYWdlWCA+IHJpZ2h0ICsgaG9yaXpvbnRhbEJ1ZmZlclxuICAgICkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyB1c2VkIHRvIGFsbG93IHRoZSBfZHJhZ2dhYmxlQmxvY2tFbGVtIHRvIGJlIGZvdW5kIHdoZW4gdGhlIG1vdXNlIGlzIGluIHRoZVxuICAgIC8vIGJ1ZmZlciB6b25lIGFyb3VuZCB0aGUgc2Nyb2xsZXJFbGVtLlxuICAgIGlmIChwYWdlWCA8IGxlZnQgfHwgcGFnZVggPiByaWdodCkge1xuICAgICAgZGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtID0gcGFnZVggPCBsZWZ0ID8gcGFnZVggLSBsZWZ0IDogcGFnZVggLSByaWdodFxuICAgIH1cbiAgfVxuICByZXR1cm4gZGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtXG59XG4iLCIndXNlIGNsaWVudCdcbmltcG9ydCB0eXBlIHsgTGV4aWNhbEVkaXRvciwgTGV4aWNhbE5vZGUgfSBmcm9tICdsZXhpY2FsJ1xuXG5pbXBvcnQgeyAkZ2V0Tm9kZUJ5S2V5IH0gZnJvbSAnbGV4aWNhbCdcblxuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLi8uLi8uLi91dGlscy9wb2ludC5qcydcbmltcG9ydCB7IFJlY3QgfSBmcm9tICcuLi8uLi8uLi91dGlscy9yZWN0LmpzJ1xuaW1wb3J0IHsgZ2V0Qm91bmRpbmdDbGllbnRSZWN0V2l0aG91dFRyYW5zZm9ybSB9IGZyb20gJy4uL0RyYWdnYWJsZUJsb2NrUGx1Z2luL2dldEJvdW5kaW5nUmVjdFdpdGhvdXRUcmFuc2Zvcm0uanMnXG5pbXBvcnQgeyBnZXRDb2xsYXBzZWRNYXJnaW5zIH0gZnJvbSAnLi4vdXRpbHMvZ2V0Q29sbGFwc2VkTWFyZ2lucy5qcydcbmltcG9ydCB7IGdldFRvcExldmVsTm9kZUtleXMgfSBmcm9tICcuLi91dGlscy9nZXRUb3BMZXZlbE5vZGVLZXlzLmpzJ1xuXG4vLyBEaXJlY3Rpb25zXG5jb25zdCBEb3dud2FyZCA9IDFcbmNvbnN0IFVwd2FyZCA9IC0xXG5jb25zdCBJbmRldGVybWluYXRlID0gMFxuXG50eXBlIFByb3BzID0ge1xuICBhbmNob3JFbGVtOiBIVE1MRWxlbWVudFxuICBjYWNoZV90aHJlc2hvbGQ/OiBudW1iZXJcbiAgZWRpdG9yOiBMZXhpY2FsRWRpdG9yXG4gIC8qKiBmdXp6eSBtYWtlcyB0aGUgc2VhcmNoIG5vdCBleGFjdC4gSWYgbm8gZXhhY3QgbWF0Y2ggZm91bmQsIGZpbmQgdGhlIGNsb3NlcyBub2RlIGluc3RlYWQgb2YgcmV0dXJuaW5nIG51bGwgKi9cbiAgZnV6enk/OiBib29sZWFuXG4gIGhvcml6b250YWxPZmZzZXQ/OiBudW1iZXJcbiAgcG9pbnQ6IFBvaW50XG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0LCBlbXB0eSBwYXJhZ3JhcGhzIGFyZSBub3QgcmV0dXJuZWQuIFNldCB0aGlzIHRvIHRydWUgdG8gcmV0dXJuIGVtcHR5IHBhcmFncmFwaHMuIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZXR1cm5FbXB0eVBhcmFncmFwaHM/OiBib29sZWFuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggdG8gc3RhcnQgc2VhcmNoaW5nIGZyb20uIEl0IGNhbiBiZSBhIGNvbnNpZGVyYWJsZSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gdG8gc3RhcnQgc2VhcmNoaW5nIGZyb20gdGhlIGluZGV4IG9mIHRoZVxuICAgKiBwcmV2aW91c2x5IGZvdW5kIG5vZGUsIGFzIHRoZSBub2RlIGlzIGxpa2VseSB0byBiZSBjbG9zZSB0byB0aGUgbmV4dCBub2RlLlxuICAgKi9cbiAgc3RhcnRJbmRleD86IG51bWJlclxuICB1c2VFZGdlQXNEZWZhdWx0PzogYm9vbGVhblxuICB2ZXJib3NlPzogYm9vbGVhblxufVxuXG50eXBlIE91dHB1dCA9IHtcbiAgYmxvY2tFbGVtOiBIVE1MRWxlbWVudCB8IG51bGxcbiAgYmxvY2tOb2RlOiBMZXhpY2FsTm9kZSB8IG51bGxcbiAgZm91bmRBdEluZGV4OiBudW1iZXJcbiAgaXNGb3VuZE5vZGVFbXB0eVBhcmFncmFwaDogYm9vbGVhblxufVxuXG5jb25zdCBjYWNoZSA9IHtcbiAgcHJvcHM6IG51bGwgYXMgbnVsbCB8IFByb3BzLFxuICByZXN1bHQ6IG51bGwgYXMgbnVsbCB8IE91dHB1dCxcbn1cblxuZnVuY3Rpb24gaXNQb2ludENsb3NlKHByZXZpb3VzOiBQb2ludCwgY3VycmVudDogUG9pbnQsIHRocmVzaG9sZDogbnVtYmVyID0gMjApOiBib29sZWFuIHtcbiAgY29uc3QgZHggPSBwcmV2aW91cy54IC0gY3VycmVudC54XG4gIGNvbnN0IGR5ID0gcHJldmlvdXMueSAtIGN1cnJlbnQueVxuICByZXR1cm4gZHggKiBkeCArIGR5ICogZHkgPD0gdGhyZXNob2xkICogdGhyZXNob2xkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROb2RlQ2xvc2VUb1BvaW50KHByb3BzOiBQcm9wcyk6IE91dHB1dCB7XG4gIGNvbnN0IHtcbiAgICBhbmNob3JFbGVtLFxuICAgIGNhY2hlX3RocmVzaG9sZCA9IDIwLFxuICAgIGVkaXRvcixcbiAgICBmdXp6eSA9IGZhbHNlLFxuICAgIGhvcml6b250YWxPZmZzZXQgPSAwLFxuICAgIHBvaW50OiB7IHgsIHkgfSxcbiAgICBzdGFydEluZGV4ID0gMCxcbiAgICB1c2VFZGdlQXNEZWZhdWx0ID0gZmFsc2UsXG4gIH0gPSBwcm9wc1xuXG4gIC8vIFVzZSBjYWNoZVxuICBpZiAoXG4gICAgY2FjaGVfdGhyZXNob2xkID4gMCAmJlxuICAgIGNhY2hlLnByb3BzICYmXG4gICAgY2FjaGUucmVzdWx0ICYmXG4gICAgY2FjaGUucHJvcHMuZnV6enkgPT09IHByb3BzLmZ1enp5ICYmXG4gICAgY2FjaGUucHJvcHMuaG9yaXpvbnRhbE9mZnNldCA9PT0gcHJvcHMuaG9yaXpvbnRhbE9mZnNldCAmJlxuICAgIGNhY2hlLnByb3BzLnVzZUVkZ2VBc0RlZmF1bHQgPT09IHByb3BzLnVzZUVkZ2VBc0RlZmF1bHQgJiZcbiAgICBpc1BvaW50Q2xvc2UoY2FjaGUucHJvcHMucG9pbnQsIHByb3BzLnBvaW50LCBjYWNoZV90aHJlc2hvbGQpXG4gICkge1xuICAgIHJldHVybiBjYWNoZS5yZXN1bHRcbiAgfVxuXG4gIGNvbnN0IGFuY2hvckVsZW1lbnRSZWN0ID0gYW5jaG9yRWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICBjb25zdCB0b3BMZXZlbE5vZGVLZXlzID0gZ2V0VG9wTGV2ZWxOb2RlS2V5cyhlZGl0b3IpXG5cbiAgY29uc3QgY2xvc2VzdEJsb2NrRWxlbToge1xuICAgIGJsb2NrRWxlbTogSFRNTEVsZW1lbnQgfCBudWxsXG4gICAgYmxvY2tOb2RlOiBMZXhpY2FsTm9kZSB8IG51bGxcbiAgICBkaXN0YW5jZTogbnVtYmVyXG4gICAgZm91bmRBdEluZGV4OiBudW1iZXJcbiAgICBpc0ZvdW5kTm9kZUVtcHR5UGFyYWdyYXBoOiBib29sZWFuXG4gIH0gPSB7XG4gICAgYmxvY2tFbGVtOiBudWxsLFxuICAgIGJsb2NrTm9kZTogbnVsbCxcbiAgICBkaXN0YW5jZTogSW5maW5pdHksXG4gICAgZm91bmRBdEluZGV4OiAtMSxcbiAgICBpc0ZvdW5kTm9kZUVtcHR5UGFyYWdyYXBoOiBmYWxzZSxcbiAgfVxuXG4gIC8vIFJldHVybiBudWxsIGlmIG1hdGNoaW5nIGJsb2NrIGVsZW1lbnQgaXMgdGhlIGZpcnN0IG9yIGxhc3Qgbm9kZVxuICBlZGl0b3IuZ2V0RWRpdG9yU3RhdGUoKS5yZWFkKCgpID0+IHtcbiAgICBpZiAodXNlRWRnZUFzRGVmYXVsdCkge1xuICAgICAgY29uc3QgZmlyc3ROb2RlID0gZWRpdG9yLmdldEVsZW1lbnRCeUtleSh0b3BMZXZlbE5vZGVLZXlzWzBdISlcbiAgICAgIGNvbnN0IGxhc3ROb2RlID0gZWRpdG9yLmdldEVsZW1lbnRCeUtleSh0b3BMZXZlbE5vZGVLZXlzW3RvcExldmVsTm9kZUtleXMubGVuZ3RoIC0gMV0hKVxuXG4gICAgICBpZiAoZmlyc3ROb2RlICYmIGxhc3ROb2RlKSB7XG4gICAgICAgIGNvbnN0IFtmaXJzdE5vZGVSZWN0LCBsYXN0Tm9kZVJlY3RdID0gW1xuICAgICAgICAgIGdldEJvdW5kaW5nQ2xpZW50UmVjdFdpdGhvdXRUcmFuc2Zvcm0oZmlyc3ROb2RlKSxcbiAgICAgICAgICBnZXRCb3VuZGluZ0NsaWVudFJlY3RXaXRob3V0VHJhbnNmb3JtKGxhc3ROb2RlKSxcbiAgICAgICAgXVxuXG4gICAgICAgIGlmICh5IDwgZmlyc3ROb2RlUmVjdC50b3ApIHtcbiAgICAgICAgICBjbG9zZXN0QmxvY2tFbGVtLmJsb2NrRWxlbSA9IGZpcnN0Tm9kZVxuICAgICAgICAgIGNsb3Nlc3RCbG9ja0VsZW0uZGlzdGFuY2UgPSBmaXJzdE5vZGVSZWN0LnRvcCAtIHlcbiAgICAgICAgICBjbG9zZXN0QmxvY2tFbGVtLmJsb2NrTm9kZSA9ICRnZXROb2RlQnlLZXkodG9wTGV2ZWxOb2RlS2V5c1swXSEpXG4gICAgICAgICAgY2xvc2VzdEJsb2NrRWxlbS5mb3VuZEF0SW5kZXggPSAwXG4gICAgICAgIH0gZWxzZSBpZiAoeSA+IGxhc3ROb2RlUmVjdC5ib3R0b20pIHtcbiAgICAgICAgICBjbG9zZXN0QmxvY2tFbGVtLmRpc3RhbmNlID0geSAtIGxhc3ROb2RlUmVjdC5ib3R0b21cbiAgICAgICAgICBjbG9zZXN0QmxvY2tFbGVtLmJsb2NrTm9kZSA9ICRnZXROb2RlQnlLZXkodG9wTGV2ZWxOb2RlS2V5c1t0b3BMZXZlbE5vZGVLZXlzLmxlbmd0aCAtIDFdISlcbiAgICAgICAgICBjbG9zZXN0QmxvY2tFbGVtLmJsb2NrRWxlbSA9IGxhc3ROb2RlXG4gICAgICAgICAgY2xvc2VzdEJsb2NrRWxlbS5mb3VuZEF0SW5kZXggPSB0b3BMZXZlbE5vZGVLZXlzLmxlbmd0aCAtIDFcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbG9zZXN0QmxvY2tFbGVtPy5ibG9ja0VsZW0pIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmxvY2tFbGVtOiBudWxsLFxuICAgICAgICAgICAgaXNGb3VuZE5vZGVFbXB0eVBhcmFncmFwaDogZmFsc2UsXG4gICAgICAgICAgfSBhcyBPdXRwdXRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmQgbWF0Y2hpbmcgYmxvY2sgZWxlbWVudFxuICAgIGxldCBpbmRleCA9IHN0YXJ0SW5kZXhcbiAgICBsZXQgZGlyZWN0aW9uID0gSW5kZXRlcm1pbmF0ZVxuXG4gICAgd2hpbGUgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0b3BMZXZlbE5vZGVLZXlzLmxlbmd0aCkge1xuICAgICAgY29uc3Qga2V5ID0gdG9wTGV2ZWxOb2RlS2V5c1tpbmRleF0hXG4gICAgICBjb25zdCBlbGVtID0gZWRpdG9yLmdldEVsZW1lbnRCeUtleShrZXkpXG4gICAgICBpZiAoZWxlbSA9PT0gbnVsbCkge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY29uc3QgcG9pbnQgPSBuZXcgUG9pbnQoeCArIGhvcml6b250YWxPZmZzZXQsIHkpXG4gICAgICAvL2NvbnN0IGRvbVJlY3QgPSBSZWN0LmZyb21ET00oZWxlbSlcbiAgICAgIC8vIERvIG5vdCBjb25zaWRlciB0cmFuc2Zvcm0gb2YgYmxvY2tzIHdoZW4gY2FsY3VsYXRpbmcgZGlzdGFuY2VcbiAgICAgIGNvbnN0IGRvbVJlY3QgPSBSZWN0LmZyb21ET01SZWN0KGdldEJvdW5kaW5nQ2xpZW50UmVjdFdpdGhvdXRUcmFuc2Zvcm0oZWxlbSkpXG5cbiAgICAgIGNvbnN0IHsgbWFyZ2luQm90dG9tLCBtYXJnaW5Ub3AgfSA9IGdldENvbGxhcHNlZE1hcmdpbnMoZWxlbSlcblxuICAgICAgY29uc3QgcmVjdCA9IGRvbVJlY3QuZ2VuZXJhdGVOZXdSZWN0KHtcbiAgICAgICAgYm90dG9tOiBkb21SZWN0LmJvdHRvbSArIG1hcmdpbkJvdHRvbSxcbiAgICAgICAgbGVmdDogYW5jaG9yRWxlbWVudFJlY3QubGVmdCxcbiAgICAgICAgcmlnaHQ6IGFuY2hvckVsZW1lbnRSZWN0LnJpZ2h0LFxuICAgICAgICB0b3A6IGRvbVJlY3QudG9wIC0gbWFyZ2luVG9wLFxuICAgICAgfSlcblxuICAgICAgY29uc3QgeyBkaXN0YW5jZSwgaXNPbkJvdHRvbVNpZGUsIGlzT25Ub3BTaWRlIH0gPSByZWN0LmRpc3RhbmNlRnJvbVBvaW50KHBvaW50KVxuXG4gICAgICBpZiAoZGlzdGFuY2UgPT09IDApIHtcbiAgICAgICAgY2xvc2VzdEJsb2NrRWxlbS5ibG9ja0VsZW0gPSBlbGVtXG4gICAgICAgIGNsb3Nlc3RCbG9ja0VsZW0uYmxvY2tOb2RlID0gJGdldE5vZGVCeUtleShrZXkpXG4gICAgICAgIGNsb3Nlc3RCbG9ja0VsZW0uZm91bmRBdEluZGV4ID0gaW5kZXhcbiAgICAgICAgY2xvc2VzdEJsb2NrRWxlbS5kaXN0YW5jZSA9IGRpc3RhbmNlXG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgYmxvY2tOb2RlIGlzIGFuIGVtcHR5IHRleHQgbm9kZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgY2xvc2VzdEJsb2NrRWxlbS5ibG9ja05vZGUgJiZcbiAgICAgICAgICBjbG9zZXN0QmxvY2tFbGVtLmJsb2NrTm9kZS5nZXRUeXBlKCkgPT09ICdwYXJhZ3JhcGgnICYmXG4gICAgICAgICAgY2xvc2VzdEJsb2NrRWxlbS5ibG9ja05vZGUuZ2V0VGV4dENvbnRlbnQoKSA9PT0gJydcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKCFmdXp6eSAmJiAhcHJvcHMucmV0dXJuRW1wdHlQYXJhZ3JhcGhzKSB7XG4gICAgICAgICAgICBjbG9zZXN0QmxvY2tFbGVtLmJsb2NrRWxlbSA9IG51bGxcbiAgICAgICAgICAgIGNsb3Nlc3RCbG9ja0VsZW0uYmxvY2tOb2RlID0gbnVsbFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNsb3Nlc3RCbG9ja0VsZW0uaXNGb3VuZE5vZGVFbXB0eVBhcmFncmFwaCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgfSBlbHNlIGlmIChmdXp6eSkge1xuICAgICAgICBpZiAoZGlzdGFuY2UgPCBjbG9zZXN0QmxvY2tFbGVtLmRpc3RhbmNlKSB7XG4gICAgICAgICAgY2xvc2VzdEJsb2NrRWxlbS5ibG9ja0VsZW0gPSBlbGVtXG4gICAgICAgICAgY2xvc2VzdEJsb2NrRWxlbS5ibG9ja05vZGUgPSAkZ2V0Tm9kZUJ5S2V5KGtleSlcbiAgICAgICAgICBjbG9zZXN0QmxvY2tFbGVtLmRpc3RhbmNlID0gZGlzdGFuY2VcbiAgICAgICAgICBjbG9zZXN0QmxvY2tFbGVtLmZvdW5kQXRJbmRleCA9IGluZGV4XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gSW5kZXRlcm1pbmF0ZSkge1xuICAgICAgICBpZiAoaXNPblRvcFNpZGUpIHtcbiAgICAgICAgICBkaXJlY3Rpb24gPSBVcHdhcmRcbiAgICAgICAgfSBlbHNlIGlmIChpc09uQm90dG9tU2lkZSkge1xuICAgICAgICAgIGRpcmVjdGlvbiA9IERvd253YXJkXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gc3RvcCBzZWFyY2ggYmxvY2sgZWxlbWVudFxuICAgICAgICAgIGRpcmVjdGlvbiA9IEluZmluaXR5XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaW5kZXggKz0gZGlyZWN0aW9uXG4gICAgfVxuICB9KVxuXG4gIC8vIFN0b3JlIGluIGNhY2hlIGJlZm9yZSByZXR1cm5pbmdcbiAgY2FjaGUucHJvcHMgPSBwcm9wc1xuICBjYWNoZS5yZXN1bHQgPSB7XG4gICAgYmxvY2tFbGVtOiBjbG9zZXN0QmxvY2tFbGVtLmJsb2NrRWxlbSxcbiAgICBibG9ja05vZGU6IGNsb3Nlc3RCbG9ja0VsZW0uYmxvY2tOb2RlLFxuICAgIGZvdW5kQXRJbmRleDogY2xvc2VzdEJsb2NrRWxlbS5mb3VuZEF0SW5kZXgsXG4gICAgaXNGb3VuZE5vZGVFbXB0eVBhcmFncmFwaDogY2xvc2VzdEJsb2NrRWxlbS5pc0ZvdW5kTm9kZUVtcHR5UGFyYWdyYXBoLFxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBibG9ja0VsZW06IGNsb3Nlc3RCbG9ja0VsZW0uYmxvY2tFbGVtLFxuICAgIGJsb2NrTm9kZTogY2xvc2VzdEJsb2NrRWxlbS5ibG9ja05vZGUsXG4gICAgZm91bmRBdEluZGV4OiBjbG9zZXN0QmxvY2tFbGVtLmZvdW5kQXRJbmRleCxcbiAgICBpc0ZvdW5kTm9kZUVtcHR5UGFyYWdyYXBoOiBjbG9zZXN0QmxvY2tFbGVtLmlzRm91bmROb2RlRW1wdHlQYXJhZ3JhcGgsXG4gIH1cbn1cbiIsIid1c2UgY2xpZW50J1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdFdpdGhvdXRUcmFuc2Zvcm0oZWxlbTogSFRNTEVsZW1lbnQpOiBET01SZWN0IHtcbiAgY29uc3QgcmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICAvLyBFeHRyYWN0IHRoZSB0cmFuc2xhdGlvbiB2YWx1ZSBmcm9tIHRoZSB0cmFuc2Zvcm0gc3R5bGVcbiAgY29uc3QgdHJhbnNmb3JtVmFsdWUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW0pLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpXG4gIGlmICghdHJhbnNmb3JtVmFsdWUgfHwgdHJhbnNmb3JtVmFsdWUgPT09ICdub25lJykge1xuICAgIHJldHVybiByZWN0XG4gIH1cblxuICBjb25zdCBsYXN0TnVtYmVyT2ZUcmFuc2Zvcm1WYWx1ZSA9IHRyYW5zZm9ybVZhbHVlLnNwbGl0KCcsJykucG9wKClcbiAgcmVjdC55ID0gcmVjdC55IC0gTnVtYmVyKGxhc3ROdW1iZXJPZlRyYW5zZm9ybVZhbHVlPy5yZXBsYWNlKCcpJywgJycpKVxuXG4gIC8vIFJldHVybiB0aGUgb3JpZ2luYWwgYm91bmRpbmcgcmVjdCBpZiBubyB0cmFuc2xhdGlvbiBpcyBhcHBsaWVkXG4gIHJldHVybiByZWN0XG59XG4iLCIndXNlIGNsaWVudCdcbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2xsYXBzZWRNYXJnaW5zKGVsZW06IEhUTUxFbGVtZW50KToge1xuICBtYXJnaW5Cb3R0b206IG51bWJlclxuICBtYXJnaW5Ub3A6IG51bWJlclxufSB7XG4gIGNvbnN0IGdldE1hcmdpbiA9IChlbGVtZW50OiBFbGVtZW50IHwgbnVsbCwgbWFyZ2luOiAnbWFyZ2luQm90dG9tJyB8ICdtYXJnaW5Ub3AnKTogbnVtYmVyID0+XG4gICAgZWxlbWVudCA/IHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudClbbWFyZ2luXSkgOiAwXG5cbiAgY29uc3QgeyBtYXJnaW5Cb3R0b20sIG1hcmdpblRvcCB9ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbSlcbiAgY29uc3QgcHJldkVsZW1TaWJsaW5nTWFyZ2luQm90dG9tID0gZ2V0TWFyZ2luKGVsZW0ucHJldmlvdXNFbGVtZW50U2libGluZywgJ21hcmdpbkJvdHRvbScpXG4gIGNvbnN0IG5leHRFbGVtU2libGluZ01hcmdpblRvcCA9IGdldE1hcmdpbihlbGVtLm5leHRFbGVtZW50U2libGluZywgJ21hcmdpblRvcCcpXG4gIGNvbnN0IGNvbGxhcHNlZFRvcE1hcmdpbiA9IE1hdGgubWF4KHBhcnNlRmxvYXQobWFyZ2luVG9wKSwgcHJldkVsZW1TaWJsaW5nTWFyZ2luQm90dG9tKVxuICBjb25zdCBjb2xsYXBzZWRCb3R0b21NYXJnaW4gPSBNYXRoLm1heChwYXJzZUZsb2F0KG1hcmdpbkJvdHRvbSksIG5leHRFbGVtU2libGluZ01hcmdpblRvcClcblxuICByZXR1cm4geyBtYXJnaW5Cb3R0b206IGNvbGxhcHNlZEJvdHRvbU1hcmdpbiwgbWFyZ2luVG9wOiBjb2xsYXBzZWRUb3BNYXJnaW4gfVxufVxuIiwiJ3VzZSBjbGllbnQnXG5pbXBvcnQgdHlwZSB7IExleGljYWxFZGl0b3IgfSBmcm9tICdsZXhpY2FsJ1xuXG5pbXBvcnQgeyAkZ2V0Um9vdCB9IGZyb20gJ2xleGljYWwnXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb3BMZXZlbE5vZGVLZXlzKGVkaXRvcjogTGV4aWNhbEVkaXRvcik6IHN0cmluZ1tdIHtcbiAgcmV0dXJuIGVkaXRvci5nZXRFZGl0b3JTdGF0ZSgpLnJlYWQoKCkgPT4gJGdldFJvb3QoKS5nZXRDaGlsZHJlbktleXMoKSlcbn1cbiIsIid1c2UgY2xpZW50J1xuZXhwb3J0IGZ1bmN0aW9uIGlzT25IYW5kbGVFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBoYW5kbGVFbGVtZW50Q2xhc3NOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuICEhZWxlbWVudC5jbG9zZXN0KGAuJHtoYW5kbGVFbGVtZW50Q2xhc3NOYW1lfWApXG59XG4iLCIndXNlIGNsaWVudCdcbmNvbnN0IHJlcGxhY2VkRWxlbWVudHMgPSBbXG4gICdJTUcnLFxuICAnSU5QVVQnLFxuICAnVEVYVEFSRUEnLFxuICAnU0VMRUNUJyxcbiAgJ0JVVFRPTicsXG4gICdWSURFTycsXG4gICdPQkpFQ1QnLFxuICAnRU1CRUQnLFxuICAnSUZSQU1FJyxcbiAgJ0hSJyxcbl1cblxuLyoqXG4gKiBGcm9tIENoYXRHUFQsIG9ubHkgdGhhdCB2ZXJpZmllZCBpdCB3b3JrcyBmb3IgSFIgZWxlbWVudHMuXG4gKlxuICogSFRNTCBFbGVtZW50cyBjYW4gaGF2ZSBDU1MgbGluZUhlaWdodCBhcHBsaWVkIHRvIHRoZW0sIGJ1dCBpdCBkb2Vzbid0IGFsd2F5cyBhZmZlY3QgdGhlIHZpc3VhbCBsYXlvdXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGNoZWNrcyBpZiB0aGUgbGluZS1oZWlnaHQgcHJvcGVydHkgaGFzIGFuIGVmZmVjdCBvbiB0aGUgZWxlbWVudCdzIGxheW91dC5cbiAqIEBwYXJhbSBodG1sRWxlbVxuICovXG5leHBvcnQgZnVuY3Rpb24gZG9lc0xpbmVIZWlnaHRBZmZlY3RFbGVtZW50KGh0bWxFbGVtOiBIVE1MRWxlbWVudCkge1xuICBpZiAoIWh0bWxFbGVtKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBDaGVjayBmb3IgcmVwbGFjZWQgZWxlbWVudHMsIGVsZW1lbnRzIHRoYXQgdHlwaWNhbGx5IGRvbid0IHN1cHBvcnQgbGluZS1oZWlnaHQgYWRqdXN0bWVudHMsXG4gIC8vIGFuZCBlbGVtZW50cyB3aXRob3V0IHZpc2libGUgY29udGVudFxuXG4gIGlmIChcbiAgICByZXBsYWNlZEVsZW1lbnRzLmluY2x1ZGVzKGh0bWxFbGVtLnRhZ05hbWUpIHx8XG4gICAgaHRtbEVsZW0ub2Zmc2V0SGVpZ2h0ID09PSAwIHx8XG4gICAgaHRtbEVsZW0ub2Zmc2V0V2lkdGggPT09IDBcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBDaGVjayBmb3Igc3BlY2lmaWMgQ1NTIHByb3BlcnRpZXMgdGhhdCBuZWdhdGUgbGluZS1oZWlnaHQncyB2aXN1YWwgZWZmZWN0c1xuICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGh0bWxFbGVtKVxuICBpZiAoXG4gICAgc3R5bGUuZGlzcGxheSA9PT0gJ3RhYmxlLWNlbGwnIHx8XG4gICAgc3R5bGUucG9zaXRpb24gPT09ICdhYnNvbHV0ZScgfHxcbiAgICBzdHlsZS52aXNpYmlsaXR5ID09PSAnaGlkZGVuJyB8fFxuICAgIHN0eWxlLm9wYWNpdHkgPT09ICcwJ1xuICApIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIFRoaXMgaXMgYSBiYXNpYyBjaGVjaywgYW5kIHRoZXJlIGNhbiBiZSBtb3JlIGNvbXBsZXggc2NlbmFyaW9zIHdoZXJlIGxpbmUtaGVpZ2h0IGRvZXNuJ3QgaGF2ZSBhbiBlZmZlY3QuXG4gIHJldHVybiB0cnVlXG59XG4iLCIndXNlIGNsaWVudCdcbmltcG9ydCB7IGRvZXNMaW5lSGVpZ2h0QWZmZWN0RWxlbWVudCB9IGZyb20gJy4vZG9lc0xpbmVIZWlnaHRBZmZlY3RFbGVtZW50LmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0SGFuZGxlUG9zaXRpb24oXG4gIHRhcmdldEVsZW06IEhUTUxFbGVtZW50IHwgbnVsbCxcbiAgaGFuZGxlRWxlbTogSFRNTEVsZW1lbnQsXG4gIGFuY2hvckVsZW06IEhUTUxFbGVtZW50LFxuICBsZWZ0T2Zmc2V0OiBudW1iZXIgPSAwLCAvLyBTUEFDRVxuKSB7XG4gIGlmICghdGFyZ2V0RWxlbSkge1xuICAgIGhhbmRsZUVsZW0uc3R5bGUub3BhY2l0eSA9ICcwJ1xuICAgIGhhbmRsZUVsZW0uc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgtMTAwMDBweCwgLTEwMDAwcHgpJ1xuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgdGFyZ2V0UmVjdCA9IHRhcmdldEVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgY29uc3QgdGFyZ2V0U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXRFbGVtKVxuICBjb25zdCBmbG9hdGluZ0VsZW1SZWN0ID0gaGFuZGxlRWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICBjb25zdCBhbmNob3JFbGVtZW50UmVjdCA9IGFuY2hvckVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICBsZXQgdG9wOiBudW1iZXJcblxuICBjb25zdCBpc0Jsb2NrU3R5bGUgPSBbJ2xleGljYWwtYmxvY2snLCAnbGV4aWNhbC11cGxvYWQnLCAnbGV4aWNhbC1yZWxhdGlvbnNoaXAnXS5zb21lKChjbGFzc2VzKSA9PlxuICAgIHRhcmdldEVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ/LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc2VzKSxcbiAgKVxuXG4gIGlmICghaXNCbG9ja1N0eWxlKSB7XG4gICAgLy8gTm8gbmVlZCB0byBsZXQgbGluZSBoZWlnaHQgYWZmZWN0IHRoZSByZS1wb3NpdGlvbmluZyBvZiB0aGUgZmxvYXRpbmcgZWxlbWVudCBpZiBsaW5lIGhlaWdodCBoYXMgbm9cbiAgICAvLyB2aXN1YWwgZWZmZWN0IG9uIHRoZSBlbGVtZW50LiBPdGhlcndpc2UsIHRoZSBmbG9hdGluZyBlbGVtZW50IHdpbGwgYmUgcG9zaXRpb25lZCBpbmNvcnJlY3RseS5cbiAgICBjb25zdCBhY3R1YWxMaW5lSGVpZ2h0ID0gZG9lc0xpbmVIZWlnaHRBZmZlY3RFbGVtZW50KHRhcmdldEVsZW0pXG4gICAgICA/IHBhcnNlSW50KHRhcmdldFN0eWxlLmxpbmVIZWlnaHQsIDEwKVxuICAgICAgOiAwXG5cbiAgICB0b3AgPSB0YXJnZXRSZWN0LnRvcCArIChhY3R1YWxMaW5lSGVpZ2h0IC0gZmxvYXRpbmdFbGVtUmVjdC5oZWlnaHQpIC8gMiAtIGFuY2hvckVsZW1lbnRSZWN0LnRvcFxuICB9IGVsc2Uge1xuICAgIHRvcCA9IHRhcmdldFJlY3QudG9wICsgOCAtIGFuY2hvckVsZW1lbnRSZWN0LnRvcFxuICB9XG5cbiAgY29uc3QgbGVmdCA9IGxlZnRPZmZzZXRcblxuICBoYW5kbGVFbGVtLnN0eWxlLm9wYWNpdHkgPSAnMSdcbiAgaGFuZGxlRWxlbS5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7bGVmdH1weCwgJHt0b3B9cHgpYFxufVxuIiwiJ3VzZSBjbGllbnQnXG5pbXBvcnQgdHlwZSB7IExleGljYWxFZGl0b3IgfSBmcm9tICdsZXhpY2FsJ1xuaW1wb3J0IHR5cGUgeyBEcmFnRXZlbnQgYXMgUmVhY3REcmFnRXZlbnQgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQuanMnXG5pbXBvcnQgeyBldmVudEZpbGVzIH0gZnJvbSAnQGxleGljYWwvcmljaC10ZXh0J1xuaW1wb3J0IHsgJGdldE5lYXJlc3ROb2RlRnJvbURPTU5vZGUsICRnZXROb2RlQnlLZXksIGlzSFRNTEVsZW1lbnQgfSBmcm9tICdsZXhpY2FsJ1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNyZWF0ZVBvcnRhbCB9IGZyb20gJ3JlYWN0LWRvbSdcblxuaW1wb3J0IHsgdXNlRWRpdG9yQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZy9jbGllbnQvRWRpdG9yQ29uZmlnUHJvdmlkZXIuanMnXG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3BvaW50LmpzJ1xuaW1wb3J0IHsgY2FsY3VsYXRlRGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtIH0gZnJvbSAnLi4vdXRpbHMvY2FsY3VsYXRlRGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtLmpzJ1xuaW1wb3J0IHsgZ2V0Tm9kZUNsb3NlVG9Qb2ludCB9IGZyb20gJy4uL3V0aWxzL2dldE5vZGVDbG9zZVRvUG9pbnQuanMnXG5pbXBvcnQgeyBnZXRUb3BMZXZlbE5vZGVLZXlzIH0gZnJvbSAnLi4vdXRpbHMvZ2V0VG9wTGV2ZWxOb2RlS2V5cy5qcydcbmltcG9ydCB7IGlzT25IYW5kbGVFbGVtZW50IH0gZnJvbSAnLi4vdXRpbHMvaXNPbkhhbmRsZUVsZW1lbnQuanMnXG5pbXBvcnQgeyBzZXRIYW5kbGVQb3NpdGlvbiB9IGZyb20gJy4uL3V0aWxzL3NldEhhbmRsZVBvc2l0aW9uLmpzJ1xuaW1wb3J0IHsgZ2V0Qm91bmRpbmdDbGllbnRSZWN0V2l0aG91dFRyYW5zZm9ybSB9IGZyb20gJy4vZ2V0Qm91bmRpbmdSZWN0V2l0aG91dFRyYW5zZm9ybS5qcydcbmltcG9ydCAnLi9pbmRleC5zY3NzJ1xuaW1wb3J0IHsgc2V0VGFyZ2V0TGluZSB9IGZyb20gJy4vc2V0VGFyZ2V0TGluZS5qcydcblxuY29uc3QgRFJBR0dBQkxFX0JMT0NLX01FTlVfQ0xBU1NOQU1FID0gJ2RyYWdnYWJsZS1ibG9jay1tZW51J1xuY29uc3QgRFJBR19EQVRBX0ZPUk1BVCA9ICdhcHBsaWNhdGlvbi94LWxleGljYWwtZHJhZy1ibG9jaydcblxubGV0IHByZXZJbmRleCA9IEluZmluaXR5XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRJbmRleChrZXlzTGVuZ3RoOiBudW1iZXIpOiBudW1iZXIge1xuICBpZiAoa2V5c0xlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBJbmZpbml0eVxuICB9XG4gIGlmIChwcmV2SW5kZXggPj0gMCAmJiBwcmV2SW5kZXggPCBrZXlzTGVuZ3RoKSB7XG4gICAgcmV0dXJuIHByZXZJbmRleFxuICB9XG5cbiAgcmV0dXJuIE1hdGguZmxvb3Ioa2V5c0xlbmd0aCAvIDIpXG59XG5cbmZ1bmN0aW9uIHNldERyYWdJbWFnZShkYXRhVHJhbnNmZXI6IERhdGFUcmFuc2ZlciwgZHJhZ2dhYmxlQmxvY2tFbGVtOiBIVE1MRWxlbWVudCkge1xuICBjb25zdCB7IHRyYW5zZm9ybSB9ID0gZHJhZ2dhYmxlQmxvY2tFbGVtLnN0eWxlXG5cbiAgLy8gUmVtb3ZlIGRyYWdJbWFnZSBib3JkZXJzXG4gIGRhdGFUcmFuc2Zlci5zZXREcmFnSW1hZ2UoZHJhZ2dhYmxlQmxvY2tFbGVtLCAwLCAwKVxuXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGRyYWdnYWJsZUJsb2NrRWxlbS5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbiAgfSlcbn1cblxuZnVuY3Rpb24gaGlkZVRhcmdldExpbmUoXG4gIHRhcmdldExpbmVFbGVtOiBIVE1MRWxlbWVudCB8IG51bGwsXG4gIGxhc3RUYXJnZXRCbG9ja0VsZW06IEhUTUxFbGVtZW50IHwgbnVsbCxcbikge1xuICBpZiAodGFyZ2V0TGluZUVsZW0pIHtcbiAgICB0YXJnZXRMaW5lRWxlbS5zdHlsZS5vcGFjaXR5ID0gJzAnXG4gIH1cbiAgaWYgKGxhc3RUYXJnZXRCbG9ja0VsZW0pIHtcbiAgICBsYXN0VGFyZ2V0QmxvY2tFbGVtLnN0eWxlLm9wYWNpdHkgPSAnJ1xuICAgIC8vIERlbGV0ZSBtYXJnaW5Cb3R0b20gYW5kIG1hcmdpblRvcCB2YWx1ZXMgd2Ugc2V0XG4gICAgbGFzdFRhcmdldEJsb2NrRWxlbS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnJ1xuICAgIGxhc3RUYXJnZXRCbG9ja0VsZW0uc3R5bGUubWFyZ2luVG9wID0gJydcbiAgICAvL2xhc3RUYXJnZXRCbG9jay5zdHlsZS5ib3JkZXIgPSAnbm9uZSdcbiAgfVxufVxuXG5mdW5jdGlvbiB1c2VEcmFnZ2FibGVCbG9ja01lbnUoXG4gIGVkaXRvcjogTGV4aWNhbEVkaXRvcixcbiAgYW5jaG9yRWxlbTogSFRNTEVsZW1lbnQsXG4gIGlzRWRpdGFibGU6IGJvb2xlYW4sXG4pOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICBjb25zdCBzY3JvbGxlckVsZW0gPSBhbmNob3JFbGVtLnBhcmVudEVsZW1lbnRcblxuICBjb25zdCBtZW51UmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKVxuICBjb25zdCB0YXJnZXRMaW5lUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKVxuICBjb25zdCBkZWJ1Z0hpZ2hsaWdodFJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbClcbiAgY29uc3QgaXNEcmFnZ2luZ0Jsb2NrUmVmID0gdXNlUmVmPGJvb2xlYW4+KGZhbHNlKVxuICBjb25zdCBbZHJhZ2dhYmxlQmxvY2tFbGVtLCBzZXREcmFnZ2FibGVCbG9ja0VsZW1dID0gdXNlU3RhdGU8SFRNTEVsZW1lbnQgfCBudWxsPihudWxsKVxuICBjb25zdCBbbGFzdFRhcmdldEJsb2NrLCBzZXRMYXN0VGFyZ2V0QmxvY2tdID0gdXNlU3RhdGU8e1xuICAgIGJvdW5kaW5nQm94PzogRE9NUmVjdFxuICAgIGVsZW06IEhUTUxFbGVtZW50IHwgbnVsbFxuICAgIGlzQmVsb3c6IGJvb2xlYW5cbiAgfSB8IG51bGw+KG51bGwpXG5cbiAgY29uc3QgeyBlZGl0b3JDb25maWcgfSA9IHVzZUVkaXRvckNvbmZpZ0NvbnRleHQoKVxuXG4gIGNvbnN0IGJsb2NrSGFuZGxlSG9yaXpvbnRhbE9mZnNldCA9IGVkaXRvckNvbmZpZz8uYWRtaW4/LmhpZGVHdXR0ZXIgPyAtNDQgOiAtOFxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBwb3NpdGlvbmluZyBvZiB0aGUgZHJhZyBoYW5kbGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbkRvY3VtZW50TW91c2VNb3ZlKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXRcbiAgICAgIGlmICghaXNIVE1MRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdCBkaXN0YW5jZUZyb21TY3JvbGxlckVsZW0gPSBjYWxjdWxhdGVEaXN0YW5jZUZyb21TY3JvbGxlckVsZW0oXG4gICAgICAgIHNjcm9sbGVyRWxlbSxcbiAgICAgICAgZXZlbnQucGFnZVgsXG4gICAgICAgIGV2ZW50LnBhZ2VZLFxuICAgICAgICB0YXJnZXQsXG4gICAgICApXG4gICAgICBpZiAoZGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtID09PSAtMSkge1xuICAgICAgICBzZXREcmFnZ2FibGVCbG9ja0VsZW0obnVsbClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChpc09uSGFuZGxlRWxlbWVudCh0YXJnZXQsIERSQUdHQUJMRV9CTE9DS19NRU5VX0NMQVNTTkFNRSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRvcExldmVsTm9kZUtleXMgPSBnZXRUb3BMZXZlbE5vZGVLZXlzKGVkaXRvcilcblxuICAgICAgY29uc3Qge1xuICAgICAgICBibG9ja0VsZW06IF9kcmFnZ2FibGVCbG9ja0VsZW0sXG4gICAgICAgIGZvdW5kQXRJbmRleCxcbiAgICAgICAgaXNGb3VuZE5vZGVFbXB0eVBhcmFncmFwaCxcbiAgICAgIH0gPSBnZXROb2RlQ2xvc2VUb1BvaW50KHtcbiAgICAgICAgYW5jaG9yRWxlbSxcbiAgICAgICAgY2FjaGVfdGhyZXNob2xkOiAwLFxuICAgICAgICBlZGl0b3IsXG4gICAgICAgIGhvcml6b250YWxPZmZzZXQ6IC1kaXN0YW5jZUZyb21TY3JvbGxlckVsZW0sXG4gICAgICAgIHBvaW50OiBuZXcgUG9pbnQoZXZlbnQueCwgZXZlbnQueSksXG4gICAgICAgIHN0YXJ0SW5kZXg6IGdldEN1cnJlbnRJbmRleCh0b3BMZXZlbE5vZGVLZXlzLmxlbmd0aCksXG4gICAgICAgIHVzZUVkZ2VBc0RlZmF1bHQ6IGZhbHNlLFxuICAgICAgICB2ZXJib3NlOiBmYWxzZSxcbiAgICAgIH0pXG5cbiAgICAgIHByZXZJbmRleCA9IGZvdW5kQXRJbmRleFxuXG4gICAgICAvL2lmIChERUJVRyAmJiBfZHJhZ2dhYmxlQmxvY2tFbGVtKSB7XG4gICAgICAvL3RhcmdldEJsb2NrRWxlbS5zdHlsZS5ib3JkZXIgPSAnM3B4IHNvbGlkIHJlZCdcbiAgICAgIC8vIGhpZ2hsaWdodEVsZW1PcmlnaW5hbFBvc2l0aW9uKGRlYnVnSGlnaGxpZ2h0UmVmLCBfZHJhZ2dhYmxlQmxvY2tFbGVtLCBhbmNob3JFbGVtKVxuICAgICAgLy99XG5cbiAgICAgIGlmICghX2RyYWdnYWJsZUJsb2NrRWxlbSAmJiAhaXNGb3VuZE5vZGVFbXB0eVBhcmFncmFwaCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKGRyYWdnYWJsZUJsb2NrRWxlbSAhPT0gX2RyYWdnYWJsZUJsb2NrRWxlbSkge1xuICAgICAgICBzZXREcmFnZ2FibGVCbG9ja0VsZW0oX2RyYWdnYWJsZUJsb2NrRWxlbSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTaW5jZSB0aGUgZHJhZ2dhYmxlQmxvY2tFbGVtIGlzIG91dHNpZGUgdGhlIGFjdHVhbCBlZGl0b3IsIHdlIG5lZWQgdG8gbGlzdGVuIHRvIHRoZSBkb2N1bWVudFxuICAgIC8vIHRvIGJlIGFibGUgdG8gZGV0ZWN0IHdoZW4gdGhlIG1vdXNlIGlzIG91dHNpZGUgdGhlIGVkaXRvciBhbmQgcmVzcGVjdCBhIGJ1ZmZlciBhcm91bmRcbiAgICAvLyB0aGUgc2Nyb2xsZXJFbGVtIHRvIGF2b2lkIHRoZSBkcmFnZ2FibGVCbG9ja0VsZW0gZGlzYXBwZWFyaW5nIHRvbyBlYXJseS5cbiAgICBkb2N1bWVudD8uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Eb2N1bWVudE1vdXNlTW92ZSlcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkb2N1bWVudD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Eb2N1bWVudE1vdXNlTW92ZSlcbiAgICB9XG4gIH0sIFtzY3JvbGxlckVsZW0sIGFuY2hvckVsZW0sIGVkaXRvciwgZHJhZ2dhYmxlQmxvY2tFbGVtXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChtZW51UmVmLmN1cnJlbnQpIHtcbiAgICAgIHNldEhhbmRsZVBvc2l0aW9uKFxuICAgICAgICBkcmFnZ2FibGVCbG9ja0VsZW0sXG4gICAgICAgIG1lbnVSZWYuY3VycmVudCxcbiAgICAgICAgYW5jaG9yRWxlbSxcbiAgICAgICAgYmxvY2tIYW5kbGVIb3Jpem9udGFsT2Zmc2V0LFxuICAgICAgKVxuICAgIH1cbiAgfSwgW2FuY2hvckVsZW0sIGRyYWdnYWJsZUJsb2NrRWxlbSwgYmxvY2tIYW5kbGVIb3Jpem9udGFsT2Zmc2V0XSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGZ1bmN0aW9uIG9uRHJhZ292ZXIoZXZlbnQ6IERyYWdFdmVudCk6IGJvb2xlYW4ge1xuICAgICAgaWYgKCFpc0RyYWdnaW5nQmxvY2tSZWYuY3VycmVudCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGNvbnN0IFtpc0ZpbGVUcmFuc2Zlcl0gPSBldmVudEZpbGVzKGV2ZW50KVxuICAgICAgaWYgKGlzRmlsZVRyYW5zZmVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuXG4gICAgICBjb25zdCB7IHBhZ2VZLCB0YXJnZXQgfSA9IGV2ZW50XG4gICAgICBpZiAoIWlzSFRNTEVsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtID0gY2FsY3VsYXRlRGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtKFxuICAgICAgICBzY3JvbGxlckVsZW0sXG4gICAgICAgIGV2ZW50LnBhZ2VYLFxuICAgICAgICBldmVudC5wYWdlWSxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICAxMDAsXG4gICAgICAgIDUwLFxuICAgICAgKVxuXG4gICAgICBjb25zdCB0b3BMZXZlbE5vZGVLZXlzID0gZ2V0VG9wTGV2ZWxOb2RlS2V5cyhlZGl0b3IpXG5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgYmxvY2tFbGVtOiB0YXJnZXRCbG9ja0VsZW0sXG4gICAgICAgIGZvdW5kQXRJbmRleCxcbiAgICAgICAgaXNGb3VuZE5vZGVFbXB0eVBhcmFncmFwaCxcbiAgICAgIH0gPSBnZXROb2RlQ2xvc2VUb1BvaW50KHtcbiAgICAgICAgYW5jaG9yRWxlbSxcbiAgICAgICAgZWRpdG9yLFxuICAgICAgICBmdXp6eTogdHJ1ZSxcbiAgICAgICAgaG9yaXpvbnRhbE9mZnNldDogLWRpc3RhbmNlRnJvbVNjcm9sbGVyRWxlbSxcbiAgICAgICAgcG9pbnQ6IG5ldyBQb2ludChldmVudC54LCBldmVudC55KSxcbiAgICAgICAgc3RhcnRJbmRleDogZ2V0Q3VycmVudEluZGV4KHRvcExldmVsTm9kZUtleXMubGVuZ3RoKSxcbiAgICAgICAgdXNlRWRnZUFzRGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdmVyYm9zZTogdHJ1ZSxcbiAgICAgIH0pXG5cbiAgICAgIHByZXZJbmRleCA9IGZvdW5kQXRJbmRleFxuXG4gICAgICBjb25zdCB0YXJnZXRMaW5lRWxlbSA9IHRhcmdldExpbmVSZWYuY3VycmVudFxuICAgICAgLy8gdGFyZ2V0QmxvY2tFbGVtID09PSBudWxsIHNob3VsZG4ndCBoYXBwZW5cbiAgICAgIGlmICh0YXJnZXRCbG9ja0VsZW0gPT09IG51bGwgfHwgdGFyZ2V0TGluZUVsZW0gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGlmIChkcmFnZ2FibGVCbG9ja0VsZW0gIT09IHRhcmdldEJsb2NrRWxlbSkge1xuICAgICAgICBjb25zdCB7IGlzQmVsb3csIHdpbGxTdGF5SW5TYW1lUG9zaXRpb24gfSA9IHNldFRhcmdldExpbmUoXG4gICAgICAgICAgZWRpdG9yQ29uZmlnPy5hZG1pbj8uaGlkZUd1dHRlciA/ICcwcHgnIDogJzNyZW0nLFxuICAgICAgICAgIGJsb2NrSGFuZGxlSG9yaXpvbnRhbE9mZnNldCArXG4gICAgICAgICAgICAoZWRpdG9yQ29uZmlnPy5hZG1pbj8uaGlkZUd1dHRlclxuICAgICAgICAgICAgICA/IChtZW51UmVmPy5jdXJyZW50Py5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKT8ud2lkdGggPz8gMClcbiAgICAgICAgICAgICAgOiAtKG1lbnVSZWY/LmN1cnJlbnQ/LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpPy53aWR0aCA/PyAwKSksXG4gICAgICAgICAgdGFyZ2V0TGluZUVsZW0sXG4gICAgICAgICAgdGFyZ2V0QmxvY2tFbGVtLFxuICAgICAgICAgIGxhc3RUYXJnZXRCbG9jayEsXG4gICAgICAgICAgcGFnZVksXG4gICAgICAgICAgYW5jaG9yRWxlbSxcbiAgICAgICAgICBldmVudCxcbiAgICAgICAgICBkZWJ1Z0hpZ2hsaWdodFJlZixcbiAgICAgICAgICBpc0ZvdW5kTm9kZUVtcHR5UGFyYWdyYXBoLFxuICAgICAgICApXG5cbiAgICAgICAgLy8gUHJldmVudCBkZWZhdWx0IGV2ZW50IHRvIGJlIGFibGUgdG8gdHJpZ2dlciBvbkRyb3AgZXZlbnRzXG4gICAgICAgIC8vIENhbGxpbmcgcHJldmVudERlZmF1bHQoKSBhZGRzIHRoZSBncmVlbiBwbHVzIGljb24gdG8gdGhlIGN1cnNvcixcbiAgICAgICAgLy8gaW5kaWNhdGluZyB0aGF0IHRoZSBkcm9wIGlzIGFsbG93ZWQuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgICAgICBpZiAoIXdpbGxTdGF5SW5TYW1lUG9zaXRpb24pIHtcbiAgICAgICAgICBzZXRMYXN0VGFyZ2V0QmxvY2soe1xuICAgICAgICAgICAgYm91bmRpbmdCb3g6IHRhcmdldEJsb2NrRWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgIGVsZW06IHRhcmdldEJsb2NrRWxlbSxcbiAgICAgICAgICAgIGlzQmVsb3csXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChsYXN0VGFyZ2V0QmxvY2s/LmVsZW0pIHtcbiAgICAgICAgaGlkZVRhcmdldExpbmUodGFyZ2V0TGluZUVsZW0sIGxhc3RUYXJnZXRCbG9jay5lbGVtKVxuICAgICAgICBzZXRMYXN0VGFyZ2V0QmxvY2soe1xuICAgICAgICAgIGJvdW5kaW5nQm94OiB0YXJnZXRCbG9ja0VsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgZWxlbTogdGFyZ2V0QmxvY2tFbGVtLFxuICAgICAgICAgIGlzQmVsb3c6IGZhbHNlLFxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRHJvcChldmVudDogRHJhZ0V2ZW50KTogYm9vbGVhbiB7XG4gICAgICBpZiAoIWlzRHJhZ2dpbmdCbG9ja1JlZi5jdXJyZW50KSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgY29uc3QgW2lzRmlsZVRyYW5zZmVyXSA9IGV2ZW50RmlsZXMoZXZlbnQpXG4gICAgICBpZiAoaXNGaWxlVHJhbnNmZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBjb25zdCB7IGRhdGFUcmFuc2ZlciwgcGFnZVksIHRhcmdldCB9ID0gZXZlbnRcbiAgICAgIGNvbnN0IGRyYWdEYXRhID0gZGF0YVRyYW5zZmVyPy5nZXREYXRhKERSQUdfREFUQV9GT1JNQVQpIHx8ICcnXG5cbiAgICAgIGVkaXRvci51cGRhdGUoKCkgPT4ge1xuICAgICAgICBjb25zdCBkcmFnZ2VkTm9kZSA9ICRnZXROb2RlQnlLZXkoZHJhZ0RhdGEpXG4gICAgICAgIGlmICghZHJhZ2dlZE5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzSFRNTEVsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlRnJvbVNjcm9sbGVyRWxlbSA9IGNhbGN1bGF0ZURpc3RhbmNlRnJvbVNjcm9sbGVyRWxlbShcbiAgICAgICAgICBzY3JvbGxlckVsZW0sXG4gICAgICAgICAgZXZlbnQucGFnZVgsXG4gICAgICAgICAgZXZlbnQucGFnZVksXG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIDEwMCxcbiAgICAgICAgICA1MCxcbiAgICAgICAgKVxuXG4gICAgICAgIGNvbnN0IHsgYmxvY2tFbGVtOiB0YXJnZXRCbG9ja0VsZW0sIGlzRm91bmROb2RlRW1wdHlQYXJhZ3JhcGggfSA9IGdldE5vZGVDbG9zZVRvUG9pbnQoe1xuICAgICAgICAgIGFuY2hvckVsZW0sXG4gICAgICAgICAgZWRpdG9yLFxuICAgICAgICAgIGZ1enp5OiB0cnVlLFxuICAgICAgICAgIGhvcml6b250YWxPZmZzZXQ6IC1kaXN0YW5jZUZyb21TY3JvbGxlckVsZW0sXG4gICAgICAgICAgcG9pbnQ6IG5ldyBQb2ludChldmVudC54LCBldmVudC55KSxcbiAgICAgICAgICB1c2VFZGdlQXNEZWZhdWx0OiB0cnVlLFxuICAgICAgICB9KVxuXG4gICAgICAgIGlmICghdGFyZ2V0QmxvY2tFbGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0Tm9kZSA9ICRnZXROZWFyZXN0Tm9kZUZyb21ET01Ob2RlKHRhcmdldEJsb2NrRWxlbSlcbiAgICAgICAgaWYgKCF0YXJnZXROb2RlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhcmdldE5vZGUgPT09IGRyYWdnZWROb2RlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgaGVpZ2h0OiB0YXJnZXRCbG9ja0VsZW1IZWlnaHQsIHRvcDogdGFyZ2V0QmxvY2tFbGVtVG9wIH0gPVxuICAgICAgICAgIGdldEJvdW5kaW5nQ2xpZW50UmVjdFdpdGhvdXRUcmFuc2Zvcm0odGFyZ2V0QmxvY2tFbGVtKVxuXG4gICAgICAgIGNvbnN0IG1vdXNlWSA9IHBhZ2VZXG4gICAgICAgIGNvbnN0IGlzQmVsb3cgPSBtb3VzZVkgPj0gdGFyZ2V0QmxvY2tFbGVtVG9wICsgdGFyZ2V0QmxvY2tFbGVtSGVpZ2h0IC8gMiArIHdpbmRvdy5zY3JvbGxZXG5cbiAgICAgICAgaWYgKCFpc0ZvdW5kTm9kZUVtcHR5UGFyYWdyYXBoKSB7XG4gICAgICAgICAgaWYgKGlzQmVsb3cpIHtcbiAgICAgICAgICAgIC8vIGJlbG93IHRhcmdldEJsb2NrRWxlbVxuICAgICAgICAgICAgdGFyZ2V0Tm9kZS5pbnNlcnRBZnRlcihkcmFnZ2VkTm9kZSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYWJvdmUgdGFyZ2V0QmxvY2tFbGVtXG4gICAgICAgICAgICB0YXJnZXROb2RlLmluc2VydEJlZm9yZShkcmFnZ2VkTm9kZSlcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy9cbiAgICAgICAgICB0YXJnZXROb2RlLmluc2VydEJlZm9yZShkcmFnZ2VkTm9kZSlcbiAgICAgICAgICB0YXJnZXROb2RlLnJlbW92ZSgpXG4gICAgICAgIH1cblxuICAgICAgICAvKlxuICAgICAgICBpZiAocGFnZVkgPj0gdGFyZ2V0QmxvY2tFbGVtVG9wICsgdGFyZ2V0QmxvY2tFbGVtSGVpZ2h0IC8gMikge1xuICAgICAgICAgIHRhcmdldE5vZGUuaW5zZXJ0QWZ0ZXIoZHJhZ2dlZE5vZGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0Tm9kZS5pbnNlcnRCZWZvcmUoZHJhZ2dlZE5vZGUpXG4gICAgICAgIH0qL1xuICAgICAgICBpZiAoZHJhZ2dhYmxlQmxvY2tFbGVtICE9PSBudWxsKSB7XG4gICAgICAgICAgc2V0RHJhZ2dhYmxlQmxvY2tFbGVtKG51bGwpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaW5kIGFsbCBwcmV2aW91cyBlbGVtZW50cyB3aXRoIGxleGljYWwtYmxvY2staGlnaGxpZ2h0ZXIgY2xhc3MgYW5kIHJlbW92ZSB0aGVtXG4gICAgICAgIGNvbnN0IGFsbFByZXZIaWdobGlnaHRlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubGV4aWNhbC1ibG9jay1oaWdobGlnaHRlcicpXG4gICAgICAgIGFsbFByZXZIaWdobGlnaHRlcnMuZm9yRWFjaCgoaGlnaGxpZ2h0ZXIpID0+IHtcbiAgICAgICAgICBoaWdobGlnaHRlci5yZW1vdmUoKVxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IG5ld0luc2VydGVkRWxlbSA9IGVkaXRvci5nZXRFbGVtZW50QnlLZXkoZHJhZ2dlZE5vZGUuZ2V0S2V5KCkpXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIC8vIGFkZCBuZXcgdGVtcCBodG1sIGVsZW1lbnQgdG8gbmV3SW5zZXJ0ZWRFbGVtIHdpdGggdGhlIHNhbWUgaGVpZ2h0IGFuZCB3aWR0aCBhbmQgdGhlIGNsYXNzIGJsb2NrLXNlbGVjdGVkXG4gICAgICAgICAgLy8gdG8gaGlnaGxpZ2h0IHRoZSBuZXcgaW5zZXJ0ZWQgZWxlbWVudFxuICAgICAgICAgIGNvbnN0IG5ld0luc2VydGVkRWxlbVJlY3QgPSBuZXdJbnNlcnRlZEVsZW0/LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgICAgaWYgKCFuZXdJbnNlcnRlZEVsZW1SZWN0KSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgaGlnaGxpZ2h0RWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgICAgaGlnaGxpZ2h0RWxlbS5jbGFzc05hbWUgPSAnbGV4aWNhbC1ibG9jay1oaWdobGlnaHRlcidcblxuICAgICAgICAgIGhpZ2hsaWdodEVsZW0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3ZhcigtLXRoZW1lLWVsZXZhdGlvbi0xMDAwJ1xuICAgICAgICAgIGhpZ2hsaWdodEVsZW0uc3R5bGUudHJhbnNpdGlvbiA9ICdvcGFjaXR5IDAuNXMgZWFzZS1pbi1vdXQnXG4gICAgICAgICAgaGlnaGxpZ2h0RWxlbS5zdHlsZS56SW5kZXggPSAnMSdcbiAgICAgICAgICBoaWdobGlnaHRFbGVtLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSdcbiAgICAgICAgICBoaWdobGlnaHRFbGVtLnN0eWxlLmJveFNpemluZyA9ICdib3JkZXItYm94J1xuICAgICAgICAgIGhpZ2hsaWdodEVsZW0uc3R5bGUuYm9yZGVyUmFkaXVzID0gJzRweCdcbiAgICAgICAgICBoaWdobGlnaHRFbGVtLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJ1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaGlnaGxpZ2h0RWxlbSlcblxuICAgICAgICAgIGhpZ2hsaWdodEVsZW0uc3R5bGUub3BhY2l0eSA9ICcwLjEnXG5cbiAgICAgICAgICBoaWdobGlnaHRFbGVtLnN0eWxlLmhlaWdodCA9IGAke25ld0luc2VydGVkRWxlbVJlY3QuaGVpZ2h0ICsgOH1weGBcbiAgICAgICAgICBoaWdobGlnaHRFbGVtLnN0eWxlLndpZHRoID0gYCR7bmV3SW5zZXJ0ZWRFbGVtUmVjdC53aWR0aCArIDh9cHhgXG4gICAgICAgICAgaGlnaGxpZ2h0RWxlbS5zdHlsZS50b3AgPSBgJHtuZXdJbnNlcnRlZEVsZW1SZWN0LnRvcCArIHdpbmRvdy5zY3JvbGxZIC0gNH1weGBcbiAgICAgICAgICBoaWdobGlnaHRFbGVtLnN0eWxlLmxlZnQgPSBgJHtuZXdJbnNlcnRlZEVsZW1SZWN0LmxlZnQgLSA0fXB4YFxuXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBoaWdobGlnaHRFbGVtLnN0eWxlLm9wYWNpdHkgPSAnMCdcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICBoaWdobGlnaHRFbGVtLnJlbW92ZSgpXG4gICAgICAgICAgICB9LCA1MDApXG4gICAgICAgICAgfSwgMTAwMClcbiAgICAgICAgfSwgMTIwKVxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvLyByZWdpc3RlciBvbkRyYWdvdmVyIGV2ZW50IGxpc3RlbmVyczpcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIG9uRHJhZ292ZXIpXG4gICAgLy8gcmVnaXN0ZXIgb25Ecm9wIGV2ZW50IGxpc3RlbmVyczpcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgb25Ecm9wKVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgb25EcmFnb3ZlcilcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBvbkRyb3ApXG4gICAgfVxuICB9LCBbXG4gICAgc2Nyb2xsZXJFbGVtLFxuICAgIGJsb2NrSGFuZGxlSG9yaXpvbnRhbE9mZnNldCxcbiAgICBhbmNob3JFbGVtLFxuICAgIGVkaXRvcixcbiAgICBsYXN0VGFyZ2V0QmxvY2ssXG4gICAgZHJhZ2dhYmxlQmxvY2tFbGVtLFxuICAgIGVkaXRvckNvbmZpZz8uYWRtaW4/LmhpZGVHdXR0ZXIsXG4gIF0pXG5cbiAgZnVuY3Rpb24gb25EcmFnU3RhcnQoZXZlbnQ6IFJlYWN0RHJhZ0V2ZW50PEhUTUxEaXZFbGVtZW50Pik6IHZvaWQge1xuICAgIGNvbnN0IGRhdGFUcmFuc2ZlciA9IGV2ZW50LmRhdGFUcmFuc2ZlclxuICAgIGlmICghZGF0YVRyYW5zZmVyIHx8ICFkcmFnZ2FibGVCbG9ja0VsZW0pIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZXREcmFnSW1hZ2UoZGF0YVRyYW5zZmVyLCBkcmFnZ2FibGVCbG9ja0VsZW0pXG4gICAgbGV0IG5vZGVLZXkgPSAnJ1xuICAgIGVkaXRvci51cGRhdGUoKCkgPT4ge1xuICAgICAgY29uc3Qgbm9kZSA9ICRnZXROZWFyZXN0Tm9kZUZyb21ET01Ob2RlKGRyYWdnYWJsZUJsb2NrRWxlbSlcbiAgICAgIGlmIChub2RlKSB7XG4gICAgICAgIG5vZGVLZXkgPSBub2RlLmdldEtleSgpXG4gICAgICB9XG4gICAgfSlcbiAgICBpc0RyYWdnaW5nQmxvY2tSZWYuY3VycmVudCA9IHRydWVcbiAgICBkYXRhVHJhbnNmZXIuc2V0RGF0YShEUkFHX0RBVEFfRk9STUFULCBub2RlS2V5KVxuICB9XG5cbiAgZnVuY3Rpb24gb25EcmFnRW5kKCk6IHZvaWQge1xuICAgIGlzRHJhZ2dpbmdCbG9ja1JlZi5jdXJyZW50ID0gZmFsc2VcbiAgICBpZiAobGFzdFRhcmdldEJsb2NrPy5lbGVtKSB7XG4gICAgICBoaWRlVGFyZ2V0TGluZSh0YXJnZXRMaW5lUmVmLmN1cnJlbnQsIGxhc3RUYXJnZXRCbG9jaz8uZWxlbSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY3JlYXRlUG9ydGFsKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPVwiaWNvbiBkcmFnZ2FibGUtYmxvY2stbWVudVwiXG4gICAgICAgIGRyYWdnYWJsZVxuICAgICAgICBvbkRyYWdFbmQ9e29uRHJhZ0VuZH1cbiAgICAgICAgb25EcmFnU3RhcnQ9e29uRHJhZ1N0YXJ0fVxuICAgICAgICByZWY9e21lbnVSZWZ9XG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtpc0VkaXRhYmxlID8gJ2ljb24nIDogJyd9IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJhZ2dhYmxlLWJsb2NrLXRhcmdldC1saW5lXCIgcmVmPXt0YXJnZXRMaW5lUmVmfSAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJkZWJ1Zy1oaWdobGlnaHRcIiByZWY9e2RlYnVnSGlnaGxpZ2h0UmVmfSAvPlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+LFxuICAgIGFuY2hvckVsZW0sXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIERyYWdnYWJsZUJsb2NrUGx1Z2luKHtcbiAgYW5jaG9yRWxlbSA9IGRvY3VtZW50LmJvZHksXG59OiB7XG4gIGFuY2hvckVsZW0/OiBIVE1MRWxlbWVudFxufSk6IFJlYWN0LlJlYWN0RWxlbWVudCB7XG4gIGNvbnN0IFtlZGl0b3JdID0gdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCgpXG4gIHJldHVybiB1c2VEcmFnZ2FibGVCbG9ja01lbnUoZWRpdG9yLCBhbmNob3JFbGVtLCBlZGl0b3IuX2VkaXRhYmxlKVxufVxuIiwiJ3VzZSBjbGllbnQnXG5pbXBvcnQgeyBnZXRDb2xsYXBzZWRNYXJnaW5zIH0gZnJvbSAnLi4vdXRpbHMvZ2V0Q29sbGFwc2VkTWFyZ2lucy5qcydcbmNvbnN0IFRBUkdFVF9MSU5FX0hBTEZfSEVJR0hUID0gMFxuY29uc3QgVEVYVF9CT1hfSE9SSVpPTlRBTF9QQURESU5HID0gLTI0XG5jb25zdCBERUJVRyA9IGZhbHNlXG5cbmxldCBhbmltYXRpb25UaW1lciA9IDBcblxuZXhwb3J0IGZ1bmN0aW9uIHNldFRhcmdldExpbmUoXG4gIG9mZnNldFdpZHRoOiBzdHJpbmcsXG4gIG9mZnNldExlZnQ6IG51bWJlcixcbiAgdGFyZ2V0TGluZUVsZW06IEhUTUxFbGVtZW50LFxuICB0YXJnZXRCbG9ja0VsZW06IEhUTUxFbGVtZW50LFxuICBsYXN0VGFyZ2V0QmxvY2s6IHtcbiAgICBib3VuZGluZ0JveD86IERPTVJlY3RcbiAgICBlbGVtOiBIVE1MRWxlbWVudCB8IG51bGxcbiAgICBpc0JlbG93OiBib29sZWFuXG4gIH0sXG4gIG1vdXNlWTogbnVtYmVyLFxuICBhbmNob3JFbGVtOiBIVE1MRWxlbWVudCxcbiAgZXZlbnQ6IERyYWdFdmVudCxcbiAgZGVidWdIaWdobGlnaHRSZWY6IFJlYWN0LlJlZk9iamVjdDxIVE1MRGl2RWxlbWVudCB8IG51bGw+LFxuICBpc0ZvdW5kTm9kZUVtcHR5UGFyYWdyYXBoOiBib29sZWFuID0gZmFsc2UsXG4pIHtcbiAgY29uc3QgeyBoZWlnaHQ6IHRhcmdldEJsb2NrRWxlbUhlaWdodCwgdG9wOiB0YXJnZXRCbG9ja0VsZW1Ub3AgfSA9XG4gICAgdGFyZ2V0QmxvY2tFbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIC8vIHVzZWQgdG8gYmUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0V2l0aG91dFRyYW5zZm9ybS4gTm90IHN1cmUgd2hhdCdzIGJldHRlciwgYnV0IHRoZSBub3JtYWwgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IHNlZW1zIHRvIHdvcmsgZmluZVxuICBjb25zdCB7IHRvcDogYW5jaG9yVG9wLCB3aWR0aDogYW5jaG9yV2lkdGggfSA9IGFuY2hvckVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICBjb25zdCB7IG1hcmdpbkJvdHRvbSwgbWFyZ2luVG9wIH0gPSBnZXRDb2xsYXBzZWRNYXJnaW5zKHRhcmdldEJsb2NrRWxlbSlcbiAgbGV0IGxpbmVUb3AgPSB0YXJnZXRCbG9ja0VsZW1Ub3BcblxuICBjb25zdCBpc0JlbG93ID0gbW91c2VZID49IHRhcmdldEJsb2NrRWxlbVRvcCArIHRhcmdldEJsb2NrRWxlbUhlaWdodCAvIDIgKyB3aW5kb3cuc2Nyb2xsWVxuXG4gIGxldCB3aWxsU3RheUluU2FtZVBvc2l0aW9uID0gZmFsc2VcblxuICAvKipcbiAgICogRG8gbm90IHJ1biBhbnkgdHJhbnNmb3JtIG9yIGNoYW5nZXMgaWYgdGhlIGFjdHVhbCBuZXcgbGluZSBwb3NpdGlvbiB3b3VsZCBiZSB0aGUgc2FtZSAoZXZlbiBpZiBpdCdzIG5vdyBpbnNlcnRlZCBCRUZPUkUgcmF0aGVyIHRoYW4gQUZURVIgLSBwb3NpdGlvbiB3b3VsZCBzdGlsbCBiZSB0aGUgc2FtZSlcbiAgICogVGhpcyBwcmV2ZW50cyB1bm5lY2Vzc2FyeSBmbGlja2VyaW5nLlxuICAgKlxuICAgKiBXZSBzdGlsbCBuZWVkIHRvIGxldCBpdCBydW4gZXZlbiBpZiB0aGUgcG9zaXRpb24gKElHTk9SSU5HIHRoZSB0cmFuc2Zvcm0pIHdvdWxkIG5vdCBjaGFuZ2UsIGFzIHRoZSB0cmFuc2Zvcm0gYW5pbWF0aW9uIGlzIG5vdCBmaW5pc2hlZCB5ZXQuIFRoaXMgaXMgd2hhdCBhbmltYXRpb25UaW1lciBkb2VzLiBPdGhlcndpc2UsIHRoZSBwb3NpdGlvbmluZyB3aWxsIGJlIGluYWNjdXJhdGVcbiAgICovXG4gIGlmIChsYXN0VGFyZ2V0QmxvY2s/LmVsZW0pIHtcbiAgICBpZiAodGFyZ2V0QmxvY2tFbGVtICE9PSBsYXN0VGFyZ2V0QmxvY2s/LmVsZW0pIHtcbiAgICAgIGlmIChcbiAgICAgICAgaXNCZWxvdyAmJlxuICAgICAgICBsYXN0VGFyZ2V0QmxvY2s/LmVsZW0gJiZcbiAgICAgICAgbGFzdFRhcmdldEJsb2NrPy5lbGVtID09PSB0YXJnZXRCbG9ja0VsZW0ubmV4dEVsZW1lbnRTaWJsaW5nXG4gICAgICApIHtcbiAgICAgICAgYW5pbWF0aW9uVGltZXIrK1xuXG4gICAgICAgIGlmIChhbmltYXRpb25UaW1lciA8IDIwMCkge1xuICAgICAgICAgIHdpbGxTdGF5SW5TYW1lUG9zaXRpb24gPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICFpc0JlbG93ICYmXG4gICAgICAgIGxhc3RUYXJnZXRCbG9jaz8uZWxlbSAmJlxuICAgICAgICBsYXN0VGFyZ2V0QmxvY2s/LmVsZW0gPT09IHRhcmdldEJsb2NrRWxlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXG4gICAgICApIHtcbiAgICAgICAgYW5pbWF0aW9uVGltZXIrK1xuICAgICAgICBpZiAoYW5pbWF0aW9uVGltZXIgPCAyMDApIHtcbiAgICAgICAgICB3aWxsU3RheUluU2FtZVBvc2l0aW9uID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGFuaW1hdGlvblRpbWVyKytcblxuICAgICAgY29uc3QgbGFzdEJvdW5kaW5nQm94UG9zaXRpb24gPSBsYXN0VGFyZ2V0QmxvY2s/LmJvdW5kaW5nQm94Py55XG4gICAgICBjb25zdCBjdXJyZW50Qm91bmRpbmdCb3hQb3NpdGlvbiA9IHRhcmdldEJsb2NrRWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55XG5cbiAgICAgIGlmIChcbiAgICAgICAgKGlzQmVsb3cgPT09IGxhc3RUYXJnZXRCbG9jaz8uaXNCZWxvdyAmJlxuICAgICAgICAgIGxhc3RCb3VuZGluZ0JveFBvc2l0aW9uID09PSBjdXJyZW50Qm91bmRpbmdCb3hQb3NpdGlvbikgfHxcbiAgICAgICAgYW5pbWF0aW9uVGltZXIgPCAyMDBcbiAgICAgICkge1xuICAgICAgICB3aWxsU3RheUluU2FtZVBvc2l0aW9uID0gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHdpbGxTdGF5SW5TYW1lUG9zaXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNCZWxvdyxcbiAgICAgIHdpbGxTdGF5SW5TYW1lUG9zaXRpb24sXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFBhcmFncmFwaHMgbmVlZCBubyBpc0JlbG93L2Fib3ZlIGhhbmRsaW5nLFxuICAgKi9cbiAgaWYgKCFpc0ZvdW5kTm9kZUVtcHR5UGFyYWdyYXBoKSB7XG4gICAgLy9pZiAoIWlzRm91bmROb2RlRW1wdHlQYXJhZ3JhcGgpIHtcbiAgICBpZiAoaXNCZWxvdykge1xuICAgICAgLy8gYmVsb3cgdGFyZ2V0QmxvY2tFbGVtXG4gICAgICBsaW5lVG9wICs9IHRhcmdldEJsb2NrRWxlbUhlaWdodCArIG1hcmdpbkJvdHRvbSAvIDJcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYWJvdmUgdGFyZ2V0QmxvY2tFbGVtXG4gICAgICBsaW5lVG9wIC09IG1hcmdpblRvcCAvIDJcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGluZVRvcCArPSB0YXJnZXRCbG9ja0VsZW1IZWlnaHQgLyAyXG4gIH1cblxuICBsZXQgdGFyZ2V0RWxlbVRyYW5zbGF0ZTIgPSAwXG5cbiAgaWYgKCFpc0ZvdW5kTm9kZUVtcHR5UGFyYWdyYXBoKSB7XG4gICAgaWYgKGlzQmVsb3cpIHtcbiAgICAgIHRhcmdldEVsZW1UcmFuc2xhdGUyID0gLVRBUkdFVF9MSU5FX0hBTEZfSEVJR0hUXG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldEVsZW1UcmFuc2xhdGUyID0gVEFSR0VUX0xJTkVfSEFMRl9IRUlHSFRcbiAgICB9XG4gIH1cblxuICBjb25zdCB0b3AgPSBsaW5lVG9wIC0gYW5jaG9yVG9wICsgdGFyZ2V0RWxlbVRyYW5zbGF0ZTJcblxuICBjb25zdCBsZWZ0ID0gVEVYVF9CT1hfSE9SSVpPTlRBTF9QQURESU5HIC0gb2Zmc2V0TGVmdFxuXG4gIHRhcmdldExpbmVFbGVtLnN0eWxlLndpZHRoID0gYGNhbGMoJHthbmNob3JXaWR0aH1weCAtICR7b2Zmc2V0V2lkdGh9KWBcbiAgdGFyZ2V0TGluZUVsZW0uc3R5bGUub3BhY2l0eSA9ICcuOCdcblxuICAvLyBpZiAoREVCVUcpIHtcbiAgLy8gICAvL3RhcmdldEJsb2NrRWxlbS5zdHlsZS5ib3JkZXIgPSAnM3B4IHNvbGlkIHJlZCdcbiAgLy8gICBoaWdobGlnaHRFbGVtT3JpZ2luYWxQb3NpdGlvbihkZWJ1Z0hpZ2hsaWdodFJlZiwgdGFyZ2V0QmxvY2tFbGVtLCBhbmNob3JFbGVtKVxuICAvLyB9XG5cbiAgdGFyZ2V0TGluZUVsZW0uc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke2xlZnR9cHgsIGNhbGMoJHt0b3B9cHggLSAkeycycHgnfSkpYFxuXG4gIC8qKlxuICAgKiBQcm9wZXJseSByZXNldCBwcmV2aW91cyB0YXJnZXRCbG9ja0VsZW0gc3R5bGVzXG4gICAqL1xuICBpZiAobGFzdFRhcmdldEJsb2NrPy5lbGVtKSB7XG4gICAgbGFzdFRhcmdldEJsb2NrLmVsZW0uc3R5bGUub3BhY2l0eSA9ICcnXG5cbiAgICBpZiAobGFzdFRhcmdldEJsb2NrPy5lbGVtID09PSB0YXJnZXRCbG9ja0VsZW0pIHtcbiAgICAgIGlmIChpc0JlbG93KSB7XG4gICAgICAgIGxhc3RUYXJnZXRCbG9jay5lbGVtLnN0eWxlLm1hcmdpblRvcCA9ICcnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsYXN0VGFyZ2V0QmxvY2suZWxlbS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnJ1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0VGFyZ2V0QmxvY2suZWxlbS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnJ1xuICAgICAgbGFzdFRhcmdldEJsb2NrLmVsZW0uc3R5bGUubWFyZ2luVG9wID0gJydcbiAgICB9XG4gIH1cblxuICBhbmltYXRpb25UaW1lciA9IDBcbiAgcmV0dXJuIHtcbiAgICBpc0JlbG93LFxuICAgIHdpbGxTdGF5SW5TYW1lUG9zaXRpb24sXG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L2NsaWNrLWV2ZW50cy1oYXZlLWtleS1ldmVudHMgKi9cbid1c2UgY2xpZW50J1xuXG5pbXBvcnQgeyB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0IH0gZnJvbSAnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCdcbmltcG9ydCB7ICRjcmVhdGVQYXJhZ3JhcGhOb2RlLCAkZ2V0Um9vdCB9IGZyb20gJ2xleGljYWwnXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCAnLi9pbmRleC5zY3NzJ1xuaW1wb3J0IHsgdXNlRWRpdG9yQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbmZpZy9jbGllbnQvRWRpdG9yQ29uZmlnUHJvdmlkZXIuanMnXG5jb25zdCBiYXNlQ2xhc3MgPSAnaW5zZXJ0LXBhcmFncmFwaC1hdC1lbmQnXG5cbmV4cG9ydCBjb25zdCBJbnNlcnRQYXJhZ3JhcGhBdEVuZFBsdWdpbjogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IFtlZGl0b3JdID0gdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCgpXG4gIGNvbnN0IHsgZWRpdG9yQ29uZmlnIH0gPSB1c2VFZGl0b3JDb25maWdDb250ZXh0KClcblxuICBpZiAoZWRpdG9yQ29uZmlnPy5hZG1pbj8uaGlkZUluc2VydFBhcmFncmFwaEF0RW5kKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGNvbnN0IG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgZWRpdG9yLnVwZGF0ZSgoKSA9PiB7XG4gICAgICBjb25zdCBwYXJhZ3JhcGhOb2RlID0gJGNyZWF0ZVBhcmFncmFwaE5vZGUoKVxuICAgICAgJGdldFJvb3QoKS5hcHBlbmQocGFyYWdyYXBoTm9kZSlcbiAgICAgIHBhcmFncmFwaE5vZGUuc2VsZWN0KClcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICAvLyBUT0RPOiBjb252ZXJ0IHRvIGJ1dHRvblxuICAgIDxkaXZcbiAgICAgIGFyaWEtbGFiZWw9XCJJbnNlcnQgUGFyYWdyYXBoXCJcbiAgICAgIGNsYXNzTmFtZT17YmFzZUNsYXNzfVxuICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgdGFiSW5kZXg9ezB9XG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc30taW5zaWRlYH0+XG4gICAgICAgIDxzcGFuPis8L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiJ3VzZSBjbGllbnQnXG5cbmltcG9ydCB7IHVzZUxleGljYWxDb21wb3NlckNvbnRleHQgfSBmcm9tICdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXJDb250ZXh0J1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IHJlZ2lzdGVyTWFya2Rvd25TaG9ydGN1dHMgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9AbGV4aWNhbC9tYXJrZG93bi9NYXJrZG93blNob3J0Y3V0cy5qcydcbmltcG9ydCB7IHVzZUVkaXRvckNvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi8uLi9jb25maWcvY2xpZW50L0VkaXRvckNvbmZpZ1Byb3ZpZGVyLmpzJ1xuXG5leHBvcnQgY29uc3QgTWFya2Rvd25TaG9ydGN1dFBsdWdpbjogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IHsgZWRpdG9yQ29uZmlnIH0gPSB1c2VFZGl0b3JDb25maWdDb250ZXh0KClcbiAgY29uc3QgW2VkaXRvcl0gPSB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KClcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiByZWdpc3Rlck1hcmtkb3duU2hvcnRjdXRzKGVkaXRvciwgZWRpdG9yQ29uZmlnLmZlYXR1cmVzLm1hcmtkb3duVHJhbnNmb3JtZXJzID8/IFtdKVxuICB9LCBbZWRpdG9yLCBlZGl0b3JDb25maWcuZmVhdHVyZXMubWFya2Rvd25UcmFuc2Zvcm1lcnNdKVxuXG4gIHJldHVybiBudWxsXG59XG4iLCJpbXBvcnQgeyB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0IH0gZnJvbSAnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCdcbmltcG9ydCB7ICRnZXRTZWxlY3Rpb24sICRpc1JhbmdlU2VsZWN0aW9uLCBSb290Tm9kZSB9IGZyb20gJ2xleGljYWwnXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcblxuLyoqXG4gKiBCeSBkZWZhdWx0LCBMZXhpY2FsIHRocm93cyBhbiBlcnJvciBpZiB0aGUgc2VsZWN0aW9uIGVuZHMgaW4gZGVsZXRlZCBub2Rlcy5cbiAqIFRoaXMgaXMgdmVyeSBhZ2dyZXNzaXZlIGNvbnNpZGVyaW5nIHRoZXJlIGFyZSByZWFzb25zIHdoeSB0aGlzIGNhbiBoYXBwZW5cbiAqIG91dHNpZGUgb2YgUGF5bG9hZCdzIGNvbnRyb2wgKGN1c3RvbSBmZWF0dXJlcyBvciBjb25mbGljdGluZyBmZWF0dXJlcywgZm9yIGV4YW1wbGUpLlxuICogSW4gdGhlIGNhc2Ugb2Ygc2VsZWN0aW9ucyBvbiBub25leGlzdGVudCBub2RlcywgdGhpcyBwbHVnaW4gbW92ZXMgdGhlIHNlbGVjdGlvbiB0b1xuICogdGhlIGVuZCBvZiB0aGUgZWRpdG9yIGFuZCBkaXNwbGF5cyBhIHdhcm5pbmcgaW5zdGVhZCBvZiBhbiBlcnJvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE5vcm1hbGl6ZVNlbGVjdGlvblBsdWdpbigpIHtcbiAgY29uc3QgW2VkaXRvcl0gPSB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiBlZGl0b3IucmVnaXN0ZXJOb2RlVHJhbnNmb3JtKFJvb3ROb2RlLCAocm9vdCkgPT4ge1xuICAgICAgY29uc3Qgc2VsZWN0aW9uID0gJGdldFNlbGVjdGlvbigpXG4gICAgICBpZiAoJGlzUmFuZ2VTZWxlY3Rpb24oc2VsZWN0aW9uKSkge1xuICAgICAgICBjb25zdCBhbmNob3JOb2RlID0gc2VsZWN0aW9uLmFuY2hvci5nZXROb2RlKClcbiAgICAgICAgY29uc3QgZm9jdXNOb2RlID0gc2VsZWN0aW9uLmZvY3VzLmdldE5vZGUoKVxuICAgICAgICBpZiAoIWFuY2hvck5vZGUuaXNBdHRhY2hlZCgpIHx8ICFmb2N1c05vZGUuaXNBdHRhY2hlZCgpKSB7XG4gICAgICAgICAgcm9vdC5zZWxlY3RFbmQoKVxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgJ3VwZGF0ZUVkaXRvcjogc2VsZWN0aW9uIGhhcyBiZWVuIG1vdmVkIHRvIHRoZSBlbmQgb2YgdGhlIGVkaXRvciBiZWNhdXNlIHRoZSBwcmV2aW91c2x5IHNlbGVjdGVkIG5vZGVzIGhhdmUgYmVlbiByZW1vdmVkIGFuZCAnICtcbiAgICAgICAgICAgICAgXCJzZWxlY3Rpb24gd2Fzbid0IG1vdmVkIHRvIGFub3RoZXIgbm9kZS4gRW5zdXJlIHNlbGVjdGlvbiBjaGFuZ2VzIGFmdGVyIHJlbW92aW5nL3JlcGxhY2luZyBhIHNlbGVjdGVkIG5vZGUuXCIsXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9KVxuICB9LCBbZWRpdG9yXSlcblxuICByZXR1cm4gbnVsbFxufVxuIiwiJ3VzZSBjbGllbnQnXG5pbXBvcnQgeyB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0IH0gZnJvbSAnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dC5qcydcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAnQHBheWxvYWRjbXMvdWknXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJ1xuXG5pbXBvcnQgdHlwZSB7XG4gIFNsYXNoTWVudUdyb3VwLFxuICBTbGFzaE1lbnVHcm91cEludGVybmFsLFxuICBTbGFzaE1lbnVJdGVtSW50ZXJuYWwsXG4gIFNsYXNoTWVudUl0ZW0gYXMgU2xhc2hNZW51SXRlbVR5cGUsXG59IGZyb20gJy4vTGV4aWNhbFR5cGVhaGVhZE1lbnVQbHVnaW4vdHlwZXMuanMnXG5cbmltcG9ydCB7IHVzZUVkaXRvckNvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi8uLi9jb25maWcvY2xpZW50L0VkaXRvckNvbmZpZ1Byb3ZpZGVyLmpzJ1xuaW1wb3J0ICcuL2luZGV4LnNjc3MnXG5pbXBvcnQgeyBMZXhpY2FsVHlwZWFoZWFkTWVudVBsdWdpbiB9IGZyb20gJy4vTGV4aWNhbFR5cGVhaGVhZE1lbnVQbHVnaW4vaW5kZXguanMnXG5pbXBvcnQgeyB1c2VNZW51VHJpZ2dlck1hdGNoIH0gZnJvbSAnLi91c2VNZW51VHJpZ2dlck1hdGNoLmpzJ1xuXG5jb25zdCBiYXNlQ2xhc3MgPSAnc2xhc2gtbWVudS1wb3B1cCdcblxuZnVuY3Rpb24gU2xhc2hNZW51SXRlbSh7XG4gIGlzU2VsZWN0ZWQsXG4gIGl0ZW0sXG4gIG9uQ2xpY2ssXG4gIG9uTW91c2VFbnRlcixcbiAgcmVmLFxufToge1xuICBpbmRleDogbnVtYmVyXG4gIGlzU2VsZWN0ZWQ6IGJvb2xlYW5cbiAgaXRlbTogU2xhc2hNZW51SXRlbUludGVybmFsXG4gIG9uQ2xpY2s6ICgpID0+IHZvaWRcbiAgb25Nb3VzZUVudGVyOiAoKSA9PiB2b2lkXG4gIHJlZj86IFJlYWN0LlJlZjxIVE1MQnV0dG9uRWxlbWVudD5cbn0pIHtcbiAgY29uc3Qge1xuICAgIGZpZWxkUHJvcHM6IHsgZmVhdHVyZUNsaWVudFNjaGVtYU1hcCwgc2NoZW1hUGF0aCB9LFxuICB9ID0gdXNlRWRpdG9yQ29uZmlnQ29udGV4dCgpXG5cbiAgY29uc3QgeyBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbjx7fSwgc3RyaW5nPigpXG5cbiAgbGV0IGNsYXNzTmFtZSA9IGAke2Jhc2VDbGFzc31fX2l0ZW0gJHtiYXNlQ2xhc3N9X19pdGVtLSR7aXRlbS5rZXl9YFxuICBpZiAoaXNTZWxlY3RlZCkge1xuICAgIGNsYXNzTmFtZSArPSBgICR7YmFzZUNsYXNzfV9faXRlbS0tc2VsZWN0ZWRgXG4gIH1cblxuICBsZXQgdGl0bGUgPSBpdGVtLmtleVxuICBpZiAoaXRlbS5sYWJlbCkge1xuICAgIHRpdGxlID1cbiAgICAgIHR5cGVvZiBpdGVtLmxhYmVsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gaXRlbS5sYWJlbCh7IGZlYXR1cmVDbGllbnRTY2hlbWFNYXAsIGkxOG4sIHNjaGVtYVBhdGggfSlcbiAgICAgICAgOiBpdGVtLmxhYmVsXG4gIH1cbiAgLy8gQ3JvcCB0aXRsZSB0byBtYXguIDI1IGNoYXJhY3RlcnNcbiAgaWYgKHRpdGxlLmxlbmd0aCA+IDI1KSB7XG4gICAgdGl0bGUgPSB0aXRsZS5zdWJzdHJpbmcoMCwgMjUpICsgJy4uLidcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgYXJpYS1zZWxlY3RlZD17aXNTZWxlY3RlZH1cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgaWQ9e2Jhc2VDbGFzcyArICdfX2l0ZW0tJyArIGl0ZW0ua2V5fVxuICAgICAga2V5PXtpdGVtLmtleX1cbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICBvbk1vdXNlRW50ZXI9e29uTW91c2VFbnRlcn1cbiAgICAgIHJlZj17cmVmfVxuICAgICAgcm9sZT1cIm9wdGlvblwiXG4gICAgICB0YWJJbmRleD17LTF9XG4gICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICA+XG4gICAgICB7aXRlbT8uSWNvbiAmJiA8aXRlbS5JY29uIC8+fVxuXG4gICAgICA8c3BhbiBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX2l0ZW0tdGV4dGB9Pnt0aXRsZX08L3NwYW4+XG4gICAgPC9idXR0b24+XG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNsYXNoTWVudVBsdWdpbih7XG4gIGFuY2hvckVsZW0gPSBkb2N1bWVudC5ib2R5LFxufToge1xuICBhbmNob3JFbGVtPzogSFRNTEVsZW1lbnRcbn0pOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICBjb25zdCBbZWRpdG9yXSA9IHVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKVxuICBjb25zdCBbcXVlcnlTdHJpbmcsIHNldFF1ZXJ5U3RyaW5nXSA9IHVzZVN0YXRlPG51bGwgfCBzdHJpbmc+KG51bGwpXG4gIGNvbnN0IHsgZWRpdG9yQ29uZmlnIH0gPSB1c2VFZGl0b3JDb25maWdDb250ZXh0KClcbiAgY29uc3QgeyBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbjx7fSwgc3RyaW5nPigpXG4gIGNvbnN0IHtcbiAgICBmaWVsZFByb3BzOiB7IGZlYXR1cmVDbGllbnRTY2hlbWFNYXAsIHNjaGVtYVBhdGggfSxcbiAgfSA9IHVzZUVkaXRvckNvbmZpZ0NvbnRleHQoKVxuXG4gIGNvbnN0IGNoZWNrRm9yVHJpZ2dlck1hdGNoID0gdXNlTWVudVRyaWdnZXJNYXRjaCgnLycsIHtcbiAgICBtaW5MZW5ndGg6IDAsXG4gIH0pXG5cbiAgY29uc3QgZ2V0RHluYW1pY0l0ZW1zID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGxldCBncm91cFdpdGhJdGVtczogQXJyYXk8U2xhc2hNZW51R3JvdXA+ID0gW11cblxuICAgIGZvciAoY29uc3QgZHluYW1pY0l0ZW0gb2YgZWRpdG9yQ29uZmlnLmZlYXR1cmVzLnNsYXNoTWVudS5keW5hbWljR3JvdXBzKSB7XG4gICAgICBpZiAocXVlcnlTdHJpbmcpIHtcbiAgICAgICAgY29uc3QgZHluYW1pY0dyb3VwV2l0aEl0ZW1zID0gZHluYW1pY0l0ZW0oe1xuICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICBxdWVyeVN0cmluZyxcbiAgICAgICAgfSlcbiAgICAgICAgZ3JvdXBXaXRoSXRlbXMgPSBncm91cFdpdGhJdGVtcy5jb25jYXQoZHluYW1pY0dyb3VwV2l0aEl0ZW1zKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBncm91cFdpdGhJdGVtc1xuICB9LCBbZWRpdG9yLCBxdWVyeVN0cmluZywgZWRpdG9yQ29uZmlnPy5mZWF0dXJlc10pXG5cbiAgY29uc3QgZ3JvdXBzOiBTbGFzaE1lbnVHcm91cFtdID0gdXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IGdyb3Vwc1dpdGhJdGVtczogU2xhc2hNZW51R3JvdXBbXSA9IFtdXG4gICAgZm9yIChjb25zdCBncm91cFdpdGhJdGVtIG9mIGVkaXRvckNvbmZpZz8uZmVhdHVyZXMuc2xhc2hNZW51Lmdyb3VwcyA/PyBbXSkge1xuICAgICAgZ3JvdXBzV2l0aEl0ZW1zLnB1c2goZ3JvdXBXaXRoSXRlbSlcbiAgICB9XG5cbiAgICBpZiAocXVlcnlTdHJpbmcpIHtcbiAgICAgIC8vIEZpbHRlciBjdXJyZW50IGdyb3VwcyBmaXJzdFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRPRE86IGZpeCB0aGlzXG4gICAgICBncm91cHNXaXRoSXRlbXMgPSBncm91cHNXaXRoSXRlbXMubWFwKChncm91cCkgPT4ge1xuICAgICAgICBjb25zdCBmaWx0ZXJlZEl0ZW1zID0gZ3JvdXAuaXRlbXMuZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgICAgICAgbGV0IGl0ZW1UaXRsZSA9IGl0ZW0ua2V5XG4gICAgICAgICAgaWYgKGl0ZW0ubGFiZWwpIHtcbiAgICAgICAgICAgIGl0ZW1UaXRsZSA9XG4gICAgICAgICAgICAgIHR5cGVvZiBpdGVtLmxhYmVsID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgPyBpdGVtLmxhYmVsKHsgZmVhdHVyZUNsaWVudFNjaGVtYU1hcCwgaTE4biwgc2NoZW1hUGF0aCB9KVxuICAgICAgICAgICAgICAgIDogaXRlbS5sYWJlbFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChuZXcgUmVnRXhwKHF1ZXJ5U3RyaW5nLCAnZ2knKS5leGVjKGl0ZW1UaXRsZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVtLmtleXdvcmRzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLmtleXdvcmRzLnNvbWUoKGtleXdvcmQpID0+IG5ldyBSZWdFeHAocXVlcnlTdHJpbmcsICdnaScpLmV4ZWMoa2V5d29yZCkpXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9KVxuICAgICAgICBpZiAoZmlsdGVyZWRJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uZ3JvdXAsXG4gICAgICAgICAgICBpdGVtczogZmlsdGVyZWRJdGVtcyxcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH0pXG5cbiAgICAgIGdyb3Vwc1dpdGhJdGVtcyA9IGdyb3Vwc1dpdGhJdGVtcy5maWx0ZXIoKGdyb3VwKSA9PiBncm91cCAhPSBudWxsKVxuXG4gICAgICAvLyBOb3cgYWRkIGR5bmFtaWMgZ3JvdXBzXG4gICAgICBjb25zdCBkeW5hbWljSXRlbUdyb3VwcyA9IGdldER5bmFtaWNJdGVtcygpXG5cbiAgICAgIC8vIG1lcmdlIGR5bmFtaWMgaXRlbXMgaW50byBncm91cHNcbiAgICAgIGZvciAoY29uc3QgZHluYW1pY0dyb3VwIG9mIGR5bmFtaWNJdGVtR3JvdXBzKSB7XG4gICAgICAgIC8vIDEuIGZpbmQgdGhlIGdyb3VwIHdpdGggdGhlIHNhbWUgbmFtZSBvciBjcmVhdGUgbmV3IG9uZVxuICAgICAgICBsZXQgZ3JvdXAgPSBncm91cHNXaXRoSXRlbXMuZmluZCgoZ3JvdXApID0+IGdyb3VwLmtleSA9PT0gZHluYW1pY0dyb3VwLmtleSlcbiAgICAgICAgaWYgKCFncm91cCkge1xuICAgICAgICAgIGdyb3VwID0ge1xuICAgICAgICAgICAgLi4uZHluYW1pY0dyb3VwLFxuICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBncm91cHNXaXRoSXRlbXMgPSBncm91cHNXaXRoSXRlbXMuZmlsdGVyKChncm91cCkgPT4gZ3JvdXAua2V5ICE9PSBkeW5hbWljR3JvdXAua2V5KVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gMi4gQWRkIGl0ZW1zIHRvIGdyb3VwIGl0ZW1zIGFycmF5IGFuZCBhZGQgdG8gc2FuaXRpemVkLnNsYXNoTWVudS5ncm91cHNXaXRoSXRlbXNcbiAgICAgICAgaWYgKGdyb3VwPy5pdGVtcz8ubGVuZ3RoKSB7XG4gICAgICAgICAgZ3JvdXAuaXRlbXMgPSBncm91cC5pdGVtcy5jb25jYXQoZ3JvdXAuaXRlbXMpXG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBzV2l0aEl0ZW1zLnB1c2goZ3JvdXApXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGdyb3Vwc1dpdGhJdGVtc1xuICB9LCBbXG4gICAgcXVlcnlTdHJpbmcsXG4gICAgZWRpdG9yQ29uZmlnPy5mZWF0dXJlcy5zbGFzaE1lbnUuZ3JvdXBzLFxuICAgIGdldER5bmFtaWNJdGVtcyxcbiAgICBmZWF0dXJlQ2xpZW50U2NoZW1hTWFwLFxuICAgIGkxOG4sXG4gICAgc2NoZW1hUGF0aCxcbiAgXSlcblxuICByZXR1cm4gKFxuICAgIDxMZXhpY2FsVHlwZWFoZWFkTWVudVBsdWdpblxuICAgICAgYW5jaG9yRWxlbT17YW5jaG9yRWxlbX1cbiAgICAgIGdyb3Vwcz17Z3JvdXBzIGFzIFNsYXNoTWVudUdyb3VwSW50ZXJuYWxbXX1cbiAgICAgIG1lbnVSZW5kZXJGbj17KFxuICAgICAgICBhbmNob3JFbGVtZW50UmVmLFxuICAgICAgICB7IHNlbGVjdGVkSXRlbUtleSwgc2VsZWN0SXRlbUFuZENsZWFuVXAsIHNldFNlbGVjdGVkSXRlbUtleSB9LFxuICAgICAgKSA9PlxuICAgICAgICBhbmNob3JFbGVtZW50UmVmLmN1cnJlbnQgJiYgZ3JvdXBzLmxlbmd0aFxuICAgICAgICAgID8gUmVhY3RET00uY3JlYXRlUG9ydGFsKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YmFzZUNsYXNzfT5cbiAgICAgICAgICAgICAgICB7Z3JvdXBzLm1hcCgoZ3JvdXApID0+IHtcbiAgICAgICAgICAgICAgICAgIGxldCBncm91cFRpdGxlID0gZ3JvdXAua2V5XG4gICAgICAgICAgICAgICAgICBpZiAoZ3JvdXAubGFiZWwgJiYgZmVhdHVyZUNsaWVudFNjaGVtYU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBncm91cFRpdGxlID1cbiAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZ3JvdXAubGFiZWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZ3JvdXAubGFiZWwoeyBmZWF0dXJlQ2xpZW50U2NoZW1hTWFwLCBpMThuLCBzY2hlbWFQYXRoIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGdyb3VwLmxhYmVsXG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX2dyb3VwICR7YmFzZUNsYXNzfV9fZ3JvdXAtJHtncm91cC5rZXl9YH1cbiAgICAgICAgICAgICAgICAgICAgICBrZXk9e2dyb3VwLmtleX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19ncm91cC10aXRsZWB9Pntncm91cFRpdGxlfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIHtncm91cC5pdGVtcy5tYXAoKGl0ZW0sIG9pOiBudW1iZXIpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxTbGFzaE1lbnVJdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4PXtvaX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3RlZD17c2VsZWN0ZWRJdGVtS2V5ID09PSBpdGVtLmtleX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbT17aXRlbSBhcyBTbGFzaE1lbnVJdGVtSW50ZXJuYWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17aXRlbS5rZXl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRTZWxlY3RlZEl0ZW1LZXkoaXRlbS5rZXkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0SXRlbUFuZENsZWFuVXAoaXRlbSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0U2VsZWN0ZWRJdGVtS2V5KGl0ZW0ua2V5KVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9eyhlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDsoaXRlbSBhcyBTbGFzaE1lbnVJdGVtSW50ZXJuYWwpLnJlZiA9IHsgY3VycmVudDogZWwgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgIDwvZGl2PixcbiAgICAgICAgICAgICAgYW5jaG9yRWxlbWVudFJlZi5jdXJyZW50LFxuICAgICAgICAgICAgKVxuICAgICAgICAgIDogbnVsbFxuICAgICAgfVxuICAgICAgb25RdWVyeUNoYW5nZT17c2V0UXVlcnlTdHJpbmd9XG4gICAgICB0cmlnZ2VyRm49e2NoZWNrRm9yVHJpZ2dlck1hdGNofVxuICAgIC8+XG4gIClcbn1cbiIsIid1c2UgY2xpZW50J1xuaW1wb3J0IHR5cGUgeyBMZXhpY2FsRWRpdG9yIH0gZnJvbSAnbGV4aWNhbCdcblxuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgUFVOQ1RVQVRJT04gfSBmcm9tICcuL0xleGljYWxUeXBlYWhlYWRNZW51UGx1Z2luL2luZGV4LmpzJ1xuXG5leHBvcnQgdHlwZSBUcmlnZ2VyRm4gPSAoe1xuICBlZGl0b3IsXG4gIHF1ZXJ5LFxufToge1xuICBlZGl0b3I6IExleGljYWxFZGl0b3JcbiAgLyoqIFRoZSBxdWVyeSBzdHJpbmcgaXMgdGhlIFBPVEVOVElBTCB0cmlnZ2VyIEFORCB0aGUgdGV4dCBhZnRlciB0aGUgdHJpZ2dlciB0ZXh0LiAqL1xuICBxdWVyeTogc3RyaW5nXG59KSA9PiBNZW51VGV4dE1hdGNoIHwgbnVsbFxuXG5leHBvcnQgdHlwZSBNZW51VGV4dE1hdGNoID0ge1xuICBsZWFkT2Zmc2V0OiBudW1iZXJcbiAgbWF0Y2hpbmdTdHJpbmc6IHN0cmluZ1xuICByZXBsYWNlYWJsZVN0cmluZzogc3RyaW5nXG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGNoZWNrcyBpZiB0aGUgdHJpZ2dlciAoZS5nLiAnLycpIGlzIHByZXNlbnQgaW4gdGhlIHF1ZXJ5IGFuZCwgaWYgc28sIHJldHVybnMgdGhlIG1hdGNoaW5nIHN0cmluZyAodGV4dCBhZnRlciB0aGUgdHJpZ2dlcilcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU1lbnVUcmlnZ2VyTWF0Y2goXG4gIC8qKlxuICAgKiBUZXh0IHdoaWNoIHRyaWdnZXJzIHRoZSBtZW51LiBFdmVyeXRoaW5nIGFmdGVyIHRoaXMgdGV4dCB3aWxsIGJlIHVzZWQgYXMgdGhlIHF1ZXJ5LlxuICAgKi9cbiAgdHJpZ2dlcjogc3RyaW5nLFxuICB7IG1heExlbmd0aCA9IDc1LCBtaW5MZW5ndGggPSAxIH06IHsgbWF4TGVuZ3RoPzogbnVtYmVyOyBtaW5MZW5ndGg/OiBudW1iZXIgfSxcbik6IFRyaWdnZXJGbiB7XG4gIHJldHVybiB1c2VDYWxsYmFjayhcbiAgICAoeyBxdWVyeSB9KSA9PiB7XG4gICAgICBjb25zdCB2YWxpZENoYXJzID0gJ1teJyArIHRyaWdnZXIgKyBQVU5DVFVBVElPTiArICdcXFxcc10nXG4gICAgICBjb25zdCBUeXBlYWhlYWRUcmlnZ2VyUmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAnKF58XFxcXHN8XFxcXCgpKCcgK1xuICAgICAgICAgICdbJyArXG4gICAgICAgICAgdHJpZ2dlciArXG4gICAgICAgICAgJ10nICtcbiAgICAgICAgICAnKCg/OicgK1xuICAgICAgICAgIHZhbGlkQ2hhcnMgK1xuICAgICAgICAgICcpezAsJyArXG4gICAgICAgICAgbWF4TGVuZ3RoICtcbiAgICAgICAgICAnfSknICtcbiAgICAgICAgICAnKSQnLFxuICAgICAgKVxuICAgICAgY29uc3QgbWF0Y2ggPSBUeXBlYWhlYWRUcmlnZ2VyUmVnZXguZXhlYyhxdWVyeSlcbiAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtYXliZUxlYWRpbmdXaGl0ZXNwYWNlID0gbWF0Y2hbMV0hXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG1hdGNoaW5nU3RyaW5nIGlzIG9ubHkgdGhlIHRleHQgQUZURVIgdGhlIHRyaWdnZXIgdGV4dC4gKFNvIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIC8pXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBtYXRjaGluZ1N0cmluZyA9IG1hdGNoWzNdIVxuXG4gICAgICAgIGlmIChtYXRjaGluZ1N0cmluZy5sZW5ndGggPj0gbWluTGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlYWRPZmZzZXQ6IG1hdGNoLmluZGV4ICsgbWF5YmVMZWFkaW5nV2hpdGVzcGFjZS5sZW5ndGgsXG4gICAgICAgICAgICBtYXRjaGluZ1N0cmluZyxcbiAgICAgICAgICAgIHJlcGxhY2VhYmxlU3RyaW5nOiBtYXRjaFsyXSEsIC8vIHJlcGxhY2VhYmxlU3RyaW5nIGlzIHRoZSB0cmlnZ2VyIHRleHQgKyB0aGUgbWF0Y2hpbmcgc3RyaW5nXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0sXG4gICAgW21heExlbmd0aCwgbWluTGVuZ3RoLCB0cmlnZ2VyXSxcbiAgKVxufVxuIiwiJ3VzZSBjbGllbnQnXG5pbXBvcnQgdHlwZSB7IFRleHRGb3JtYXRUeXBlIH0gZnJvbSAnbGV4aWNhbCdcblxuaW1wb3J0IHsgdXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnXG5pbXBvcnQgeyBURVhUX1RZUEVfVE9fRk9STUFULCBUZXh0Tm9kZSB9IGZyb20gJ2xleGljYWwnXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHR5cGUgeyBTYW5pdGl6ZWRDbGllbnRGZWF0dXJlcyB9IGZyb20gJy4uLy4uLy4uL2ZlYXR1cmVzL3R5cGVzQ2xpZW50LmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gVGV4dFBsdWdpbih7IGZlYXR1cmVzIH06IHsgZmVhdHVyZXM6IFNhbml0aXplZENsaWVudEZlYXR1cmVzIH0pIHtcbiAgY29uc3QgW2VkaXRvcl0gPSB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGRpc2FibGVkRm9ybWF0cyA9IGdldERpc2FibGVkRm9ybWF0cyhmZWF0dXJlcy5lbmFibGVkRm9ybWF0cyBhcyBUZXh0Rm9ybWF0VHlwZVtdKVxuICAgIGlmIChkaXNhYmxlZEZvcm1hdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gSWRlYWxseSBvdmVycmlkZSB0aGUgVGV4dE5vZGUgd2l0aCBvdXIgb3duIFRleHROb2RlIChjaGFuZ2luZyBpdHMgc2V0Rm9ybWF0IG9yIHRvZ2dsZUZvcm1hdCBtZXRob2RzKSxcbiAgICAvLyB3b3VsZCBiZSBtb3JlIHBlcmZvcm1hbnQuIElmIHdlIGZpbmQgYSBub3RpY2VhYmxlIHBlcmYgcmVncmVzc2lvbiB3ZSBjYW4gc3dpdGNoIHRvIHRoYXQgb3B0aW9uLlxuICAgIC8vIE92ZXJyaWRpbmcgdGhlIEZPUk1BVF9URVhUX0NPTU1BTkQgYW5kIFBBU1RFX0NPTU1BTkQgY29tbWFuZHMgaXMgbm90IGFuIG9wdGlvbiBJIGNvbnNpZGVyZWQgYmVjYXVzZVxuICAgIC8vIHRoZXJlIG1pZ2h0IGJlIG90aGVyIGZvcm1zIG9mIG11dGF0aW9uIHRoYXQgd2UgbWlnaHQgbm90IGJlIGNvbnNpZGVyaW5nLiBGb3IgZXhhbXBsZTpcbiAgICAvLyBicm93c2VyIGV4dGVuc2lvbnMgb3IgUGF5bG9hZC9MZXhpY2FsIHBsdWdpbnMgdGhhdCBoYXZlIHRoZWlyIG93biBjb21tYW5kcy5cbiAgICByZXR1cm4gZWRpdG9yLnJlZ2lzdGVyTm9kZVRyYW5zZm9ybShUZXh0Tm9kZSwgKHRleHROb2RlKSA9PiB7XG4gICAgICBkaXNhYmxlZEZvcm1hdHMuZm9yRWFjaCgoZGlzYWJsZWRGb3JtYXQpID0+IHtcbiAgICAgICAgaWYgKHRleHROb2RlLmhhc0Zvcm1hdChkaXNhYmxlZEZvcm1hdCkpIHtcbiAgICAgICAgICB0ZXh0Tm9kZS50b2dnbGVGb3JtYXQoZGlzYWJsZWRGb3JtYXQpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfSwgW2VkaXRvciwgZmVhdHVyZXNdKVxuXG4gIHJldHVybiBudWxsXG59XG5cbmZ1bmN0aW9uIGdldERpc2FibGVkRm9ybWF0cyhlbmFibGVkRm9ybWF0czogVGV4dEZvcm1hdFR5cGVbXSk6IFRleHRGb3JtYXRUeXBlW10ge1xuICBjb25zdCBhbGxGb3JtYXRzID0gT2JqZWN0LmtleXMoVEVYVF9UWVBFX1RPX0ZPUk1BVCkgYXMgVGV4dEZvcm1hdFR5cGVbXVxuICBjb25zdCBlbmFibGVkU2V0ID0gbmV3IFNldChlbmFibGVkRm9ybWF0cylcblxuICByZXR1cm4gYWxsRm9ybWF0cy5maWx0ZXIoKGZvcm1hdCkgPT4gIWVuYWJsZWRTZXQuaGFzKGZvcm1hdCkpXG59XG4iLCIndXNlIGNsaWVudCdcbmltcG9ydCB0eXBlIHsgSlNYIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IENvbnRlbnRFZGl0YWJsZSB9IGZyb20gJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb250ZW50RWRpdGFibGUuanMnXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJ0BwYXlsb2FkY21zL3VpJ1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCAnLi9Db250ZW50RWRpdGFibGUuc2NzcydcbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkQ2xpZW50RWRpdG9yQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL3R5cGVzLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gTGV4aWNhbENvbnRlbnRFZGl0YWJsZSh7XG4gIGNsYXNzTmFtZSxcbiAgZWRpdG9yQ29uZmlnLFxufToge1xuICBjbGFzc05hbWU/OiBzdHJpbmdcbiAgZWRpdG9yQ29uZmlnOiBTYW5pdGl6ZWRDbGllbnRFZGl0b3JDb25maWdcbn0pOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb248e30sIHN0cmluZz4oKVxuXG4gIHJldHVybiAoXG4gICAgPENvbnRlbnRFZGl0YWJsZVxuICAgICAgYXJpYS1wbGFjZWhvbGRlcj17dCgnbGV4aWNhbDpnZW5lcmFsOnBsYWNlaG9sZGVyJyl9XG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZSA/PyAnQ29udGVudEVkaXRhYmxlX19yb290J31cbiAgICAgIHBsYWNlaG9sZGVyPXtcbiAgICAgICAgPHAgY2xhc3NOYW1lPVwiZWRpdG9yLXBsYWNlaG9sZGVyXCI+XG4gICAgICAgICAge2VkaXRvckNvbmZpZz8uYWRtaW4/LnBsYWNlaG9sZGVyID8/IHQoJ2xleGljYWw6Z2VuZXJhbDpwbGFjZWhvbGRlcicpfVxuICAgICAgICA8L3A+XG4gICAgICB9XG4gICAgLz5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIkZpZWxkRGVzY3JpcHRpb24iLCJGaWVsZEVycm9yIiwiRmllbGRMYWJlbCIsIlJlbmRlckN1c3RvbUNvbXBvbmVudCIsInVzZUVkaXREZXB0aCIsInVzZUVmZmVjdEV2ZW50IiwidXNlRmllbGQiLCJtZXJnZUZpZWxkU3R5bGVzIiwiUmVhY3QiLCJ1c2VDYWxsYmFjayIsInVzZUVmZmVjdCIsInVzZU1lbW8iLCJ1c2VTdGF0ZSIsIkVycm9yQm91bmRhcnkiLCJMZXhpY2FsQ29tcG9zZXIiLCJjIiwiX2MiLCJ1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0IiwiTGV4aWNhbEVycm9yQm91bmRhcnkiLCJIaXN0b3J5UGx1Z2luIiwiT25DaGFuZ2VQbHVnaW4iLCJSaWNoVGV4dFBsdWdpbiIsIkJMVVJfQ09NTUFORCIsIkNPTU1BTkRfUFJJT1JJVFlfTE9XIiwiRk9DVVNfQ09NTUFORCIsIkVkaXRvclBsdWdpbiIsImFuY2hvckVsZW0iLCJjbGllbnRQcm9wcyIsInBsdWdpbiIsInBvc2l0aW9uIiwiQ29tcG9uZW50IiwiX2pzeCIsIiRmaW5kTWF0Y2hpbmdQYXJlbnQiLCJtZXJnZVJlZ2lzdGVyIiwiJGNyZWF0ZU5vZGVTZWxlY3Rpb24iLCIkZ2V0RWRpdG9yIiwiJGdldE5lYXJlc3ROb2RlRnJvbURPTU5vZGUiLCIkZ2V0U2VsZWN0aW9uIiwiJGlzRGVjb3JhdG9yTm9kZSIsIiRpc0VsZW1lbnROb2RlIiwiJGlzTGluZUJyZWFrTm9kZSIsIiRpc05vZGVTZWxlY3Rpb24iLCIkaXNSYW5nZVNlbGVjdGlvbiIsIiRpc1Jvb3RPclNoYWRvd1Jvb3QiLCIkaXNUZXh0Tm9kZSIsIiRzZXRTZWxlY3Rpb24iLCJDTElDS19DT01NQU5EIiwiS0VZX0FSUk9XX0RPV05fQ09NTUFORCIsIktFWV9BUlJPV19VUF9DT01NQU5EIiwiS0VZX0JBQ0tTUEFDRV9DT01NQU5EIiwiS0VZX0RFTEVURV9DT01NQU5EIiwiU0VMRUNUSU9OX0NIQU5HRV9DT01NQU5EIiwiRGVjb3JhdG9yUGx1Z2luIiwiJCIsImVkaXRvciIsIiRvbkRlbGV0ZSIsIl90ZW1wMiIsInQwIiwidDEiLCJyZWdpc3RlckNvbW1hbmQiLCJfdGVtcDMiLCJfdGVtcDQiLCJfdGVtcDYiLCJfdGVtcDgiLCJldmVudF8yIiwic2VsZWN0aW9uXzEiLCJzZWxlY3Rpb24iLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwibmV4dFNpYmxpbmciLCJnZXROb2RlcyIsImdldE5leHRTaWJsaW5nIiwiZWxlbWVudF8wIiwiZ2V0RWxlbWVudEJ5S2V5IiwiZ2V0S2V5IiwiZWxlbWVudCIsIiRzZWxlY3REZWNvcmF0b3IiLCJub2RlIiwiZmlyc3REZXNjZW5kYW50IiwiZ2V0Rmlyc3REZXNjZW5kYW50IiwiSU5URVJOQUxfJGlzQmxvY2siLCJzZWxlY3RFbmQiLCJsYXN0Tm9kZSIsImlzQmFja3dhcmQiLCJhbmNob3IiLCJmb2N1cyIsImdldE5vZGUiLCJsYXN0U2VsZWN0ZWRCbG9jayIsIl90ZW1wNyIsIm5leHRCbG9jayIsImZpbmRMYXRlclNpYmxpbmdCbG9jayIsIm5leHRCbG9ja0VsZW1lbnQiLCJub2RlXzEiLCJldmVudF8xIiwic2VsZWN0aW9uXzAiLCJwcmV2U2libGluZyIsImdldFByZXZpb3VzU2libGluZyIsImxhc3REZXNjZW5kYW50IiwiZ2V0TGFzdERlc2NlbmRhbnQiLCJzZWxlY3RTdGFydCIsImZpcnN0Tm9kZSIsImZpcnN0U2VsZWN0ZWRCbG9jayIsIl90ZW1wNSIsInByZXZCbG9jayIsImZpbmRGaXJzdFNpYmxpbmdCbG9jayIsInByZXZCbG9ja0VsZW1lbnQiLCJub2RlXzAiLCJkZWNvcmF0b3JfMCIsIiRnZXRTZWxlY3RlZERlY29yYXRvciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNsYXNzTGlzdCIsInJlbW92ZSIsImRlY29yYXRvciIsImFkZCIsImV2ZW50XzAiLCIkZ2V0RGVjb3JhdG9yQnlNb3VzZUV2ZW50IiwidGFyZ2V0IiwiSFRNTEVsZW1lbnQiLCJpc0NvbnRlbnRFZGl0YWJsZSIsImNsb3Nlc3QiLCJmb3JFYWNoIiwiX3RlbXAiLCJ1bmRlZmluZWQiLCJub2RlcyIsImxlbmd0aCIsInNjcm9sbEludG9WaWV3IiwiYmVoYXZpb3IiLCJibG9jayIsImlzSW5saW5lIiwiZmlyc3RDaGlsZCIsImdldEZpcnN0Q2hpbGQiLCJpc0xlYWZFbGVtZW50IiwiY2FuQmVFbXB0eSIsImN1cnJlbnQiLCIkY3JlYXRlUGFyYWdyYXBoTm9kZSIsImlzSFRNTEVsZW1lbnQiLCJ1c2VSZWYiLCJjcmVhdGVQb3J0YWwiLCJjYWxjdWxhdGVEaXN0YW5jZUZyb21TY3JvbGxlckVsZW0iLCJzY3JvbGxlckVsZW0iLCJwYWdlWCIsInBhZ2VZIiwiaG9yaXpvbnRhbEJ1ZmZlciIsInZlcnRpY2FsQnVmZmVyIiwiZGlzdGFuY2VGcm9tU2Nyb2xsZXJFbGVtIiwiY29udGFpbnMiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhZGp1c3RlZFRvcCIsIndpbmRvdyIsInNjcm9sbFkiLCJhZGp1c3RlZEJvdHRvbSIsIiRnZXROb2RlQnlLZXkiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3RXaXRob3V0VHJhbnNmb3JtIiwiZWxlbSIsInJlY3QiLCJ0cmFuc2Zvcm1WYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwibGFzdE51bWJlck9mVHJhbnNmb3JtVmFsdWUiLCJzcGxpdCIsInBvcCIsInkiLCJOdW1iZXIiLCJyZXBsYWNlIiwiZ2V0Q29sbGFwc2VkTWFyZ2lucyIsImdldE1hcmdpbiIsIm1hcmdpbiIsInBhcnNlRmxvYXQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5Ub3AiLCJwcmV2RWxlbVNpYmxpbmdNYXJnaW5Cb3R0b20iLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwibmV4dEVsZW1TaWJsaW5nTWFyZ2luVG9wIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiY29sbGFwc2VkVG9wTWFyZ2luIiwiTWF0aCIsIm1heCIsIiRnZXRSb290IiwiZ2V0VG9wTGV2ZWxOb2RlS2V5cyIsImdldEVkaXRvclN0YXRlIiwicmVhZCIsImdldENoaWxkcmVuS2V5cyIsIkRvd253YXJkIiwiVXB3YXJkIiwiSW5kZXRlcm1pbmF0ZSIsImNhY2hlIiwicHJvcHMiLCJyZXN1bHQiLCJpc1BvaW50Q2xvc2UiLCJwcmV2aW91cyIsInRocmVzaG9sZCIsImR4IiwieCIsImR5IiwiZ2V0Tm9kZUNsb3NlVG9Qb2ludCIsImNhY2hlX3RocmVzaG9sZCIsImZ1enp5IiwiaG9yaXpvbnRhbE9mZnNldCIsInBvaW50Iiwic3RhcnRJbmRleCIsInVzZUVkZ2VBc0RlZmF1bHQiLCJhbmNob3JFbGVtZW50UmVjdCIsInRvcExldmVsTm9kZUtleXMiLCJjbG9zZXN0QmxvY2tFbGVtIiwiYmxvY2tFbGVtIiwiYmxvY2tOb2RlIiwiZGlzdGFuY2UiLCJJbmZpbml0eSIsImZvdW5kQXRJbmRleCIsImlzRm91bmROb2RlRW1wdHlQYXJhZ3JhcGgiLCJmaXJzdE5vZGVSZWN0IiwibGFzdE5vZGVSZWN0IiwiaW5kZXgiLCJkaXJlY3Rpb24iLCJrZXkiLCJQb2ludCIsImRvbVJlY3QiLCJSZWN0IiwiZnJvbURPTVJlY3QiLCJnZW5lcmF0ZU5ld1JlY3QiLCJpc09uQm90dG9tU2lkZSIsImlzT25Ub3BTaWRlIiwiZGlzdGFuY2VGcm9tUG9pbnQiLCJnZXRUeXBlIiwiZ2V0VGV4dENvbnRlbnQiLCJyZXR1cm5FbXB0eVBhcmFncmFwaHMiLCJpc09uSGFuZGxlRWxlbWVudCIsImhhbmRsZUVsZW1lbnRDbGFzc05hbWUiLCJyZXBsYWNlZEVsZW1lbnRzIiwiZG9lc0xpbmVIZWlnaHRBZmZlY3RFbGVtZW50IiwiaHRtbEVsZW0iLCJpbmNsdWRlcyIsInRhZ05hbWUiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXRXaWR0aCIsInN0eWxlIiwiZGlzcGxheSIsInZpc2liaWxpdHkiLCJvcGFjaXR5Iiwic2V0SGFuZGxlUG9zaXRpb24iLCJ0YXJnZXRFbGVtIiwiaGFuZGxlRWxlbSIsImxlZnRPZmZzZXQiLCJ0cmFuc2Zvcm0iLCJ0YXJnZXRSZWN0IiwidGFyZ2V0U3R5bGUiLCJmbG9hdGluZ0VsZW1SZWN0Iiwic29tZSIsImNsYXNzZXMiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImFjdHVhbExpbmVIZWlnaHQiLCJwYXJzZUludCIsImxpbmVIZWlnaHQiLCJoZWlnaHQiLCJBRERfQkxPQ0tfTUVOVV9DTEFTU05BTUUiLCJwcmV2SW5kZXgiLCJnZXRDdXJyZW50SW5kZXgiLCJrZXlzTGVuZ3RoIiwiZmxvb3IiLCJ1c2VBZGRCbG9ja0hhbmRsZSIsImlzRWRpdGFibGUiLCJwYXJlbnRFbGVtZW50IiwiZWRpdG9yQ29uZmlnIiwidXNlRWRpdG9yQ29uZmlnQ29udGV4dCIsImJsb2NrSGFuZGxlSG9yaXpvbnRhbE9mZnNldCIsImFkbWluIiwiaGlkZUd1dHRlciIsIm1lbnVSZWYiLCJob3ZlcmVkRWxlbWVudCIsInNldEhvdmVyZWRFbGVtZW50Iiwib25Eb2N1bWVudE1vdXNlTW92ZSIsIl9lbXB0eUJsb2NrRWxlbSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaGFuZGxlQWRkQ2xpY2siLCJob3ZlcmVkRWxlbWVudFRvVXNlIiwidXBkYXRlIiwiaXNFbXB0eVBhcmFncmFwaCIsIm5ld1BhcmFncmFwaCIsImluc2VydEFmdGVyIiwic2V0VGltZW91dCIsInNlbGVjdCIsImRpc3BhdGNoQ29tbWFuZCIsIkVOQUJMRV9TTEFTSF9NRU5VX0NPTU1BTkQiLCJzdG9wUHJvcGFnYXRpb24iLCJGcmFnbWVudCIsImNsYXNzTmFtZSIsIm9uQ2xpY2siLCJyZWYiLCJ0eXBlIiwiQWRkQmxvY2tIYW5kbGVQbHVnaW4iLCJib2R5IiwiX2VkaXRhYmxlIiwiZXZlbnRGaWxlcyIsIlRBUkdFVF9MSU5FX0hBTEZfSEVJR0hUIiwiVEVYVF9CT1hfSE9SSVpPTlRBTF9QQURESU5HIiwiYW5pbWF0aW9uVGltZXIiLCJzZXRUYXJnZXRMaW5lIiwib2Zmc2V0TGVmdCIsInRhcmdldExpbmVFbGVtIiwidGFyZ2V0QmxvY2tFbGVtIiwibGFzdFRhcmdldEJsb2NrIiwibW91c2VZIiwiZGVidWdIaWdobGlnaHRSZWYiLCJ0YXJnZXRCbG9ja0VsZW1IZWlnaHQiLCJ0YXJnZXRCbG9ja0VsZW1Ub3AiLCJhbmNob3JUb3AiLCJ3aWR0aCIsImFuY2hvcldpZHRoIiwibGluZVRvcCIsImlzQmVsb3ciLCJ3aWxsU3RheUluU2FtZVBvc2l0aW9uIiwibGFzdEJvdW5kaW5nQm94UG9zaXRpb24iLCJib3VuZGluZ0JveCIsImN1cnJlbnRCb3VuZGluZ0JveFBvc2l0aW9uIiwidGFyZ2V0RWxlbVRyYW5zbGF0ZTIiLCJEUkFHR0FCTEVfQkxPQ0tfTUVOVV9DTEFTU05BTUUiLCJEUkFHX0RBVEFfRk9STUFUIiwic2V0RHJhZ0ltYWdlIiwiZGF0YVRyYW5zZmVyIiwiZHJhZ2dhYmxlQmxvY2tFbGVtIiwiaGlkZVRhcmdldExpbmUiLCJsYXN0VGFyZ2V0QmxvY2tFbGVtIiwidXNlRHJhZ2dhYmxlQmxvY2tNZW51IiwidGFyZ2V0TGluZVJlZiIsImlzRHJhZ2dpbmdCbG9ja1JlZiIsInNldERyYWdnYWJsZUJsb2NrRWxlbSIsInNldExhc3RUYXJnZXRCbG9jayIsIl9kcmFnZ2FibGVCbG9ja0VsZW0iLCJ2ZXJib3NlIiwib25EcmFnb3ZlciIsImlzRmlsZVRyYW5zZmVyIiwib25Ecm9wIiwiZHJhZ0RhdGEiLCJnZXREYXRhIiwiZHJhZ2dlZE5vZGUiLCJ0YXJnZXROb2RlIiwiaW5zZXJ0QmVmb3JlIiwicXVlcnlTZWxlY3RvckFsbCIsImhpZ2hsaWdodGVyIiwibmV3SW5zZXJ0ZWRFbGVtIiwibmV3SW5zZXJ0ZWRFbGVtUmVjdCIsImhpZ2hsaWdodEVsZW0iLCJjcmVhdGVFbGVtZW50IiwiYmFja2dyb3VuZENvbG9yIiwidHJhbnNpdGlvbiIsInpJbmRleCIsInBvaW50ZXJFdmVudHMiLCJib3hTaXppbmciLCJib3JkZXJSYWRpdXMiLCJhcHBlbmRDaGlsZCIsIm9uRHJhZ1N0YXJ0Iiwibm9kZUtleSIsInNldERhdGEiLCJvbkRyYWdFbmQiLCJfanN4cyIsImRyYWdnYWJsZSIsIkRyYWdnYWJsZUJsb2NrUGx1Z2luIiwiYmFzZUNsYXNzIiwiSW5zZXJ0UGFyYWdyYXBoQXRFbmRQbHVnaW4iLCJoaWRlSW5zZXJ0UGFyYWdyYXBoQXRFbmQiLCJyb2xlIiwidGFiSW5kZXgiLCJjaGlsZHJlbiIsInBhcmFncmFwaE5vZGUiLCJhcHBlbmQiLCJNYXJrZG93blNob3J0Y3V0UGx1Z2luIiwiZmVhdHVyZXMiLCJtYXJrZG93blRyYW5zZm9ybWVycyIsInJlZ2lzdGVyTWFya2Rvd25TaG9ydGN1dHMiLCJSb290Tm9kZSIsIk5vcm1hbGl6ZVNlbGVjdGlvblBsdWdpbiIsInJlZ2lzdGVyTm9kZVRyYW5zZm9ybSIsInJvb3QiLCJhbmNob3JOb2RlIiwiZm9jdXNOb2RlIiwiaXNBdHRhY2hlZCIsImNvbnNvbGUiLCJ3YXJuIiwidXNlVHJhbnNsYXRpb24iLCJSZWFjdERPTSIsInVzZU1lbnVUcmlnZ2VyTWF0Y2giLCJ0cmlnZ2VyIiwibWF4TGVuZ3RoIiwibWluTGVuZ3RoIiwidDIiLCJ0MyIsInQ0IiwicXVlcnkiLCJ2YWxpZENoYXJzIiwiUFVOQ1RVQVRJT04iLCJtYXRjaCIsIlJlZ0V4cCIsImV4ZWMiLCJtYXliZUxlYWRpbmdXaGl0ZXNwYWNlIiwibWF0Y2hpbmdTdHJpbmciLCJsZWFkT2Zmc2V0IiwicmVwbGFjZWFibGVTdHJpbmciLCJTbGFzaE1lbnVJdGVtIiwiaXNTZWxlY3RlZCIsIml0ZW0iLCJvbk1vdXNlRW50ZXIiLCJmaWVsZFByb3BzIiwiZmVhdHVyZUNsaWVudFNjaGVtYU1hcCIsInNjaGVtYVBhdGgiLCJpMThuIiwidGl0bGUiLCJsYWJlbCIsInN1YnN0cmluZyIsImlkIiwiSWNvbiIsIlNsYXNoTWVudVBsdWdpbiIsInF1ZXJ5U3RyaW5nIiwic2V0UXVlcnlTdHJpbmciLCJjaGVja0ZvclRyaWdnZXJNYXRjaCIsImdldER5bmFtaWNJdGVtcyIsImdyb3VwV2l0aEl0ZW1zIiwiZHluYW1pY0l0ZW0iLCJzbGFzaE1lbnUiLCJkeW5hbWljR3JvdXBzIiwiZHluYW1pY0dyb3VwV2l0aEl0ZW1zIiwiY29uY2F0IiwiZ3JvdXBzIiwiZ3JvdXBzV2l0aEl0ZW1zIiwiZ3JvdXBXaXRoSXRlbSIsInB1c2giLCJtYXAiLCJncm91cCIsImZpbHRlcmVkSXRlbXMiLCJpdGVtcyIsImZpbHRlciIsIml0ZW1UaXRsZSIsImtleXdvcmRzIiwia2V5d29yZCIsImR5bmFtaWNJdGVtR3JvdXBzIiwiZHluYW1pY0dyb3VwIiwiZmluZCIsIkxleGljYWxUeXBlYWhlYWRNZW51UGx1Z2luIiwibWVudVJlbmRlckZuIiwiYW5jaG9yRWxlbWVudFJlZiIsInNlbGVjdGVkSXRlbUtleSIsInNlbGVjdEl0ZW1BbmRDbGVhblVwIiwic2V0U2VsZWN0ZWRJdGVtS2V5IiwiZ3JvdXBUaXRsZSIsIm9pIiwiZWwiLCJvblF1ZXJ5Q2hhbmdlIiwidHJpZ2dlckZuIiwiVEVYVF9UWVBFX1RPX0ZPUk1BVCIsIlRleHROb2RlIiwiVGV4dFBsdWdpbiIsImVuYWJsZWRGb3JtYXRzIiwiZGlzYWJsZWRGb3JtYXRzIiwiZ2V0RGlzYWJsZWRGb3JtYXRzIiwidGV4dE5vZGUiLCJkaXNhYmxlZEZvcm1hdCIsImhhc0Zvcm1hdCIsInRvZ2dsZUZvcm1hdCIsImFsbEZvcm1hdHMiLCJPYmplY3QiLCJrZXlzIiwiZW5hYmxlZFNldCIsIlNldCIsImZvcm1hdCIsImhhcyIsIkNvbnRlbnRFZGl0YWJsZSIsIkxleGljYWxDb250ZW50RWRpdGFibGUiLCJ0IiwicGxhY2Vob2xkZXIiLCJMZXhpY2FsRWRpdG9yIiwiZWRpdG9yQ29udGFpbmVyUmVmIiwiaXNTbWFsbFdpZHRoVmlld3BvcnQiLCJvbkNoYW5nZSIsImVkaXRvckNvbmZpZ0NvbnRleHQiLCJmbG9hdGluZ0FuY2hvckVsZW0iLCJzZXRGbG9hdGluZ0FuY2hvckVsZW0iLCJTeW1ib2wiLCJmb3IiLCJfZmxvYXRpbmdBbmNob3JFbGVtIiwib25SZWYiLCJ1dWlkIiwiZXJyb3IiLCJwYXJlbnRFZGl0b3IiLCJyZWdpc3RlckNoaWxkIiwiaGFuZGxlRm9jdXMiLCJmb2N1c0VkaXRvciIsImhhbmRsZUJsdXIiLCJibHVyRWRpdG9yIiwidW5yZWdpc3RlckZvY3VzIiwidW5yZWdpc3RlckJsdXIiLCJ1bnJlZ2lzdGVyQ2hpbGQiLCJlZGl0b3JTdGF0ZSIsImVkaXRvcl8wIiwidGFncyIsInNpemUiLCJ0NSIsInBsdWdpbnMiLCJwbHVnaW5fMSIsImRlc2t0b3BPbmx5IiwiY29udGVudEVkaXRhYmxlIiwiaWdub3JlU2VsZWN0aW9uQ2hhbmdlIiwicGx1Z2luXzAiLCJwbHVnaW5fMiIsInBsdWdpbl8zIiwicGx1Z2luXzQiLCJOZXN0UHJvdmlkZXJzIiwicHJvdmlkZXJzIiwic2xpY2UiLCJMZXhpY2FsUHJvdmlkZXIiLCJjb21wb3NlcktleSIsInJlYWRPbmx5IiwidmFsdWUiLCJwYXJlbnRDb250ZXh0IiwiZWRpdERlcHRoIiwiaW5pdGlhbENvbmZpZyIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIkFycmF5IiwiaXNBcnJheSIsImVkaXRhYmxlIiwibmFtZXNwYWNlIiwibGV4aWNhbCIsImdldEVuYWJsZWROb2RlcyIsIm9uRXJyb3IiLCJ0aGVtZSIsIkVkaXRvckNvbmZpZ1Byb3ZpZGVyIiwiTGV4aWNhbEVkaXRvckNvbXBvbmVudCIsIlJpY2hUZXh0Q29tcG9uZW50IiwiZmllbGQiLCJkZXNjcmlwdGlvbiIsInJlYWRPbmx5RnJvbUFkbWluIiwibG9jYWxpemVkIiwicmVxdWlyZWQiLCJwYXRoIiwicGF0aEZyb21Qcm9wcyIsInJlYWRPbmx5RnJvbVRvcExldmVsUHJvcHMiLCJ2YWxpZGF0ZSIsInJlYWRPbmx5RnJvbVByb3BzIiwibWVtb2l6ZWRWYWxpZGF0ZSIsInZhbGlkYXRpb25PcHRpb25zIiwiY3VzdG9tQ29tcG9uZW50cyIsIkFmdGVySW5wdXQiLCJCZWZvcmVJbnB1dCIsIkRlc2NyaXB0aW9uIiwiTGFiZWwiLCJkaXNhYmxlZCIsImRpc2FibGVkRnJvbUZpZWxkIiwiaW5pdGlhbFZhbHVlIiwic2V0VmFsdWUiLCJzaG93RXJyb3IiLCJwb3RlbnRpYWxseVN0YWxlUGF0aCIsInNldElzU21hbGxXaWR0aFZpZXdwb3J0IiwicmVyZW5kZXJQcm92aWRlcktleSIsInNldFJlcmVuZGVyUHJvdmlkZXJLZXkiLCJwcmV2SW5pdGlhbFZhbHVlUmVmIiwicHJldlZhbHVlUmVmIiwidXBkYXRlVmlld1BvcnRXaWR0aCIsImlzTmV4dFNtYWxsV2lkdGhWaWV3cG9ydCIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwiQm9vbGVhbiIsImpvaW4iLCJwYXRoV2l0aEVkaXREZXB0aCIsInVwZGF0ZUZpZWxkVmFsdWUiLCJuZXdTdGF0ZSIsInRvSlNPTiIsImhhbmRsZUNoYW5nZSIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJzdHlsZXMiLCJoYW5kbGVJbml0aWFsVmFsdWVDaGFuZ2UiLCJEYXRlIiwiaXMiLCJDdXN0b21Db21wb25lbnQiLCJGYWxsYmFjayIsImZhbGxiYWNrUmVuZGVyIiwib25SZXNldCIsImNvbG9yIiwibWVzc2FnZSIsIlJpY2hUZXh0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/exports/client/Field-QFHWUA2L.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/exports/client/bundled.css":
/*!***********************************************************************************!*\
  !*** ./node_modules/@payloadcms/richtext-lexical/dist/exports/client/bundled.css ***!
  \***********************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"7961503ede1d\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZXhwb3J0cy9jbGllbnQvYnVuZGxlZC5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyIvVXNlcnMvdHJhbmdpYWtpZXQvRG9jdW1lbnRzL0dpdEh1Yi9ncmVlbmJvb2stY21zL25vZGVfbW9kdWxlcy9AcGF5bG9hZGNtcy9yaWNodGV4dC1sZXhpY2FsL2Rpc3QvZXhwb3J0cy9jbGllbnQvYnVuZGxlZC5jc3MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI3OTYxNTAzZWRlMWRcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@payloadcms/richtext-lexical/dist/exports/client/bundled.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorBoundary: () => (/* binding */ ErrorBoundary),\n/* harmony export */   ErrorBoundaryContext: () => (/* binding */ ErrorBoundaryContext),\n/* harmony export */   useErrorBoundary: () => (/* binding */ useErrorBoundary),\n/* harmony export */   withErrorBoundary: () => (/* binding */ withErrorBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ ErrorBoundary,ErrorBoundaryContext,useErrorBoundary,withErrorBoundary auto */ var _s = $RefreshSig$();\n\nconst ErrorBoundaryContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst initialState = {\n    didCatch: false,\n    error: null\n};\nclass ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    static getDerivedStateFromError(error) {\n        return {\n            didCatch: true,\n            error\n        };\n    }\n    resetErrorBoundary() {\n        const { error } = this.state;\n        if (error !== null) {\n            var _this$props$onReset, _this$props;\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            (_this$props$onReset = (_this$props = this.props).onReset) === null || _this$props$onReset === void 0 ? void 0 : _this$props$onReset.call(_this$props, {\n                args,\n                reason: \"imperative-api\"\n            });\n            this.setState(initialState);\n        }\n    }\n    componentDidCatch(error, info) {\n        var _this$props$onError, _this$props2;\n        (_this$props$onError = (_this$props2 = this.props).onError) === null || _this$props$onError === void 0 ? void 0 : _this$props$onError.call(_this$props2, error, info);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { didCatch } = this.state;\n        const { resetKeys } = this.props;\n        // There's an edge case where if the thing that triggered the error happens to *also* be in the resetKeys array,\n        // we'd end up resetting the error boundary immediately.\n        // This would likely trigger a second error to be thrown.\n        // So we make sure that we don't check the resetKeys on the first call of cDU after the error is set.\n        if (didCatch && prevState.error !== null && hasArrayChanged(prevProps.resetKeys, resetKeys)) {\n            var _this$props$onReset2, _this$props3;\n            (_this$props$onReset2 = (_this$props3 = this.props).onReset) === null || _this$props$onReset2 === void 0 ? void 0 : _this$props$onReset2.call(_this$props3, {\n                next: resetKeys,\n                prev: prevProps.resetKeys,\n                reason: \"keys\"\n            });\n            this.setState(initialState);\n        }\n    }\n    render() {\n        const { children, fallbackRender, FallbackComponent, fallback } = this.props;\n        const { didCatch, error } = this.state;\n        let childToRender = children;\n        if (didCatch) {\n            const props = {\n                error,\n                resetErrorBoundary: this.resetErrorBoundary\n            };\n            if (typeof fallbackRender === \"function\") {\n                childToRender = fallbackRender(props);\n            } else if (FallbackComponent) {\n                childToRender = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(FallbackComponent, props);\n            } else if (fallback !== undefined) {\n                childToRender = fallback;\n            } else {\n                {\n                    console.error(\"react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop\");\n                }\n                throw error;\n            }\n        }\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(ErrorBoundaryContext.Provider, {\n            value: {\n                didCatch,\n                error,\n                resetErrorBoundary: this.resetErrorBoundary\n            }\n        }, childToRender);\n    }\n    constructor(props){\n        super(props);\n        this.resetErrorBoundary = this.resetErrorBoundary.bind(this);\n        this.state = initialState;\n    }\n}\nfunction hasArrayChanged() {\n    let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return a.length !== b.length || a.some((item, index)=>!Object.is(item, b[index]));\n}\nfunction assertErrorBoundaryContext(value) {\n    if (value == null || typeof value.didCatch !== \"boolean\" || typeof value.resetErrorBoundary !== \"function\") {\n        throw new Error(\"ErrorBoundaryContext not found\");\n    }\n}\nfunction useErrorBoundary() {\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ErrorBoundaryContext);\n    assertErrorBoundaryContext(context);\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        error: null,\n        hasError: false\n    });\n    const memoized = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useErrorBoundary.useMemo[memoized]\": ()=>({\n                resetBoundary: ({\n                    \"useErrorBoundary.useMemo[memoized]\": ()=>{\n                        context.resetErrorBoundary();\n                        setState({\n                            error: null,\n                            hasError: false\n                        });\n                    }\n                })[\"useErrorBoundary.useMemo[memoized]\"],\n                showBoundary: ({\n                    \"useErrorBoundary.useMemo[memoized]\": (error)=>setState({\n                            error,\n                            hasError: true\n                        })\n                })[\"useErrorBoundary.useMemo[memoized]\"]\n            })\n    }[\"useErrorBoundary.useMemo[memoized]\"], [\n        context.resetErrorBoundary\n    ]);\n    if (state.hasError) {\n        throw state.error;\n    }\n    return memoized;\n}\n_s(useErrorBoundary, \"+pKi6m5l0SpCZXu8kma/1W0pdXE=\");\nfunction withErrorBoundary(component, errorBoundaryProps) {\n    const Wrapped = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(ErrorBoundary, errorBoundaryProps, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(component, {\n            ...props,\n            ref\n        })));\n    // Format for display in DevTools\n    const name = component.displayName || component.name || \"Unknown\";\n    Wrapped.displayName = \"withErrorBoundary(\".concat(name, \")\");\n    return Wrapped;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js\n"));

/***/ })

}]);