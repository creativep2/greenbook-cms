"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pg-protocol";
exports.ids = ["vendor-chunks/pg-protocol"];
exports.modules = {

/***/ "(rsc)/./node_modules/pg-protocol/dist/buffer-reader.js":
/*!********************************************************!*\
  !*** ./node_modules/pg-protocol/dist/buffer-reader.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BufferReader = void 0;\nconst emptyBuffer = Buffer.allocUnsafe(0);\nclass BufferReader {\n    constructor(offset = 0) {\n        this.offset = offset;\n        this.buffer = emptyBuffer;\n        // TODO(bmc): support non-utf8 encoding?\n        this.encoding = 'utf-8';\n    }\n    setBuffer(offset, buffer) {\n        this.offset = offset;\n        this.buffer = buffer;\n    }\n    int16() {\n        const result = this.buffer.readInt16BE(this.offset);\n        this.offset += 2;\n        return result;\n    }\n    byte() {\n        const result = this.buffer[this.offset];\n        this.offset++;\n        return result;\n    }\n    int32() {\n        const result = this.buffer.readInt32BE(this.offset);\n        this.offset += 4;\n        return result;\n    }\n    uint32() {\n        const result = this.buffer.readUInt32BE(this.offset);\n        this.offset += 4;\n        return result;\n    }\n    string(length) {\n        const result = this.buffer.toString(this.encoding, this.offset, this.offset + length);\n        this.offset += length;\n        return result;\n    }\n    cstring() {\n        const start = this.offset;\n        let end = start;\n        // eslint-disable-next-line no-empty\n        while (this.buffer[end++] !== 0) { }\n        this.offset = end;\n        return this.buffer.toString(this.encoding, start, end - 1);\n    }\n    bytes(length) {\n        const result = this.buffer.slice(this.offset, this.offset + length);\n        this.offset += length;\n        return result;\n    }\n}\nexports.BufferReader = BufferReader;\n//# sourceMappingURL=buffer-reader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvdG9jb2wvZGlzdC9idWZmZXItcmVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIkQ6XFxHaXRodWJcXGdyZWVuYm9vay1jbXNcXG5vZGVfbW9kdWxlc1xccGctcHJvdG9jb2xcXGRpc3RcXGJ1ZmZlci1yZWFkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJ1ZmZlclJlYWRlciA9IHZvaWQgMDtcbmNvbnN0IGVtcHR5QnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApO1xuY2xhc3MgQnVmZmVyUmVhZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihvZmZzZXQgPSAwKSB7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IGVtcHR5QnVmZmVyO1xuICAgICAgICAvLyBUT0RPKGJtYyk6IHN1cHBvcnQgbm9uLXV0ZjggZW5jb2Rpbmc/XG4gICAgICAgIHRoaXMuZW5jb2RpbmcgPSAndXRmLTgnO1xuICAgIH1cbiAgICBzZXRCdWZmZXIob2Zmc2V0LCBidWZmZXIpIHtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgIH1cbiAgICBpbnQxNigpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5idWZmZXIucmVhZEludDE2QkUodGhpcy5vZmZzZXQpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBieXRlKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldF07XG4gICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGludDMyKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmJ1ZmZlci5yZWFkSW50MzJCRSh0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHVpbnQzMigpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5idWZmZXIucmVhZFVJbnQzMkJFKHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc3RyaW5nKGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmJ1ZmZlci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCB0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyBsZW5ndGgpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSBsZW5ndGg7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNzdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGxldCBlbmQgPSBzdGFydDtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgICAgIHdoaWxlICh0aGlzLmJ1ZmZlcltlbmQrK10gIT09IDApIHsgfVxuICAgICAgICB0aGlzLm9mZnNldCA9IGVuZDtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIHN0YXJ0LCBlbmQgLSAxKTtcbiAgICB9XG4gICAgYnl0ZXMobGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYnVmZmVyLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIGxlbmd0aCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5leHBvcnRzLkJ1ZmZlclJlYWRlciA9IEJ1ZmZlclJlYWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlci1yZWFkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-protocol/dist/buffer-reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-protocol/dist/buffer-writer.js":
/*!********************************************************!*\
  !*** ./node_modules/pg-protocol/dist/buffer-writer.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n//binary data writer tuned for encoding binary specific to the postgres binary protocol\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Writer = void 0;\nclass Writer {\n    constructor(size = 256) {\n        this.size = size;\n        this.offset = 5;\n        this.headerPosition = 0;\n        this.buffer = Buffer.allocUnsafe(size);\n    }\n    ensure(size) {\n        const remaining = this.buffer.length - this.offset;\n        if (remaining < size) {\n            const oldBuffer = this.buffer;\n            // exponential growth factor of around ~ 1.5\n            // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n            const newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\n            this.buffer = Buffer.allocUnsafe(newSize);\n            oldBuffer.copy(this.buffer);\n        }\n    }\n    addInt32(num) {\n        this.ensure(4);\n        this.buffer[this.offset++] = (num >>> 24) & 0xff;\n        this.buffer[this.offset++] = (num >>> 16) & 0xff;\n        this.buffer[this.offset++] = (num >>> 8) & 0xff;\n        this.buffer[this.offset++] = (num >>> 0) & 0xff;\n        return this;\n    }\n    addInt16(num) {\n        this.ensure(2);\n        this.buffer[this.offset++] = (num >>> 8) & 0xff;\n        this.buffer[this.offset++] = (num >>> 0) & 0xff;\n        return this;\n    }\n    addCString(string) {\n        if (!string) {\n            this.ensure(1);\n        }\n        else {\n            const len = Buffer.byteLength(string);\n            this.ensure(len + 1); // +1 for null terminator\n            this.buffer.write(string, this.offset, 'utf-8');\n            this.offset += len;\n        }\n        this.buffer[this.offset++] = 0; // null terminator\n        return this;\n    }\n    addString(string = '') {\n        const len = Buffer.byteLength(string);\n        this.ensure(len);\n        this.buffer.write(string, this.offset);\n        this.offset += len;\n        return this;\n    }\n    add(otherBuffer) {\n        this.ensure(otherBuffer.length);\n        otherBuffer.copy(this.buffer, this.offset);\n        this.offset += otherBuffer.length;\n        return this;\n    }\n    join(code) {\n        if (code) {\n            this.buffer[this.headerPosition] = code;\n            //length is everything in this packet minus the code\n            const length = this.offset - (this.headerPosition + 1);\n            this.buffer.writeInt32BE(length, this.headerPosition + 1);\n        }\n        return this.buffer.slice(code ? 0 : 5, this.offset);\n    }\n    flush(code) {\n        const result = this.join(code);\n        this.offset = 5;\n        this.headerPosition = 0;\n        this.buffer = Buffer.allocUnsafe(this.size);\n        return result;\n    }\n}\nexports.Writer = Writer;\n//# sourceMappingURL=buffer-writer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvdG9jb2wvZGlzdC9idWZmZXItd3JpdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QiLCJzb3VyY2VzIjpbIkQ6XFxHaXRodWJcXGdyZWVuYm9vay1jbXNcXG5vZGVfbW9kdWxlc1xccGctcHJvdG9jb2xcXGRpc3RcXGJ1ZmZlci13cml0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vL2JpbmFyeSBkYXRhIHdyaXRlciB0dW5lZCBmb3IgZW5jb2RpbmcgYmluYXJ5IHNwZWNpZmljIHRvIHRoZSBwb3N0Z3JlcyBiaW5hcnkgcHJvdG9jb2xcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV3JpdGVyID0gdm9pZCAwO1xuY2xhc3MgV3JpdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzaXplID0gMjU2KSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gNTtcbiAgICAgICAgdGhpcy5oZWFkZXJQb3NpdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKHNpemUpO1xuICAgIH1cbiAgICBlbnN1cmUoc2l6ZSkge1xuICAgICAgICBjb25zdCByZW1haW5pbmcgPSB0aGlzLmJ1ZmZlci5sZW5ndGggLSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA8IHNpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IG9sZEJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICAgICAgLy8gZXhwb25lbnRpYWwgZ3Jvd3RoIGZhY3RvciBvZiBhcm91bmQgfiAxLjVcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIyNjkwNjMvYnVmZmVyLWdyb3d0aC1zdHJhdGVneVxuICAgICAgICAgICAgY29uc3QgbmV3U2l6ZSA9IG9sZEJ1ZmZlci5sZW5ndGggKyAob2xkQnVmZmVyLmxlbmd0aCA+PiAxKSArIHNpemU7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuZXdTaXplKTtcbiAgICAgICAgICAgIG9sZEJ1ZmZlci5jb3B5KHRoaXMuYnVmZmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRJbnQzMihudW0pIHtcbiAgICAgICAgdGhpcy5lbnN1cmUoNCk7XG4gICAgICAgIHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdID0gKG51bSA+Pj4gMjQpICYgMHhmZjtcbiAgICAgICAgdGhpcy5idWZmZXJbdGhpcy5vZmZzZXQrK10gPSAobnVtID4+PiAxNikgJiAweGZmO1xuICAgICAgICB0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCsrXSA9IChudW0gPj4+IDgpICYgMHhmZjtcbiAgICAgICAgdGhpcy5idWZmZXJbdGhpcy5vZmZzZXQrK10gPSAobnVtID4+PiAwKSAmIDB4ZmY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhZGRJbnQxNihudW0pIHtcbiAgICAgICAgdGhpcy5lbnN1cmUoMik7XG4gICAgICAgIHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdID0gKG51bSA+Pj4gOCkgJiAweGZmO1xuICAgICAgICB0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCsrXSA9IChudW0gPj4+IDApICYgMHhmZjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFkZENTdHJpbmcoc3RyaW5nKSB7XG4gICAgICAgIGlmICghc3RyaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmVuc3VyZSgxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHN0cmluZyk7XG4gICAgICAgICAgICB0aGlzLmVuc3VyZShsZW4gKyAxKTsgLy8gKzEgZm9yIG51bGwgdGVybWluYXRvclxuICAgICAgICAgICAgdGhpcy5idWZmZXIud3JpdGUoc3RyaW5nLCB0aGlzLm9mZnNldCwgJ3V0Zi04Jyk7XG4gICAgICAgICAgICB0aGlzLm9mZnNldCArPSBsZW47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idWZmZXJbdGhpcy5vZmZzZXQrK10gPSAwOyAvLyBudWxsIHRlcm1pbmF0b3JcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFkZFN0cmluZyhzdHJpbmcgPSAnJykge1xuICAgICAgICBjb25zdCBsZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChzdHJpbmcpO1xuICAgICAgICB0aGlzLmVuc3VyZShsZW4pO1xuICAgICAgICB0aGlzLmJ1ZmZlci53cml0ZShzdHJpbmcsIHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYWRkKG90aGVyQnVmZmVyKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlKG90aGVyQnVmZmVyLmxlbmd0aCk7XG4gICAgICAgIG90aGVyQnVmZmVyLmNvcHkodGhpcy5idWZmZXIsIHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gb3RoZXJCdWZmZXIubGVuZ3RoO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgam9pbihjb2RlKSB7XG4gICAgICAgIGlmIChjb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlclt0aGlzLmhlYWRlclBvc2l0aW9uXSA9IGNvZGU7XG4gICAgICAgICAgICAvL2xlbmd0aCBpcyBldmVyeXRoaW5nIGluIHRoaXMgcGFja2V0IG1pbnVzIHRoZSBjb2RlXG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLm9mZnNldCAtICh0aGlzLmhlYWRlclBvc2l0aW9uICsgMSk7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci53cml0ZUludDMyQkUobGVuZ3RoLCB0aGlzLmhlYWRlclBvc2l0aW9uICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnNsaWNlKGNvZGUgPyAwIDogNSwgdGhpcy5vZmZzZXQpO1xuICAgIH1cbiAgICBmbHVzaChjb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuam9pbihjb2RlKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSA1O1xuICAgICAgICB0aGlzLmhlYWRlclBvc2l0aW9uID0gMDtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUodGhpcy5zaXplKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5leHBvcnRzLldyaXRlciA9IFdyaXRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlci13cml0ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-protocol/dist/buffer-writer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-protocol/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/pg-protocol/dist/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DatabaseError = exports.serialize = exports.parse = void 0;\nconst messages_1 = __webpack_require__(/*! ./messages */ \"(rsc)/./node_modules/pg-protocol/dist/messages.js\");\nObject.defineProperty(exports, \"DatabaseError\", ({ enumerable: true, get: function () { return messages_1.DatabaseError; } }));\nconst serializer_1 = __webpack_require__(/*! ./serializer */ \"(rsc)/./node_modules/pg-protocol/dist/serializer.js\");\nObject.defineProperty(exports, \"serialize\", ({ enumerable: true, get: function () { return serializer_1.serialize; } }));\nconst parser_1 = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/pg-protocol/dist/parser.js\");\nfunction parse(stream, callback) {\n    const parser = new parser_1.Parser();\n    stream.on('data', (buffer) => parser.parse(buffer, callback));\n    return new Promise((resolve) => stream.on('end', () => resolve()));\n}\nexports.parse = parse;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvdG9jb2wvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUIsR0FBRyxpQkFBaUIsR0FBRyxhQUFhO0FBQ3pELG1CQUFtQixtQkFBTyxDQUFDLHFFQUFZO0FBQ3ZDLGlEQUFnRCxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUM1SCxxQkFBcUIsbUJBQU8sQ0FBQyx5RUFBYztBQUMzQyw2Q0FBNEMsRUFBRSxxQ0FBcUMsa0NBQWtDLEVBQUM7QUFDdEgsaUJBQWlCLG1CQUFPLENBQUMsaUVBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsiRDpcXEdpdGh1YlxcZ3JlZW5ib29rLWNtc1xcbm9kZV9tb2R1bGVzXFxwZy1wcm90b2NvbFxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRhdGFiYXNlRXJyb3IgPSBleHBvcnRzLnNlcmlhbGl6ZSA9IGV4cG9ydHMucGFyc2UgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gcmVxdWlyZShcIi4vbWVzc2FnZXNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEYXRhYmFzZUVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLkRhdGFiYXNlRXJyb3I7IH0gfSk7XG5jb25zdCBzZXJpYWxpemVyXzEgPSByZXF1aXJlKFwiLi9zZXJpYWxpemVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2VyaWFsaXplXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXJpYWxpemVyXzEuc2VyaWFsaXplOyB9IH0pO1xuY29uc3QgcGFyc2VyXzEgPSByZXF1aXJlKFwiLi9wYXJzZXJcIik7XG5mdW5jdGlvbiBwYXJzZShzdHJlYW0sIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgcGFyc2VyID0gbmV3IHBhcnNlcl8xLlBhcnNlcigpO1xuICAgIHN0cmVhbS5vbignZGF0YScsIChidWZmZXIpID0+IHBhcnNlci5wYXJzZShidWZmZXIsIGNhbGxiYWNrKSk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzdHJlYW0ub24oJ2VuZCcsICgpID0+IHJlc29sdmUoKSkpO1xufVxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-protocol/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-protocol/dist/messages.js":
/*!***************************************************!*\
  !*** ./node_modules/pg-protocol/dist/messages.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NoticeMessage = exports.DataRowMessage = exports.CommandCompleteMessage = exports.ReadyForQueryMessage = exports.NotificationResponseMessage = exports.BackendKeyDataMessage = exports.AuthenticationMD5Password = exports.ParameterStatusMessage = exports.ParameterDescriptionMessage = exports.RowDescriptionMessage = exports.Field = exports.CopyResponse = exports.CopyDataMessage = exports.DatabaseError = exports.copyDone = exports.emptyQuery = exports.replicationStart = exports.portalSuspended = exports.noData = exports.closeComplete = exports.bindComplete = exports.parseComplete = void 0;\nexports.parseComplete = {\n    name: 'parseComplete',\n    length: 5,\n};\nexports.bindComplete = {\n    name: 'bindComplete',\n    length: 5,\n};\nexports.closeComplete = {\n    name: 'closeComplete',\n    length: 5,\n};\nexports.noData = {\n    name: 'noData',\n    length: 5,\n};\nexports.portalSuspended = {\n    name: 'portalSuspended',\n    length: 5,\n};\nexports.replicationStart = {\n    name: 'replicationStart',\n    length: 4,\n};\nexports.emptyQuery = {\n    name: 'emptyQuery',\n    length: 4,\n};\nexports.copyDone = {\n    name: 'copyDone',\n    length: 4,\n};\nclass DatabaseError extends Error {\n    constructor(message, length, name) {\n        super(message);\n        this.length = length;\n        this.name = name;\n    }\n}\nexports.DatabaseError = DatabaseError;\nclass CopyDataMessage {\n    constructor(length, chunk) {\n        this.length = length;\n        this.chunk = chunk;\n        this.name = 'copyData';\n    }\n}\nexports.CopyDataMessage = CopyDataMessage;\nclass CopyResponse {\n    constructor(length, name, binary, columnCount) {\n        this.length = length;\n        this.name = name;\n        this.binary = binary;\n        this.columnTypes = new Array(columnCount);\n    }\n}\nexports.CopyResponse = CopyResponse;\nclass Field {\n    constructor(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, format) {\n        this.name = name;\n        this.tableID = tableID;\n        this.columnID = columnID;\n        this.dataTypeID = dataTypeID;\n        this.dataTypeSize = dataTypeSize;\n        this.dataTypeModifier = dataTypeModifier;\n        this.format = format;\n    }\n}\nexports.Field = Field;\nclass RowDescriptionMessage {\n    constructor(length, fieldCount) {\n        this.length = length;\n        this.fieldCount = fieldCount;\n        this.name = 'rowDescription';\n        this.fields = new Array(this.fieldCount);\n    }\n}\nexports.RowDescriptionMessage = RowDescriptionMessage;\nclass ParameterDescriptionMessage {\n    constructor(length, parameterCount) {\n        this.length = length;\n        this.parameterCount = parameterCount;\n        this.name = 'parameterDescription';\n        this.dataTypeIDs = new Array(this.parameterCount);\n    }\n}\nexports.ParameterDescriptionMessage = ParameterDescriptionMessage;\nclass ParameterStatusMessage {\n    constructor(length, parameterName, parameterValue) {\n        this.length = length;\n        this.parameterName = parameterName;\n        this.parameterValue = parameterValue;\n        this.name = 'parameterStatus';\n    }\n}\nexports.ParameterStatusMessage = ParameterStatusMessage;\nclass AuthenticationMD5Password {\n    constructor(length, salt) {\n        this.length = length;\n        this.salt = salt;\n        this.name = 'authenticationMD5Password';\n    }\n}\nexports.AuthenticationMD5Password = AuthenticationMD5Password;\nclass BackendKeyDataMessage {\n    constructor(length, processID, secretKey) {\n        this.length = length;\n        this.processID = processID;\n        this.secretKey = secretKey;\n        this.name = 'backendKeyData';\n    }\n}\nexports.BackendKeyDataMessage = BackendKeyDataMessage;\nclass NotificationResponseMessage {\n    constructor(length, processId, channel, payload) {\n        this.length = length;\n        this.processId = processId;\n        this.channel = channel;\n        this.payload = payload;\n        this.name = 'notification';\n    }\n}\nexports.NotificationResponseMessage = NotificationResponseMessage;\nclass ReadyForQueryMessage {\n    constructor(length, status) {\n        this.length = length;\n        this.status = status;\n        this.name = 'readyForQuery';\n    }\n}\nexports.ReadyForQueryMessage = ReadyForQueryMessage;\nclass CommandCompleteMessage {\n    constructor(length, text) {\n        this.length = length;\n        this.text = text;\n        this.name = 'commandComplete';\n    }\n}\nexports.CommandCompleteMessage = CommandCompleteMessage;\nclass DataRowMessage {\n    constructor(length, fields) {\n        this.length = length;\n        this.fields = fields;\n        this.name = 'dataRow';\n        this.fieldCount = fields.length;\n    }\n}\nexports.DataRowMessage = DataRowMessage;\nclass NoticeMessage {\n    constructor(length, message) {\n        this.length = length;\n        this.message = message;\n        this.name = 'notice';\n    }\n}\nexports.NoticeMessage = NoticeMessage;\n//# sourceMappingURL=messages.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-protocol/dist/messages.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-protocol/dist/parser.js":
/*!*************************************************!*\
  !*** ./node_modules/pg-protocol/dist/parser.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Parser = void 0;\nconst messages_1 = __webpack_require__(/*! ./messages */ \"(rsc)/./node_modules/pg-protocol/dist/messages.js\");\nconst buffer_reader_1 = __webpack_require__(/*! ./buffer-reader */ \"(rsc)/./node_modules/pg-protocol/dist/buffer-reader.js\");\n// every message is prefixed with a single bye\nconst CODE_LENGTH = 1;\n// every message has an int32 length which includes itself but does\n// NOT include the code in the length\nconst LEN_LENGTH = 4;\nconst HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH;\nconst emptyBuffer = Buffer.allocUnsafe(0);\nclass Parser {\n    constructor(opts) {\n        this.buffer = emptyBuffer;\n        this.bufferLength = 0;\n        this.bufferOffset = 0;\n        this.reader = new buffer_reader_1.BufferReader();\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'binary') {\n            throw new Error('Binary mode not supported yet');\n        }\n        this.mode = (opts === null || opts === void 0 ? void 0 : opts.mode) || 'text';\n    }\n    parse(buffer, callback) {\n        this.mergeBuffer(buffer);\n        const bufferFullLength = this.bufferOffset + this.bufferLength;\n        let offset = this.bufferOffset;\n        while (offset + HEADER_LENGTH <= bufferFullLength) {\n            // code is 1 byte long - it identifies the message type\n            const code = this.buffer[offset];\n            // length is 1 Uint32BE - it is the length of the message EXCLUDING the code\n            const length = this.buffer.readUInt32BE(offset + CODE_LENGTH);\n            const fullMessageLength = CODE_LENGTH + length;\n            if (fullMessageLength + offset <= bufferFullLength) {\n                const message = this.handlePacket(offset + HEADER_LENGTH, code, length, this.buffer);\n                callback(message);\n                offset += fullMessageLength;\n            }\n            else {\n                break;\n            }\n        }\n        if (offset === bufferFullLength) {\n            // No more use for the buffer\n            this.buffer = emptyBuffer;\n            this.bufferLength = 0;\n            this.bufferOffset = 0;\n        }\n        else {\n            // Adjust the cursors of remainingBuffer\n            this.bufferLength = bufferFullLength - offset;\n            this.bufferOffset = offset;\n        }\n    }\n    mergeBuffer(buffer) {\n        if (this.bufferLength > 0) {\n            const newLength = this.bufferLength + buffer.byteLength;\n            const newFullLength = newLength + this.bufferOffset;\n            if (newFullLength > this.buffer.byteLength) {\n                // We can't concat the new buffer with the remaining one\n                let newBuffer;\n                if (newLength <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) {\n                    // We can move the relevant part to the beginning of the buffer instead of allocating a new buffer\n                    newBuffer = this.buffer;\n                }\n                else {\n                    // Allocate a new larger buffer\n                    let newBufferLength = this.buffer.byteLength * 2;\n                    while (newLength >= newBufferLength) {\n                        newBufferLength *= 2;\n                    }\n                    newBuffer = Buffer.allocUnsafe(newBufferLength);\n                }\n                // Move the remaining buffer to the new one\n                this.buffer.copy(newBuffer, 0, this.bufferOffset, this.bufferOffset + this.bufferLength);\n                this.buffer = newBuffer;\n                this.bufferOffset = 0;\n            }\n            // Concat the new buffer with the remaining one\n            buffer.copy(this.buffer, this.bufferOffset + this.bufferLength);\n            this.bufferLength = newLength;\n        }\n        else {\n            this.buffer = buffer;\n            this.bufferOffset = 0;\n            this.bufferLength = buffer.byteLength;\n        }\n    }\n    handlePacket(offset, code, length, bytes) {\n        switch (code) {\n            case 50 /* MessageCodes.BindComplete */:\n                return messages_1.bindComplete;\n            case 49 /* MessageCodes.ParseComplete */:\n                return messages_1.parseComplete;\n            case 51 /* MessageCodes.CloseComplete */:\n                return messages_1.closeComplete;\n            case 110 /* MessageCodes.NoData */:\n                return messages_1.noData;\n            case 115 /* MessageCodes.PortalSuspended */:\n                return messages_1.portalSuspended;\n            case 99 /* MessageCodes.CopyDone */:\n                return messages_1.copyDone;\n            case 87 /* MessageCodes.ReplicationStart */:\n                return messages_1.replicationStart;\n            case 73 /* MessageCodes.EmptyQuery */:\n                return messages_1.emptyQuery;\n            case 68 /* MessageCodes.DataRow */:\n                return this.parseDataRowMessage(offset, length, bytes);\n            case 67 /* MessageCodes.CommandComplete */:\n                return this.parseCommandCompleteMessage(offset, length, bytes);\n            case 90 /* MessageCodes.ReadyForQuery */:\n                return this.parseReadyForQueryMessage(offset, length, bytes);\n            case 65 /* MessageCodes.NotificationResponse */:\n                return this.parseNotificationMessage(offset, length, bytes);\n            case 82 /* MessageCodes.AuthenticationResponse */:\n                return this.parseAuthenticationResponse(offset, length, bytes);\n            case 83 /* MessageCodes.ParameterStatus */:\n                return this.parseParameterStatusMessage(offset, length, bytes);\n            case 75 /* MessageCodes.BackendKeyData */:\n                return this.parseBackendKeyData(offset, length, bytes);\n            case 69 /* MessageCodes.ErrorMessage */:\n                return this.parseErrorMessage(offset, length, bytes, 'error');\n            case 78 /* MessageCodes.NoticeMessage */:\n                return this.parseErrorMessage(offset, length, bytes, 'notice');\n            case 84 /* MessageCodes.RowDescriptionMessage */:\n                return this.parseRowDescriptionMessage(offset, length, bytes);\n            case 116 /* MessageCodes.ParameterDescriptionMessage */:\n                return this.parseParameterDescriptionMessage(offset, length, bytes);\n            case 71 /* MessageCodes.CopyIn */:\n                return this.parseCopyInMessage(offset, length, bytes);\n            case 72 /* MessageCodes.CopyOut */:\n                return this.parseCopyOutMessage(offset, length, bytes);\n            case 100 /* MessageCodes.CopyData */:\n                return this.parseCopyData(offset, length, bytes);\n            default:\n                return new messages_1.DatabaseError('received invalid response: ' + code.toString(16), length, 'error');\n        }\n    }\n    parseReadyForQueryMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const status = this.reader.string(1);\n        return new messages_1.ReadyForQueryMessage(length, status);\n    }\n    parseCommandCompleteMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const text = this.reader.cstring();\n        return new messages_1.CommandCompleteMessage(length, text);\n    }\n    parseCopyData(offset, length, bytes) {\n        const chunk = bytes.slice(offset, offset + (length - 4));\n        return new messages_1.CopyDataMessage(length, chunk);\n    }\n    parseCopyInMessage(offset, length, bytes) {\n        return this.parseCopyMessage(offset, length, bytes, 'copyInResponse');\n    }\n    parseCopyOutMessage(offset, length, bytes) {\n        return this.parseCopyMessage(offset, length, bytes, 'copyOutResponse');\n    }\n    parseCopyMessage(offset, length, bytes, messageName) {\n        this.reader.setBuffer(offset, bytes);\n        const isBinary = this.reader.byte() !== 0;\n        const columnCount = this.reader.int16();\n        const message = new messages_1.CopyResponse(length, messageName, isBinary, columnCount);\n        for (let i = 0; i < columnCount; i++) {\n            message.columnTypes[i] = this.reader.int16();\n        }\n        return message;\n    }\n    parseNotificationMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const processId = this.reader.int32();\n        const channel = this.reader.cstring();\n        const payload = this.reader.cstring();\n        return new messages_1.NotificationResponseMessage(length, processId, channel, payload);\n    }\n    parseRowDescriptionMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const fieldCount = this.reader.int16();\n        const message = new messages_1.RowDescriptionMessage(length, fieldCount);\n        for (let i = 0; i < fieldCount; i++) {\n            message.fields[i] = this.parseField();\n        }\n        return message;\n    }\n    parseField() {\n        const name = this.reader.cstring();\n        const tableID = this.reader.uint32();\n        const columnID = this.reader.int16();\n        const dataTypeID = this.reader.uint32();\n        const dataTypeSize = this.reader.int16();\n        const dataTypeModifier = this.reader.int32();\n        const mode = this.reader.int16() === 0 ? 'text' : 'binary';\n        return new messages_1.Field(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, mode);\n    }\n    parseParameterDescriptionMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const parameterCount = this.reader.int16();\n        const message = new messages_1.ParameterDescriptionMessage(length, parameterCount);\n        for (let i = 0; i < parameterCount; i++) {\n            message.dataTypeIDs[i] = this.reader.int32();\n        }\n        return message;\n    }\n    parseDataRowMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const fieldCount = this.reader.int16();\n        const fields = new Array(fieldCount);\n        for (let i = 0; i < fieldCount; i++) {\n            const len = this.reader.int32();\n            // a -1 for length means the value of the field is null\n            fields[i] = len === -1 ? null : this.reader.string(len);\n        }\n        return new messages_1.DataRowMessage(length, fields);\n    }\n    parseParameterStatusMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const name = this.reader.cstring();\n        const value = this.reader.cstring();\n        return new messages_1.ParameterStatusMessage(length, name, value);\n    }\n    parseBackendKeyData(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const processID = this.reader.int32();\n        const secretKey = this.reader.int32();\n        return new messages_1.BackendKeyDataMessage(length, processID, secretKey);\n    }\n    parseAuthenticationResponse(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const code = this.reader.int32();\n        // TODO(bmc): maybe better types here\n        const message = {\n            name: 'authenticationOk',\n            length,\n        };\n        switch (code) {\n            case 0: // AuthenticationOk\n                break;\n            case 3: // AuthenticationCleartextPassword\n                if (message.length === 8) {\n                    message.name = 'authenticationCleartextPassword';\n                }\n                break;\n            case 5: // AuthenticationMD5Password\n                if (message.length === 12) {\n                    message.name = 'authenticationMD5Password';\n                    const salt = this.reader.bytes(4);\n                    return new messages_1.AuthenticationMD5Password(length, salt);\n                }\n                break;\n            case 10: // AuthenticationSASL\n                {\n                    message.name = 'authenticationSASL';\n                    message.mechanisms = [];\n                    let mechanism;\n                    do {\n                        mechanism = this.reader.cstring();\n                        if (mechanism) {\n                            message.mechanisms.push(mechanism);\n                        }\n                    } while (mechanism);\n                }\n                break;\n            case 11: // AuthenticationSASLContinue\n                message.name = 'authenticationSASLContinue';\n                message.data = this.reader.string(length - 8);\n                break;\n            case 12: // AuthenticationSASLFinal\n                message.name = 'authenticationSASLFinal';\n                message.data = this.reader.string(length - 8);\n                break;\n            default:\n                throw new Error('Unknown authenticationOk message type ' + code);\n        }\n        return message;\n    }\n    parseErrorMessage(offset, length, bytes, name) {\n        this.reader.setBuffer(offset, bytes);\n        const fields = {};\n        let fieldType = this.reader.string(1);\n        while (fieldType !== '\\0') {\n            fields[fieldType] = this.reader.cstring();\n            fieldType = this.reader.string(1);\n        }\n        const messageValue = fields.M;\n        const message = name === 'notice' ? new messages_1.NoticeMessage(length, messageValue) : new messages_1.DatabaseError(messageValue, length, name);\n        message.severity = fields.S;\n        message.code = fields.C;\n        message.detail = fields.D;\n        message.hint = fields.H;\n        message.position = fields.P;\n        message.internalPosition = fields.p;\n        message.internalQuery = fields.q;\n        message.where = fields.W;\n        message.schema = fields.s;\n        message.table = fields.t;\n        message.column = fields.c;\n        message.dataType = fields.d;\n        message.constraint = fields.n;\n        message.file = fields.F;\n        message.line = fields.L;\n        message.routine = fields.R;\n        return message;\n    }\n}\nexports.Parser = Parser;\n//# sourceMappingURL=parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-protocol/dist/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-protocol/dist/serializer.js":
/*!*****************************************************!*\
  !*** ./node_modules/pg-protocol/dist/serializer.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serialize = void 0;\nconst buffer_writer_1 = __webpack_require__(/*! ./buffer-writer */ \"(rsc)/./node_modules/pg-protocol/dist/buffer-writer.js\");\nconst writer = new buffer_writer_1.Writer();\nconst startup = (opts) => {\n    // protocol version\n    writer.addInt16(3).addInt16(0);\n    for (const key of Object.keys(opts)) {\n        writer.addCString(key).addCString(opts[key]);\n    }\n    writer.addCString('client_encoding').addCString('UTF8');\n    const bodyBuffer = writer.addCString('').flush();\n    // this message is sent without a code\n    const length = bodyBuffer.length + 4;\n    return new buffer_writer_1.Writer().addInt32(length).add(bodyBuffer).flush();\n};\nconst requestSsl = () => {\n    const response = Buffer.allocUnsafe(8);\n    response.writeInt32BE(8, 0);\n    response.writeInt32BE(80877103, 4);\n    return response;\n};\nconst password = (password) => {\n    return writer.addCString(password).flush(112 /* code.startup */);\n};\nconst sendSASLInitialResponseMessage = function (mechanism, initialResponse) {\n    // 0x70 = 'p'\n    writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse);\n    return writer.flush(112 /* code.startup */);\n};\nconst sendSCRAMClientFinalMessage = function (additionalData) {\n    return writer.addString(additionalData).flush(112 /* code.startup */);\n};\nconst query = (text) => {\n    return writer.addCString(text).flush(81 /* code.query */);\n};\nconst emptyArray = [];\nconst parse = (query) => {\n    // expect something like this:\n    // { name: 'queryName',\n    //   text: 'select * from blah',\n    //   types: ['int8', 'bool'] }\n    // normalize missing query names to allow for null\n    const name = query.name || '';\n    if (name.length > 63) {\n        console.error('Warning! Postgres only supports 63 characters for query names.');\n        console.error('You supplied %s (%s)', name, name.length);\n        console.error('This can cause conflicts and silent errors executing queries');\n    }\n    const types = query.types || emptyArray;\n    const len = types.length;\n    const buffer = writer\n        .addCString(name) // name of query\n        .addCString(query.text) // actual query text\n        .addInt16(len);\n    for (let i = 0; i < len; i++) {\n        buffer.addInt32(types[i]);\n    }\n    return writer.flush(80 /* code.parse */);\n};\nconst paramWriter = new buffer_writer_1.Writer();\nconst writeValues = function (values, valueMapper) {\n    for (let i = 0; i < values.length; i++) {\n        const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i];\n        if (mappedVal == null) {\n            // add the param type (string) to the writer\n            writer.addInt16(0 /* ParamType.STRING */);\n            // write -1 to the param writer to indicate null\n            paramWriter.addInt32(-1);\n        }\n        else if (mappedVal instanceof Buffer) {\n            // add the param type (binary) to the writer\n            writer.addInt16(1 /* ParamType.BINARY */);\n            // add the buffer to the param writer\n            paramWriter.addInt32(mappedVal.length);\n            paramWriter.add(mappedVal);\n        }\n        else {\n            // add the param type (string) to the writer\n            writer.addInt16(0 /* ParamType.STRING */);\n            paramWriter.addInt32(Buffer.byteLength(mappedVal));\n            paramWriter.addString(mappedVal);\n        }\n    }\n};\nconst bind = (config = {}) => {\n    // normalize config\n    const portal = config.portal || '';\n    const statement = config.statement || '';\n    const binary = config.binary || false;\n    const values = config.values || emptyArray;\n    const len = values.length;\n    writer.addCString(portal).addCString(statement);\n    writer.addInt16(len);\n    writeValues(values, config.valueMapper);\n    writer.addInt16(len);\n    writer.add(paramWriter.flush());\n    // format code\n    writer.addInt16(binary ? 1 /* ParamType.BINARY */ : 0 /* ParamType.STRING */);\n    return writer.flush(66 /* code.bind */);\n};\nconst emptyExecute = Buffer.from([69 /* code.execute */, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00]);\nconst execute = (config) => {\n    // this is the happy path for most queries\n    if (!config || (!config.portal && !config.rows)) {\n        return emptyExecute;\n    }\n    const portal = config.portal || '';\n    const rows = config.rows || 0;\n    const portalLength = Buffer.byteLength(portal);\n    const len = 4 + portalLength + 1 + 4;\n    // one extra bit for code\n    const buff = Buffer.allocUnsafe(1 + len);\n    buff[0] = 69 /* code.execute */;\n    buff.writeInt32BE(len, 1);\n    buff.write(portal, 5, 'utf-8');\n    buff[portalLength + 5] = 0; // null terminate portal cString\n    buff.writeUInt32BE(rows, buff.length - 4);\n    return buff;\n};\nconst cancel = (processID, secretKey) => {\n    const buffer = Buffer.allocUnsafe(16);\n    buffer.writeInt32BE(16, 0);\n    buffer.writeInt16BE(1234, 4);\n    buffer.writeInt16BE(5678, 6);\n    buffer.writeInt32BE(processID, 8);\n    buffer.writeInt32BE(secretKey, 12);\n    return buffer;\n};\nconst cstringMessage = (code, string) => {\n    const stringLen = Buffer.byteLength(string);\n    const len = 4 + stringLen + 1;\n    // one extra bit for code\n    const buffer = Buffer.allocUnsafe(1 + len);\n    buffer[0] = code;\n    buffer.writeInt32BE(len, 1);\n    buffer.write(string, 5, 'utf-8');\n    buffer[len] = 0; // null terminate cString\n    return buffer;\n};\nconst emptyDescribePortal = writer.addCString('P').flush(68 /* code.describe */);\nconst emptyDescribeStatement = writer.addCString('S').flush(68 /* code.describe */);\nconst describe = (msg) => {\n    return msg.name\n        ? cstringMessage(68 /* code.describe */, `${msg.type}${msg.name || ''}`)\n        : msg.type === 'P'\n            ? emptyDescribePortal\n            : emptyDescribeStatement;\n};\nconst close = (msg) => {\n    const text = `${msg.type}${msg.name || ''}`;\n    return cstringMessage(67 /* code.close */, text);\n};\nconst copyData = (chunk) => {\n    return writer.add(chunk).flush(100 /* code.copyFromChunk */);\n};\nconst copyFail = (message) => {\n    return cstringMessage(102 /* code.copyFail */, message);\n};\nconst codeOnlyBuffer = (code) => Buffer.from([code, 0x00, 0x00, 0x00, 0x04]);\nconst flushBuffer = codeOnlyBuffer(72 /* code.flush */);\nconst syncBuffer = codeOnlyBuffer(83 /* code.sync */);\nconst endBuffer = codeOnlyBuffer(88 /* code.end */);\nconst copyDoneBuffer = codeOnlyBuffer(99 /* code.copyDone */);\nconst serialize = {\n    startup,\n    password,\n    requestSsl,\n    sendSASLInitialResponseMessage,\n    sendSCRAMClientFinalMessage,\n    query,\n    parse,\n    bind,\n    execute,\n    describe,\n    close,\n    flush: () => flushBuffer,\n    sync: () => syncBuffer,\n    end: () => endBuffer,\n    copyData,\n    copyDone: () => copyDoneBuffer,\n    copyFail,\n    cancel,\n};\nexports.serialize = serialize;\n//# sourceMappingURL=serializer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-protocol/dist/serializer.js\n");

/***/ })

};
;