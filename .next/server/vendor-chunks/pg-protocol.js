"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pg-protocol";
exports.ids = ["vendor-chunks/pg-protocol"];
exports.modules = {

/***/ "(rsc)/./node_modules/pg-protocol/dist/buffer-reader.js":
/*!********************************************************!*\
  !*** ./node_modules/pg-protocol/dist/buffer-reader.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BufferReader = void 0;\nconst emptyBuffer = Buffer.allocUnsafe(0);\nclass BufferReader {\n    constructor(offset = 0) {\n        this.offset = offset;\n        this.buffer = emptyBuffer;\n        // TODO(bmc): support non-utf8 encoding?\n        this.encoding = 'utf-8';\n    }\n    setBuffer(offset, buffer) {\n        this.offset = offset;\n        this.buffer = buffer;\n    }\n    int16() {\n        const result = this.buffer.readInt16BE(this.offset);\n        this.offset += 2;\n        return result;\n    }\n    byte() {\n        const result = this.buffer[this.offset];\n        this.offset++;\n        return result;\n    }\n    int32() {\n        const result = this.buffer.readInt32BE(this.offset);\n        this.offset += 4;\n        return result;\n    }\n    uint32() {\n        const result = this.buffer.readUInt32BE(this.offset);\n        this.offset += 4;\n        return result;\n    }\n    string(length) {\n        const result = this.buffer.toString(this.encoding, this.offset, this.offset + length);\n        this.offset += length;\n        return result;\n    }\n    cstring() {\n        const start = this.offset;\n        let end = start;\n        // eslint-disable-next-line no-empty\n        while (this.buffer[end++] !== 0) { }\n        this.offset = end;\n        return this.buffer.toString(this.encoding, start, end - 1);\n    }\n    bytes(length) {\n        const result = this.buffer.slice(this.offset, this.offset + length);\n        this.offset += length;\n        return result;\n    }\n}\nexports.BufferReader = BufferReader;\n//# sourceMappingURL=buffer-reader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvdG9jb2wvZGlzdC9idWZmZXItcmVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy90cmFuZ2lha2lldC9Eb2N1bWVudHMvR2l0SHViL2dyZWVuYm9vay1jbXMvbm9kZV9tb2R1bGVzL3BnLXByb3RvY29sL2Rpc3QvYnVmZmVyLXJlYWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnVmZmVyUmVhZGVyID0gdm9pZCAwO1xuY29uc3QgZW1wdHlCdWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7XG5jbGFzcyBCdWZmZXJSZWFkZXIge1xuICAgIGNvbnN0cnVjdG9yKG9mZnNldCA9IDApIHtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gZW1wdHlCdWZmZXI7XG4gICAgICAgIC8vIFRPRE8oYm1jKTogc3VwcG9ydCBub24tdXRmOCBlbmNvZGluZz9cbiAgICAgICAgdGhpcy5lbmNvZGluZyA9ICd1dGYtOCc7XG4gICAgfVxuICAgIHNldEJ1ZmZlcihvZmZzZXQsIGJ1ZmZlcikge1xuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgfVxuICAgIGludDE2KCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmJ1ZmZlci5yZWFkSW50MTZCRSh0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGJ5dGUoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0XTtcbiAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgaW50MzIoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYnVmZmVyLnJlYWRJbnQzMkJFKHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgdWludDMyKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmJ1ZmZlci5yZWFkVUludDMyQkUodGhpcy5vZmZzZXQpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBzdHJpbmcobGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYnVmZmVyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIGxlbmd0aCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY3N0cmluZygpIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgbGV0IGVuZCA9IHN0YXJ0O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICAgICAgd2hpbGUgKHRoaXMuYnVmZmVyW2VuZCsrXSAhPT0gMCkgeyB9XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gZW5kO1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgc3RhcnQsIGVuZCAtIDEpO1xuICAgIH1cbiAgICBieXRlcyhsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5idWZmZXIuc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgbGVuZ3RoKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbmV4cG9ydHMuQnVmZmVyUmVhZGVyID0gQnVmZmVyUmVhZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyLXJlYWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-protocol/dist/buffer-reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-protocol/dist/buffer-writer.js":
/*!********************************************************!*\
  !*** ./node_modules/pg-protocol/dist/buffer-writer.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n//binary data writer tuned for encoding binary specific to the postgres binary protocol\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Writer = void 0;\nclass Writer {\n    constructor(size = 256) {\n        this.size = size;\n        this.offset = 5;\n        this.headerPosition = 0;\n        this.buffer = Buffer.allocUnsafe(size);\n    }\n    ensure(size) {\n        const remaining = this.buffer.length - this.offset;\n        if (remaining < size) {\n            const oldBuffer = this.buffer;\n            // exponential growth factor of around ~ 1.5\n            // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n            const newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\n            this.buffer = Buffer.allocUnsafe(newSize);\n            oldBuffer.copy(this.buffer);\n        }\n    }\n    addInt32(num) {\n        this.ensure(4);\n        this.buffer[this.offset++] = (num >>> 24) & 0xff;\n        this.buffer[this.offset++] = (num >>> 16) & 0xff;\n        this.buffer[this.offset++] = (num >>> 8) & 0xff;\n        this.buffer[this.offset++] = (num >>> 0) & 0xff;\n        return this;\n    }\n    addInt16(num) {\n        this.ensure(2);\n        this.buffer[this.offset++] = (num >>> 8) & 0xff;\n        this.buffer[this.offset++] = (num >>> 0) & 0xff;\n        return this;\n    }\n    addCString(string) {\n        if (!string) {\n            this.ensure(1);\n        }\n        else {\n            const len = Buffer.byteLength(string);\n            this.ensure(len + 1); // +1 for null terminator\n            this.buffer.write(string, this.offset, 'utf-8');\n            this.offset += len;\n        }\n        this.buffer[this.offset++] = 0; // null terminator\n        return this;\n    }\n    addString(string = '') {\n        const len = Buffer.byteLength(string);\n        this.ensure(len);\n        this.buffer.write(string, this.offset);\n        this.offset += len;\n        return this;\n    }\n    add(otherBuffer) {\n        this.ensure(otherBuffer.length);\n        otherBuffer.copy(this.buffer, this.offset);\n        this.offset += otherBuffer.length;\n        return this;\n    }\n    join(code) {\n        if (code) {\n            this.buffer[this.headerPosition] = code;\n            //length is everything in this packet minus the code\n            const length = this.offset - (this.headerPosition + 1);\n            this.buffer.writeInt32BE(length, this.headerPosition + 1);\n        }\n        return this.buffer.slice(code ? 0 : 5, this.offset);\n    }\n    flush(code) {\n        const result = this.join(code);\n        this.offset = 5;\n        this.headerPosition = 0;\n        this.buffer = Buffer.allocUnsafe(this.size);\n        return result;\n    }\n}\nexports.Writer = Writer;\n//# sourceMappingURL=buffer-writer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvdG9jb2wvZGlzdC9idWZmZXItd3JpdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QiLCJzb3VyY2VzIjpbIi9Vc2Vycy90cmFuZ2lha2lldC9Eb2N1bWVudHMvR2l0SHViL2dyZWVuYm9vay1jbXMvbm9kZV9tb2R1bGVzL3BnLXByb3RvY29sL2Rpc3QvYnVmZmVyLXdyaXRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vYmluYXJ5IGRhdGEgd3JpdGVyIHR1bmVkIGZvciBlbmNvZGluZyBiaW5hcnkgc3BlY2lmaWMgdG8gdGhlIHBvc3RncmVzIGJpbmFyeSBwcm90b2NvbFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Xcml0ZXIgPSB2b2lkIDA7XG5jbGFzcyBXcml0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHNpemUgPSAyNTYpIHtcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSA1O1xuICAgICAgICB0aGlzLmhlYWRlclBvc2l0aW9uID0gMDtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoc2l6ZSk7XG4gICAgfVxuICAgIGVuc3VyZShzaXplKSB7XG4gICAgICAgIGNvbnN0IHJlbWFpbmluZyA9IHRoaXMuYnVmZmVyLmxlbmd0aCAtIHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAocmVtYWluaW5nIDwgc2l6ZSkge1xuICAgICAgICAgICAgY29uc3Qgb2xkQnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgICAgICAvLyBleHBvbmVudGlhbCBncm93dGggZmFjdG9yIG9mIGFyb3VuZCB+IDEuNVxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjI2OTA2My9idWZmZXItZ3Jvd3RoLXN0cmF0ZWd5XG4gICAgICAgICAgICBjb25zdCBuZXdTaXplID0gb2xkQnVmZmVyLmxlbmd0aCArIChvbGRCdWZmZXIubGVuZ3RoID4+IDEpICsgc2l6ZTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKG5ld1NpemUpO1xuICAgICAgICAgICAgb2xkQnVmZmVyLmNvcHkodGhpcy5idWZmZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZEludDMyKG51bSkge1xuICAgICAgICB0aGlzLmVuc3VyZSg0KTtcbiAgICAgICAgdGhpcy5idWZmZXJbdGhpcy5vZmZzZXQrK10gPSAobnVtID4+PiAyNCkgJiAweGZmO1xuICAgICAgICB0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCsrXSA9IChudW0gPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgIHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdID0gKG51bSA+Pj4gOCkgJiAweGZmO1xuICAgICAgICB0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCsrXSA9IChudW0gPj4+IDApICYgMHhmZjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFkZEludDE2KG51bSkge1xuICAgICAgICB0aGlzLmVuc3VyZSgyKTtcbiAgICAgICAgdGhpcy5idWZmZXJbdGhpcy5vZmZzZXQrK10gPSAobnVtID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgIHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdID0gKG51bSA+Pj4gMCkgJiAweGZmO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYWRkQ1N0cmluZyhzdHJpbmcpIHtcbiAgICAgICAgaWYgKCFzdHJpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZW5zdXJlKDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgoc3RyaW5nKTtcbiAgICAgICAgICAgIHRoaXMuZW5zdXJlKGxlbiArIDEpOyAvLyArMSBmb3IgbnVsbCB0ZXJtaW5hdG9yXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci53cml0ZShzdHJpbmcsIHRoaXMub2Zmc2V0LCAndXRmLTgnKTtcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCsrXSA9IDA7IC8vIG51bGwgdGVybWluYXRvclxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYWRkU3RyaW5nKHN0cmluZyA9ICcnKSB7XG4gICAgICAgIGNvbnN0IGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHN0cmluZyk7XG4gICAgICAgIHRoaXMuZW5zdXJlKGxlbik7XG4gICAgICAgIHRoaXMuYnVmZmVyLndyaXRlKHN0cmluZywgdGhpcy5vZmZzZXQpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSBsZW47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhZGQob3RoZXJCdWZmZXIpIHtcbiAgICAgICAgdGhpcy5lbnN1cmUob3RoZXJCdWZmZXIubGVuZ3RoKTtcbiAgICAgICAgb3RoZXJCdWZmZXIuY29weSh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSBvdGhlckJ1ZmZlci5sZW5ndGg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBqb2luKGNvZGUpIHtcbiAgICAgICAgaWYgKGNvZGUpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyW3RoaXMuaGVhZGVyUG9zaXRpb25dID0gY29kZTtcbiAgICAgICAgICAgIC8vbGVuZ3RoIGlzIGV2ZXJ5dGhpbmcgaW4gdGhpcyBwYWNrZXQgbWludXMgdGhlIGNvZGVcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMub2Zmc2V0IC0gKHRoaXMuaGVhZGVyUG9zaXRpb24gKyAxKTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLndyaXRlSW50MzJCRShsZW5ndGgsIHRoaXMuaGVhZGVyUG9zaXRpb24gKyAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIuc2xpY2UoY29kZSA/IDAgOiA1LCB0aGlzLm9mZnNldCk7XG4gICAgfVxuICAgIGZsdXNoKGNvZGUpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5qb2luKGNvZGUpO1xuICAgICAgICB0aGlzLm9mZnNldCA9IDU7XG4gICAgICAgIHRoaXMuaGVhZGVyUG9zaXRpb24gPSAwO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSh0aGlzLnNpemUpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbmV4cG9ydHMuV3JpdGVyID0gV3JpdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyLXdyaXRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-protocol/dist/buffer-writer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-protocol/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/pg-protocol/dist/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DatabaseError = exports.serialize = exports.parse = void 0;\nconst messages_1 = __webpack_require__(/*! ./messages */ \"(rsc)/./node_modules/pg-protocol/dist/messages.js\");\nObject.defineProperty(exports, \"DatabaseError\", ({ enumerable: true, get: function () { return messages_1.DatabaseError; } }));\nconst serializer_1 = __webpack_require__(/*! ./serializer */ \"(rsc)/./node_modules/pg-protocol/dist/serializer.js\");\nObject.defineProperty(exports, \"serialize\", ({ enumerable: true, get: function () { return serializer_1.serialize; } }));\nconst parser_1 = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/pg-protocol/dist/parser.js\");\nfunction parse(stream, callback) {\n    const parser = new parser_1.Parser();\n    stream.on('data', (buffer) => parser.parse(buffer, callback));\n    return new Promise((resolve) => stream.on('end', () => resolve()));\n}\nexports.parse = parse;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvdG9jb2wvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUIsR0FBRyxpQkFBaUIsR0FBRyxhQUFhO0FBQ3pELG1CQUFtQixtQkFBTyxDQUFDLHFFQUFZO0FBQ3ZDLGlEQUFnRCxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUM1SCxxQkFBcUIsbUJBQU8sQ0FBQyx5RUFBYztBQUMzQyw2Q0FBNEMsRUFBRSxxQ0FBcUMsa0NBQWtDLEVBQUM7QUFDdEgsaUJBQWlCLG1CQUFPLENBQUMsaUVBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsiL1VzZXJzL3RyYW5naWFraWV0L0RvY3VtZW50cy9HaXRIdWIvZ3JlZW5ib29rLWNtcy9ub2RlX21vZHVsZXMvcGctcHJvdG9jb2wvZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGF0YWJhc2VFcnJvciA9IGV4cG9ydHMuc2VyaWFsaXplID0gZXhwb3J0cy5wYXJzZSA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSByZXF1aXJlKFwiLi9tZXNzYWdlc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRhdGFiYXNlRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuRGF0YWJhc2VFcnJvcjsgfSB9KTtcbmNvbnN0IHNlcmlhbGl6ZXJfMSA9IHJlcXVpcmUoXCIuL3NlcmlhbGl6ZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXJpYWxpemVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlcmlhbGl6ZXJfMS5zZXJpYWxpemU7IH0gfSk7XG5jb25zdCBwYXJzZXJfMSA9IHJlcXVpcmUoXCIuL3BhcnNlclwiKTtcbmZ1bmN0aW9uIHBhcnNlKHN0cmVhbSwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBwYXJzZXIgPSBuZXcgcGFyc2VyXzEuUGFyc2VyKCk7XG4gICAgc3RyZWFtLm9uKCdkYXRhJywgKGJ1ZmZlcikgPT4gcGFyc2VyLnBhcnNlKGJ1ZmZlciwgY2FsbGJhY2spKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHN0cmVhbS5vbignZW5kJywgKCkgPT4gcmVzb2x2ZSgpKSk7XG59XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-protocol/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-protocol/dist/messages.js":
/*!***************************************************!*\
  !*** ./node_modules/pg-protocol/dist/messages.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NoticeMessage = exports.DataRowMessage = exports.CommandCompleteMessage = exports.ReadyForQueryMessage = exports.NotificationResponseMessage = exports.BackendKeyDataMessage = exports.AuthenticationMD5Password = exports.ParameterStatusMessage = exports.ParameterDescriptionMessage = exports.RowDescriptionMessage = exports.Field = exports.CopyResponse = exports.CopyDataMessage = exports.DatabaseError = exports.copyDone = exports.emptyQuery = exports.replicationStart = exports.portalSuspended = exports.noData = exports.closeComplete = exports.bindComplete = exports.parseComplete = void 0;\nexports.parseComplete = {\n    name: 'parseComplete',\n    length: 5,\n};\nexports.bindComplete = {\n    name: 'bindComplete',\n    length: 5,\n};\nexports.closeComplete = {\n    name: 'closeComplete',\n    length: 5,\n};\nexports.noData = {\n    name: 'noData',\n    length: 5,\n};\nexports.portalSuspended = {\n    name: 'portalSuspended',\n    length: 5,\n};\nexports.replicationStart = {\n    name: 'replicationStart',\n    length: 4,\n};\nexports.emptyQuery = {\n    name: 'emptyQuery',\n    length: 4,\n};\nexports.copyDone = {\n    name: 'copyDone',\n    length: 4,\n};\nclass DatabaseError extends Error {\n    constructor(message, length, name) {\n        super(message);\n        this.length = length;\n        this.name = name;\n    }\n}\nexports.DatabaseError = DatabaseError;\nclass CopyDataMessage {\n    constructor(length, chunk) {\n        this.length = length;\n        this.chunk = chunk;\n        this.name = 'copyData';\n    }\n}\nexports.CopyDataMessage = CopyDataMessage;\nclass CopyResponse {\n    constructor(length, name, binary, columnCount) {\n        this.length = length;\n        this.name = name;\n        this.binary = binary;\n        this.columnTypes = new Array(columnCount);\n    }\n}\nexports.CopyResponse = CopyResponse;\nclass Field {\n    constructor(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, format) {\n        this.name = name;\n        this.tableID = tableID;\n        this.columnID = columnID;\n        this.dataTypeID = dataTypeID;\n        this.dataTypeSize = dataTypeSize;\n        this.dataTypeModifier = dataTypeModifier;\n        this.format = format;\n    }\n}\nexports.Field = Field;\nclass RowDescriptionMessage {\n    constructor(length, fieldCount) {\n        this.length = length;\n        this.fieldCount = fieldCount;\n        this.name = 'rowDescription';\n        this.fields = new Array(this.fieldCount);\n    }\n}\nexports.RowDescriptionMessage = RowDescriptionMessage;\nclass ParameterDescriptionMessage {\n    constructor(length, parameterCount) {\n        this.length = length;\n        this.parameterCount = parameterCount;\n        this.name = 'parameterDescription';\n        this.dataTypeIDs = new Array(this.parameterCount);\n    }\n}\nexports.ParameterDescriptionMessage = ParameterDescriptionMessage;\nclass ParameterStatusMessage {\n    constructor(length, parameterName, parameterValue) {\n        this.length = length;\n        this.parameterName = parameterName;\n        this.parameterValue = parameterValue;\n        this.name = 'parameterStatus';\n    }\n}\nexports.ParameterStatusMessage = ParameterStatusMessage;\nclass AuthenticationMD5Password {\n    constructor(length, salt) {\n        this.length = length;\n        this.salt = salt;\n        this.name = 'authenticationMD5Password';\n    }\n}\nexports.AuthenticationMD5Password = AuthenticationMD5Password;\nclass BackendKeyDataMessage {\n    constructor(length, processID, secretKey) {\n        this.length = length;\n        this.processID = processID;\n        this.secretKey = secretKey;\n        this.name = 'backendKeyData';\n    }\n}\nexports.BackendKeyDataMessage = BackendKeyDataMessage;\nclass NotificationResponseMessage {\n    constructor(length, processId, channel, payload) {\n        this.length = length;\n        this.processId = processId;\n        this.channel = channel;\n        this.payload = payload;\n        this.name = 'notification';\n    }\n}\nexports.NotificationResponseMessage = NotificationResponseMessage;\nclass ReadyForQueryMessage {\n    constructor(length, status) {\n        this.length = length;\n        this.status = status;\n        this.name = 'readyForQuery';\n    }\n}\nexports.ReadyForQueryMessage = ReadyForQueryMessage;\nclass CommandCompleteMessage {\n    constructor(length, text) {\n        this.length = length;\n        this.text = text;\n        this.name = 'commandComplete';\n    }\n}\nexports.CommandCompleteMessage = CommandCompleteMessage;\nclass DataRowMessage {\n    constructor(length, fields) {\n        this.length = length;\n        this.fields = fields;\n        this.name = 'dataRow';\n        this.fieldCount = fields.length;\n    }\n}\nexports.DataRowMessage = DataRowMessage;\nclass NoticeMessage {\n    constructor(length, message) {\n        this.length = length;\n        this.message = message;\n        this.name = 'notice';\n    }\n}\nexports.NoticeMessage = NoticeMessage;\n//# sourceMappingURL=messages.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-protocol/dist/messages.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-protocol/dist/parser.js":
/*!*************************************************!*\
  !*** ./node_modules/pg-protocol/dist/parser.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Parser = void 0;\nconst messages_1 = __webpack_require__(/*! ./messages */ \"(rsc)/./node_modules/pg-protocol/dist/messages.js\");\nconst buffer_reader_1 = __webpack_require__(/*! ./buffer-reader */ \"(rsc)/./node_modules/pg-protocol/dist/buffer-reader.js\");\n// every message is prefixed with a single bye\nconst CODE_LENGTH = 1;\n// every message has an int32 length which includes itself but does\n// NOT include the code in the length\nconst LEN_LENGTH = 4;\nconst HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH;\nconst emptyBuffer = Buffer.allocUnsafe(0);\nclass Parser {\n    constructor(opts) {\n        this.buffer = emptyBuffer;\n        this.bufferLength = 0;\n        this.bufferOffset = 0;\n        this.reader = new buffer_reader_1.BufferReader();\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'binary') {\n            throw new Error('Binary mode not supported yet');\n        }\n        this.mode = (opts === null || opts === void 0 ? void 0 : opts.mode) || 'text';\n    }\n    parse(buffer, callback) {\n        this.mergeBuffer(buffer);\n        const bufferFullLength = this.bufferOffset + this.bufferLength;\n        let offset = this.bufferOffset;\n        while (offset + HEADER_LENGTH <= bufferFullLength) {\n            // code is 1 byte long - it identifies the message type\n            const code = this.buffer[offset];\n            // length is 1 Uint32BE - it is the length of the message EXCLUDING the code\n            const length = this.buffer.readUInt32BE(offset + CODE_LENGTH);\n            const fullMessageLength = CODE_LENGTH + length;\n            if (fullMessageLength + offset <= bufferFullLength) {\n                const message = this.handlePacket(offset + HEADER_LENGTH, code, length, this.buffer);\n                callback(message);\n                offset += fullMessageLength;\n            }\n            else {\n                break;\n            }\n        }\n        if (offset === bufferFullLength) {\n            // No more use for the buffer\n            this.buffer = emptyBuffer;\n            this.bufferLength = 0;\n            this.bufferOffset = 0;\n        }\n        else {\n            // Adjust the cursors of remainingBuffer\n            this.bufferLength = bufferFullLength - offset;\n            this.bufferOffset = offset;\n        }\n    }\n    mergeBuffer(buffer) {\n        if (this.bufferLength > 0) {\n            const newLength = this.bufferLength + buffer.byteLength;\n            const newFullLength = newLength + this.bufferOffset;\n            if (newFullLength > this.buffer.byteLength) {\n                // We can't concat the new buffer with the remaining one\n                let newBuffer;\n                if (newLength <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) {\n                    // We can move the relevant part to the beginning of the buffer instead of allocating a new buffer\n                    newBuffer = this.buffer;\n                }\n                else {\n                    // Allocate a new larger buffer\n                    let newBufferLength = this.buffer.byteLength * 2;\n                    while (newLength >= newBufferLength) {\n                        newBufferLength *= 2;\n                    }\n                    newBuffer = Buffer.allocUnsafe(newBufferLength);\n                }\n                // Move the remaining buffer to the new one\n                this.buffer.copy(newBuffer, 0, this.bufferOffset, this.bufferOffset + this.bufferLength);\n                this.buffer = newBuffer;\n                this.bufferOffset = 0;\n            }\n            // Concat the new buffer with the remaining one\n            buffer.copy(this.buffer, this.bufferOffset + this.bufferLength);\n            this.bufferLength = newLength;\n        }\n        else {\n            this.buffer = buffer;\n            this.bufferOffset = 0;\n            this.bufferLength = buffer.byteLength;\n        }\n    }\n    handlePacket(offset, code, length, bytes) {\n        switch (code) {\n            case 50 /* MessageCodes.BindComplete */:\n                return messages_1.bindComplete;\n            case 49 /* MessageCodes.ParseComplete */:\n                return messages_1.parseComplete;\n            case 51 /* MessageCodes.CloseComplete */:\n                return messages_1.closeComplete;\n            case 110 /* MessageCodes.NoData */:\n                return messages_1.noData;\n            case 115 /* MessageCodes.PortalSuspended */:\n                return messages_1.portalSuspended;\n            case 99 /* MessageCodes.CopyDone */:\n                return messages_1.copyDone;\n            case 87 /* MessageCodes.ReplicationStart */:\n                return messages_1.replicationStart;\n            case 73 /* MessageCodes.EmptyQuery */:\n                return messages_1.emptyQuery;\n            case 68 /* MessageCodes.DataRow */:\n                return this.parseDataRowMessage(offset, length, bytes);\n            case 67 /* MessageCodes.CommandComplete */:\n                return this.parseCommandCompleteMessage(offset, length, bytes);\n            case 90 /* MessageCodes.ReadyForQuery */:\n                return this.parseReadyForQueryMessage(offset, length, bytes);\n            case 65 /* MessageCodes.NotificationResponse */:\n                return this.parseNotificationMessage(offset, length, bytes);\n            case 82 /* MessageCodes.AuthenticationResponse */:\n                return this.parseAuthenticationResponse(offset, length, bytes);\n            case 83 /* MessageCodes.ParameterStatus */:\n                return this.parseParameterStatusMessage(offset, length, bytes);\n            case 75 /* MessageCodes.BackendKeyData */:\n                return this.parseBackendKeyData(offset, length, bytes);\n            case 69 /* MessageCodes.ErrorMessage */:\n                return this.parseErrorMessage(offset, length, bytes, 'error');\n            case 78 /* MessageCodes.NoticeMessage */:\n                return this.parseErrorMessage(offset, length, bytes, 'notice');\n            case 84 /* MessageCodes.RowDescriptionMessage */:\n                return this.parseRowDescriptionMessage(offset, length, bytes);\n            case 116 /* MessageCodes.ParameterDescriptionMessage */:\n                return this.parseParameterDescriptionMessage(offset, length, bytes);\n            case 71 /* MessageCodes.CopyIn */:\n                return this.parseCopyInMessage(offset, length, bytes);\n            case 72 /* MessageCodes.CopyOut */:\n                return this.parseCopyOutMessage(offset, length, bytes);\n            case 100 /* MessageCodes.CopyData */:\n                return this.parseCopyData(offset, length, bytes);\n            default:\n                return new messages_1.DatabaseError('received invalid response: ' + code.toString(16), length, 'error');\n        }\n    }\n    parseReadyForQueryMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const status = this.reader.string(1);\n        return new messages_1.ReadyForQueryMessage(length, status);\n    }\n    parseCommandCompleteMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const text = this.reader.cstring();\n        return new messages_1.CommandCompleteMessage(length, text);\n    }\n    parseCopyData(offset, length, bytes) {\n        const chunk = bytes.slice(offset, offset + (length - 4));\n        return new messages_1.CopyDataMessage(length, chunk);\n    }\n    parseCopyInMessage(offset, length, bytes) {\n        return this.parseCopyMessage(offset, length, bytes, 'copyInResponse');\n    }\n    parseCopyOutMessage(offset, length, bytes) {\n        return this.parseCopyMessage(offset, length, bytes, 'copyOutResponse');\n    }\n    parseCopyMessage(offset, length, bytes, messageName) {\n        this.reader.setBuffer(offset, bytes);\n        const isBinary = this.reader.byte() !== 0;\n        const columnCount = this.reader.int16();\n        const message = new messages_1.CopyResponse(length, messageName, isBinary, columnCount);\n        for (let i = 0; i < columnCount; i++) {\n            message.columnTypes[i] = this.reader.int16();\n        }\n        return message;\n    }\n    parseNotificationMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const processId = this.reader.int32();\n        const channel = this.reader.cstring();\n        const payload = this.reader.cstring();\n        return new messages_1.NotificationResponseMessage(length, processId, channel, payload);\n    }\n    parseRowDescriptionMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const fieldCount = this.reader.int16();\n        const message = new messages_1.RowDescriptionMessage(length, fieldCount);\n        for (let i = 0; i < fieldCount; i++) {\n            message.fields[i] = this.parseField();\n        }\n        return message;\n    }\n    parseField() {\n        const name = this.reader.cstring();\n        const tableID = this.reader.uint32();\n        const columnID = this.reader.int16();\n        const dataTypeID = this.reader.uint32();\n        const dataTypeSize = this.reader.int16();\n        const dataTypeModifier = this.reader.int32();\n        const mode = this.reader.int16() === 0 ? 'text' : 'binary';\n        return new messages_1.Field(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, mode);\n    }\n    parseParameterDescriptionMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const parameterCount = this.reader.int16();\n        const message = new messages_1.ParameterDescriptionMessage(length, parameterCount);\n        for (let i = 0; i < parameterCount; i++) {\n            message.dataTypeIDs[i] = this.reader.int32();\n        }\n        return message;\n    }\n    parseDataRowMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const fieldCount = this.reader.int16();\n        const fields = new Array(fieldCount);\n        for (let i = 0; i < fieldCount; i++) {\n            const len = this.reader.int32();\n            // a -1 for length means the value of the field is null\n            fields[i] = len === -1 ? null : this.reader.string(len);\n        }\n        return new messages_1.DataRowMessage(length, fields);\n    }\n    parseParameterStatusMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const name = this.reader.cstring();\n        const value = this.reader.cstring();\n        return new messages_1.ParameterStatusMessage(length, name, value);\n    }\n    parseBackendKeyData(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const processID = this.reader.int32();\n        const secretKey = this.reader.int32();\n        return new messages_1.BackendKeyDataMessage(length, processID, secretKey);\n    }\n    parseAuthenticationResponse(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const code = this.reader.int32();\n        // TODO(bmc): maybe better types here\n        const message = {\n            name: 'authenticationOk',\n            length,\n        };\n        switch (code) {\n            case 0: // AuthenticationOk\n                break;\n            case 3: // AuthenticationCleartextPassword\n                if (message.length === 8) {\n                    message.name = 'authenticationCleartextPassword';\n                }\n                break;\n            case 5: // AuthenticationMD5Password\n                if (message.length === 12) {\n                    message.name = 'authenticationMD5Password';\n                    const salt = this.reader.bytes(4);\n                    return new messages_1.AuthenticationMD5Password(length, salt);\n                }\n                break;\n            case 10: // AuthenticationSASL\n                {\n                    message.name = 'authenticationSASL';\n                    message.mechanisms = [];\n                    let mechanism;\n                    do {\n                        mechanism = this.reader.cstring();\n                        if (mechanism) {\n                            message.mechanisms.push(mechanism);\n                        }\n                    } while (mechanism);\n                }\n                break;\n            case 11: // AuthenticationSASLContinue\n                message.name = 'authenticationSASLContinue';\n                message.data = this.reader.string(length - 8);\n                break;\n            case 12: // AuthenticationSASLFinal\n                message.name = 'authenticationSASLFinal';\n                message.data = this.reader.string(length - 8);\n                break;\n            default:\n                throw new Error('Unknown authenticationOk message type ' + code);\n        }\n        return message;\n    }\n    parseErrorMessage(offset, length, bytes, name) {\n        this.reader.setBuffer(offset, bytes);\n        const fields = {};\n        let fieldType = this.reader.string(1);\n        while (fieldType !== '\\0') {\n            fields[fieldType] = this.reader.cstring();\n            fieldType = this.reader.string(1);\n        }\n        const messageValue = fields.M;\n        const message = name === 'notice' ? new messages_1.NoticeMessage(length, messageValue) : new messages_1.DatabaseError(messageValue, length, name);\n        message.severity = fields.S;\n        message.code = fields.C;\n        message.detail = fields.D;\n        message.hint = fields.H;\n        message.position = fields.P;\n        message.internalPosition = fields.p;\n        message.internalQuery = fields.q;\n        message.where = fields.W;\n        message.schema = fields.s;\n        message.table = fields.t;\n        message.column = fields.c;\n        message.dataType = fields.d;\n        message.constraint = fields.n;\n        message.file = fields.F;\n        message.line = fields.L;\n        message.routine = fields.R;\n        return message;\n    }\n}\nexports.Parser = Parser;\n//# sourceMappingURL=parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctcHJvdG9jb2wvZGlzdC9wYXJzZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkLG1CQUFtQixtQkFBTyxDQUFDLHFFQUFZO0FBQ3ZDLHdCQUF3QixtQkFBTyxDQUFDLCtFQUFpQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixvQkFBb0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QiLCJzb3VyY2VzIjpbIi9Vc2Vycy90cmFuZ2lha2lldC9Eb2N1bWVudHMvR2l0SHViL2dyZWVuYm9vay1jbXMvbm9kZV9tb2R1bGVzL3BnLXByb3RvY29sL2Rpc3QvcGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QYXJzZXIgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gcmVxdWlyZShcIi4vbWVzc2FnZXNcIik7XG5jb25zdCBidWZmZXJfcmVhZGVyXzEgPSByZXF1aXJlKFwiLi9idWZmZXItcmVhZGVyXCIpO1xuLy8gZXZlcnkgbWVzc2FnZSBpcyBwcmVmaXhlZCB3aXRoIGEgc2luZ2xlIGJ5ZVxuY29uc3QgQ09ERV9MRU5HVEggPSAxO1xuLy8gZXZlcnkgbWVzc2FnZSBoYXMgYW4gaW50MzIgbGVuZ3RoIHdoaWNoIGluY2x1ZGVzIGl0c2VsZiBidXQgZG9lc1xuLy8gTk9UIGluY2x1ZGUgdGhlIGNvZGUgaW4gdGhlIGxlbmd0aFxuY29uc3QgTEVOX0xFTkdUSCA9IDQ7XG5jb25zdCBIRUFERVJfTEVOR1RIID0gQ09ERV9MRU5HVEggKyBMRU5fTEVOR1RIO1xuY29uc3QgZW1wdHlCdWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7XG5jbGFzcyBQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBlbXB0eUJ1ZmZlcjtcbiAgICAgICAgdGhpcy5idWZmZXJMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMucmVhZGVyID0gbmV3IGJ1ZmZlcl9yZWFkZXJfMS5CdWZmZXJSZWFkZXIoKTtcbiAgICAgICAgaWYgKChvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMubW9kZSkgPT09ICdiaW5hcnknKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JpbmFyeSBtb2RlIG5vdCBzdXBwb3J0ZWQgeWV0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb2RlID0gKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5tb2RlKSB8fCAndGV4dCc7XG4gICAgfVxuICAgIHBhcnNlKGJ1ZmZlciwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5tZXJnZUJ1ZmZlcihidWZmZXIpO1xuICAgICAgICBjb25zdCBidWZmZXJGdWxsTGVuZ3RoID0gdGhpcy5idWZmZXJPZmZzZXQgKyB0aGlzLmJ1ZmZlckxlbmd0aDtcbiAgICAgICAgbGV0IG9mZnNldCA9IHRoaXMuYnVmZmVyT2Zmc2V0O1xuICAgICAgICB3aGlsZSAob2Zmc2V0ICsgSEVBREVSX0xFTkdUSCA8PSBidWZmZXJGdWxsTGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBjb2RlIGlzIDEgYnl0ZSBsb25nIC0gaXQgaWRlbnRpZmllcyB0aGUgbWVzc2FnZSB0eXBlXG4gICAgICAgICAgICBjb25zdCBjb2RlID0gdGhpcy5idWZmZXJbb2Zmc2V0XTtcbiAgICAgICAgICAgIC8vIGxlbmd0aCBpcyAxIFVpbnQzMkJFIC0gaXQgaXMgdGhlIGxlbmd0aCBvZiB0aGUgbWVzc2FnZSBFWENMVURJTkcgdGhlIGNvZGVcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuYnVmZmVyLnJlYWRVSW50MzJCRShvZmZzZXQgKyBDT0RFX0xFTkdUSCk7XG4gICAgICAgICAgICBjb25zdCBmdWxsTWVzc2FnZUxlbmd0aCA9IENPREVfTEVOR1RIICsgbGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGZ1bGxNZXNzYWdlTGVuZ3RoICsgb2Zmc2V0IDw9IGJ1ZmZlckZ1bGxMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5oYW5kbGVQYWNrZXQob2Zmc2V0ICsgSEVBREVSX0xFTkdUSCwgY29kZSwgbGVuZ3RoLCB0aGlzLmJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGZ1bGxNZXNzYWdlTGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCA9PT0gYnVmZmVyRnVsbExlbmd0aCkge1xuICAgICAgICAgICAgLy8gTm8gbW9yZSB1c2UgZm9yIHRoZSBidWZmZXJcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gZW1wdHlCdWZmZXI7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBBZGp1c3QgdGhlIGN1cnNvcnMgb2YgcmVtYWluaW5nQnVmZmVyXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlckxlbmd0aCA9IGJ1ZmZlckZ1bGxMZW5ndGggLSBvZmZzZXQ7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtZXJnZUJ1ZmZlcihidWZmZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyTGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgbmV3TGVuZ3RoID0gdGhpcy5idWZmZXJMZW5ndGggKyBidWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IG5ld0Z1bGxMZW5ndGggPSBuZXdMZW5ndGggKyB0aGlzLmJ1ZmZlck9mZnNldDtcbiAgICAgICAgICAgIGlmIChuZXdGdWxsTGVuZ3RoID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGNhbid0IGNvbmNhdCB0aGUgbmV3IGJ1ZmZlciB3aXRoIHRoZSByZW1haW5pbmcgb25lXG4gICAgICAgICAgICAgICAgbGV0IG5ld0J1ZmZlcjtcbiAgICAgICAgICAgICAgICBpZiAobmV3TGVuZ3RoIDw9IHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGggJiYgdGhpcy5idWZmZXJPZmZzZXQgPj0gdGhpcy5idWZmZXJMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2FuIG1vdmUgdGhlIHJlbGV2YW50IHBhcnQgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgYnVmZmVyIGluc3RlYWQgb2YgYWxsb2NhdGluZyBhIG5ldyBidWZmZXJcbiAgICAgICAgICAgICAgICAgICAgbmV3QnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBBbGxvY2F0ZSBhIG5ldyBsYXJnZXIgYnVmZmVyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdCdWZmZXJMZW5ndGggPSB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoICogMjtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5ld0xlbmd0aCA+PSBuZXdCdWZmZXJMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0J1ZmZlckxlbmd0aCAqPSAyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5ld0J1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuZXdCdWZmZXJMZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBNb3ZlIHRoZSByZW1haW5pbmcgYnVmZmVyIHRvIHRoZSBuZXcgb25lXG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXIuY29weShuZXdCdWZmZXIsIDAsIHRoaXMuYnVmZmVyT2Zmc2V0LCB0aGlzLmJ1ZmZlck9mZnNldCArIHRoaXMuYnVmZmVyTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ld0J1ZmZlcjtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDb25jYXQgdGhlIG5ldyBidWZmZXIgd2l0aCB0aGUgcmVtYWluaW5nIG9uZVxuICAgICAgICAgICAgYnVmZmVyLmNvcHkodGhpcy5idWZmZXIsIHRoaXMuYnVmZmVyT2Zmc2V0ICsgdGhpcy5idWZmZXJMZW5ndGgpO1xuICAgICAgICAgICAgdGhpcy5idWZmZXJMZW5ndGggPSBuZXdMZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlUGFja2V0KG9mZnNldCwgY29kZSwgbGVuZ3RoLCBieXRlcykge1xuICAgICAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgNTAgLyogTWVzc2FnZUNvZGVzLkJpbmRDb21wbGV0ZSAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZXNfMS5iaW5kQ29tcGxldGU7XG4gICAgICAgICAgICBjYXNlIDQ5IC8qIE1lc3NhZ2VDb2Rlcy5QYXJzZUNvbXBsZXRlICovOlxuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlc18xLnBhcnNlQ29tcGxldGU7XG4gICAgICAgICAgICBjYXNlIDUxIC8qIE1lc3NhZ2VDb2Rlcy5DbG9zZUNvbXBsZXRlICovOlxuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlc18xLmNsb3NlQ29tcGxldGU7XG4gICAgICAgICAgICBjYXNlIDExMCAvKiBNZXNzYWdlQ29kZXMuTm9EYXRhICovOlxuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlc18xLm5vRGF0YTtcbiAgICAgICAgICAgIGNhc2UgMTE1IC8qIE1lc3NhZ2VDb2Rlcy5Qb3J0YWxTdXNwZW5kZWQgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VzXzEucG9ydGFsU3VzcGVuZGVkO1xuICAgICAgICAgICAgY2FzZSA5OSAvKiBNZXNzYWdlQ29kZXMuQ29weURvbmUgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VzXzEuY29weURvbmU7XG4gICAgICAgICAgICBjYXNlIDg3IC8qIE1lc3NhZ2VDb2Rlcy5SZXBsaWNhdGlvblN0YXJ0ICovOlxuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlc18xLnJlcGxpY2F0aW9uU3RhcnQ7XG4gICAgICAgICAgICBjYXNlIDczIC8qIE1lc3NhZ2VDb2Rlcy5FbXB0eVF1ZXJ5ICovOlxuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlc18xLmVtcHR5UXVlcnk7XG4gICAgICAgICAgICBjYXNlIDY4IC8qIE1lc3NhZ2VDb2Rlcy5EYXRhUm93ICovOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRGF0YVJvd01lc3NhZ2Uob2Zmc2V0LCBsZW5ndGgsIGJ5dGVzKTtcbiAgICAgICAgICAgIGNhc2UgNjcgLyogTWVzc2FnZUNvZGVzLkNvbW1hbmRDb21wbGV0ZSAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUNvbW1hbmRDb21wbGV0ZU1lc3NhZ2Uob2Zmc2V0LCBsZW5ndGgsIGJ5dGVzKTtcbiAgICAgICAgICAgIGNhc2UgOTAgLyogTWVzc2FnZUNvZGVzLlJlYWR5Rm9yUXVlcnkgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VSZWFkeUZvclF1ZXJ5TWVzc2FnZShvZmZzZXQsIGxlbmd0aCwgYnl0ZXMpO1xuICAgICAgICAgICAgY2FzZSA2NSAvKiBNZXNzYWdlQ29kZXMuTm90aWZpY2F0aW9uUmVzcG9uc2UgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VOb3RpZmljYXRpb25NZXNzYWdlKG9mZnNldCwgbGVuZ3RoLCBieXRlcyk7XG4gICAgICAgICAgICBjYXNlIDgyIC8qIE1lc3NhZ2VDb2Rlcy5BdXRoZW50aWNhdGlvblJlc3BvbnNlICovOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlQXV0aGVudGljYXRpb25SZXNwb25zZShvZmZzZXQsIGxlbmd0aCwgYnl0ZXMpO1xuICAgICAgICAgICAgY2FzZSA4MyAvKiBNZXNzYWdlQ29kZXMuUGFyYW1ldGVyU3RhdHVzICovOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlUGFyYW1ldGVyU3RhdHVzTWVzc2FnZShvZmZzZXQsIGxlbmd0aCwgYnl0ZXMpO1xuICAgICAgICAgICAgY2FzZSA3NSAvKiBNZXNzYWdlQ29kZXMuQmFja2VuZEtleURhdGEgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VCYWNrZW5kS2V5RGF0YShvZmZzZXQsIGxlbmd0aCwgYnl0ZXMpO1xuICAgICAgICAgICAgY2FzZSA2OSAvKiBNZXNzYWdlQ29kZXMuRXJyb3JNZXNzYWdlICovOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXJyb3JNZXNzYWdlKG9mZnNldCwgbGVuZ3RoLCBieXRlcywgJ2Vycm9yJyk7XG4gICAgICAgICAgICBjYXNlIDc4IC8qIE1lc3NhZ2VDb2Rlcy5Ob3RpY2VNZXNzYWdlICovOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXJyb3JNZXNzYWdlKG9mZnNldCwgbGVuZ3RoLCBieXRlcywgJ25vdGljZScpO1xuICAgICAgICAgICAgY2FzZSA4NCAvKiBNZXNzYWdlQ29kZXMuUm93RGVzY3JpcHRpb25NZXNzYWdlICovOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlUm93RGVzY3JpcHRpb25NZXNzYWdlKG9mZnNldCwgbGVuZ3RoLCBieXRlcyk7XG4gICAgICAgICAgICBjYXNlIDExNiAvKiBNZXNzYWdlQ29kZXMuUGFyYW1ldGVyRGVzY3JpcHRpb25NZXNzYWdlICovOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlUGFyYW1ldGVyRGVzY3JpcHRpb25NZXNzYWdlKG9mZnNldCwgbGVuZ3RoLCBieXRlcyk7XG4gICAgICAgICAgICBjYXNlIDcxIC8qIE1lc3NhZ2VDb2Rlcy5Db3B5SW4gKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VDb3B5SW5NZXNzYWdlKG9mZnNldCwgbGVuZ3RoLCBieXRlcyk7XG4gICAgICAgICAgICBjYXNlIDcyIC8qIE1lc3NhZ2VDb2Rlcy5Db3B5T3V0ICovOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlQ29weU91dE1lc3NhZ2Uob2Zmc2V0LCBsZW5ndGgsIGJ5dGVzKTtcbiAgICAgICAgICAgIGNhc2UgMTAwIC8qIE1lc3NhZ2VDb2Rlcy5Db3B5RGF0YSAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUNvcHlEYXRhKG9mZnNldCwgbGVuZ3RoLCBieXRlcyk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbWVzc2FnZXNfMS5EYXRhYmFzZUVycm9yKCdyZWNlaXZlZCBpbnZhbGlkIHJlc3BvbnNlOiAnICsgY29kZS50b1N0cmluZygxNiksIGxlbmd0aCwgJ2Vycm9yJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFyc2VSZWFkeUZvclF1ZXJ5TWVzc2FnZShvZmZzZXQsIGxlbmd0aCwgYnl0ZXMpIHtcbiAgICAgICAgdGhpcy5yZWFkZXIuc2V0QnVmZmVyKG9mZnNldCwgYnl0ZXMpO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSB0aGlzLnJlYWRlci5zdHJpbmcoMSk7XG4gICAgICAgIHJldHVybiBuZXcgbWVzc2FnZXNfMS5SZWFkeUZvclF1ZXJ5TWVzc2FnZShsZW5ndGgsIHN0YXR1cyk7XG4gICAgfVxuICAgIHBhcnNlQ29tbWFuZENvbXBsZXRlTWVzc2FnZShvZmZzZXQsIGxlbmd0aCwgYnl0ZXMpIHtcbiAgICAgICAgdGhpcy5yZWFkZXIuc2V0QnVmZmVyKG9mZnNldCwgYnl0ZXMpO1xuICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy5yZWFkZXIuY3N0cmluZygpO1xuICAgICAgICByZXR1cm4gbmV3IG1lc3NhZ2VzXzEuQ29tbWFuZENvbXBsZXRlTWVzc2FnZShsZW5ndGgsIHRleHQpO1xuICAgIH1cbiAgICBwYXJzZUNvcHlEYXRhKG9mZnNldCwgbGVuZ3RoLCBieXRlcykge1xuICAgICAgICBjb25zdCBjaHVuayA9IGJ5dGVzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgKGxlbmd0aCAtIDQpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBtZXNzYWdlc18xLkNvcHlEYXRhTWVzc2FnZShsZW5ndGgsIGNodW5rKTtcbiAgICB9XG4gICAgcGFyc2VDb3B5SW5NZXNzYWdlKG9mZnNldCwgbGVuZ3RoLCBieXRlcykge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUNvcHlNZXNzYWdlKG9mZnNldCwgbGVuZ3RoLCBieXRlcywgJ2NvcHlJblJlc3BvbnNlJyk7XG4gICAgfVxuICAgIHBhcnNlQ29weU91dE1lc3NhZ2Uob2Zmc2V0LCBsZW5ndGgsIGJ5dGVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlQ29weU1lc3NhZ2Uob2Zmc2V0LCBsZW5ndGgsIGJ5dGVzLCAnY29weU91dFJlc3BvbnNlJyk7XG4gICAgfVxuICAgIHBhcnNlQ29weU1lc3NhZ2Uob2Zmc2V0LCBsZW5ndGgsIGJ5dGVzLCBtZXNzYWdlTmFtZSkge1xuICAgICAgICB0aGlzLnJlYWRlci5zZXRCdWZmZXIob2Zmc2V0LCBieXRlcyk7XG4gICAgICAgIGNvbnN0IGlzQmluYXJ5ID0gdGhpcy5yZWFkZXIuYnl0ZSgpICE9PSAwO1xuICAgICAgICBjb25zdCBjb2x1bW5Db3VudCA9IHRoaXMucmVhZGVyLmludDE2KCk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBuZXcgbWVzc2FnZXNfMS5Db3B5UmVzcG9uc2UobGVuZ3RoLCBtZXNzYWdlTmFtZSwgaXNCaW5hcnksIGNvbHVtbkNvdW50KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2x1bW5Db3VudDsgaSsrKSB7XG4gICAgICAgICAgICBtZXNzYWdlLmNvbHVtblR5cGVzW2ldID0gdGhpcy5yZWFkZXIuaW50MTYoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgcGFyc2VOb3RpZmljYXRpb25NZXNzYWdlKG9mZnNldCwgbGVuZ3RoLCBieXRlcykge1xuICAgICAgICB0aGlzLnJlYWRlci5zZXRCdWZmZXIob2Zmc2V0LCBieXRlcyk7XG4gICAgICAgIGNvbnN0IHByb2Nlc3NJZCA9IHRoaXMucmVhZGVyLmludDMyKCk7XG4gICAgICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLnJlYWRlci5jc3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB0aGlzLnJlYWRlci5jc3RyaW5nKCk7XG4gICAgICAgIHJldHVybiBuZXcgbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25SZXNwb25zZU1lc3NhZ2UobGVuZ3RoLCBwcm9jZXNzSWQsIGNoYW5uZWwsIHBheWxvYWQpO1xuICAgIH1cbiAgICBwYXJzZVJvd0Rlc2NyaXB0aW9uTWVzc2FnZShvZmZzZXQsIGxlbmd0aCwgYnl0ZXMpIHtcbiAgICAgICAgdGhpcy5yZWFkZXIuc2V0QnVmZmVyKG9mZnNldCwgYnl0ZXMpO1xuICAgICAgICBjb25zdCBmaWVsZENvdW50ID0gdGhpcy5yZWFkZXIuaW50MTYoKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IG5ldyBtZXNzYWdlc18xLlJvd0Rlc2NyaXB0aW9uTWVzc2FnZShsZW5ndGgsIGZpZWxkQ291bnQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgbWVzc2FnZS5maWVsZHNbaV0gPSB0aGlzLnBhcnNlRmllbGQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgcGFyc2VGaWVsZCgpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMucmVhZGVyLmNzdHJpbmcoKTtcbiAgICAgICAgY29uc3QgdGFibGVJRCA9IHRoaXMucmVhZGVyLnVpbnQzMigpO1xuICAgICAgICBjb25zdCBjb2x1bW5JRCA9IHRoaXMucmVhZGVyLmludDE2KCk7XG4gICAgICAgIGNvbnN0IGRhdGFUeXBlSUQgPSB0aGlzLnJlYWRlci51aW50MzIoKTtcbiAgICAgICAgY29uc3QgZGF0YVR5cGVTaXplID0gdGhpcy5yZWFkZXIuaW50MTYoKTtcbiAgICAgICAgY29uc3QgZGF0YVR5cGVNb2RpZmllciA9IHRoaXMucmVhZGVyLmludDMyKCk7XG4gICAgICAgIGNvbnN0IG1vZGUgPSB0aGlzLnJlYWRlci5pbnQxNigpID09PSAwID8gJ3RleHQnIDogJ2JpbmFyeSc7XG4gICAgICAgIHJldHVybiBuZXcgbWVzc2FnZXNfMS5GaWVsZChuYW1lLCB0YWJsZUlELCBjb2x1bW5JRCwgZGF0YVR5cGVJRCwgZGF0YVR5cGVTaXplLCBkYXRhVHlwZU1vZGlmaWVyLCBtb2RlKTtcbiAgICB9XG4gICAgcGFyc2VQYXJhbWV0ZXJEZXNjcmlwdGlvbk1lc3NhZ2Uob2Zmc2V0LCBsZW5ndGgsIGJ5dGVzKSB7XG4gICAgICAgIHRoaXMucmVhZGVyLnNldEJ1ZmZlcihvZmZzZXQsIGJ5dGVzKTtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVyQ291bnQgPSB0aGlzLnJlYWRlci5pbnQxNigpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gbmV3IG1lc3NhZ2VzXzEuUGFyYW1ldGVyRGVzY3JpcHRpb25NZXNzYWdlKGxlbmd0aCwgcGFyYW1ldGVyQ291bnQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlckNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIG1lc3NhZ2UuZGF0YVR5cGVJRHNbaV0gPSB0aGlzLnJlYWRlci5pbnQzMigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBwYXJzZURhdGFSb3dNZXNzYWdlKG9mZnNldCwgbGVuZ3RoLCBieXRlcykge1xuICAgICAgICB0aGlzLnJlYWRlci5zZXRCdWZmZXIob2Zmc2V0LCBieXRlcyk7XG4gICAgICAgIGNvbnN0IGZpZWxkQ291bnQgPSB0aGlzLnJlYWRlci5pbnQxNigpO1xuICAgICAgICBjb25zdCBmaWVsZHMgPSBuZXcgQXJyYXkoZmllbGRDb3VudCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmllbGRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsZW4gPSB0aGlzLnJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgLy8gYSAtMSBmb3IgbGVuZ3RoIG1lYW5zIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgaXMgbnVsbFxuICAgICAgICAgICAgZmllbGRzW2ldID0gbGVuID09PSAtMSA/IG51bGwgOiB0aGlzLnJlYWRlci5zdHJpbmcobGVuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IG1lc3NhZ2VzXzEuRGF0YVJvd01lc3NhZ2UobGVuZ3RoLCBmaWVsZHMpO1xuICAgIH1cbiAgICBwYXJzZVBhcmFtZXRlclN0YXR1c01lc3NhZ2Uob2Zmc2V0LCBsZW5ndGgsIGJ5dGVzKSB7XG4gICAgICAgIHRoaXMucmVhZGVyLnNldEJ1ZmZlcihvZmZzZXQsIGJ5dGVzKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMucmVhZGVyLmNzdHJpbmcoKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnJlYWRlci5jc3RyaW5nKCk7XG4gICAgICAgIHJldHVybiBuZXcgbWVzc2FnZXNfMS5QYXJhbWV0ZXJTdGF0dXNNZXNzYWdlKGxlbmd0aCwgbmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgICBwYXJzZUJhY2tlbmRLZXlEYXRhKG9mZnNldCwgbGVuZ3RoLCBieXRlcykge1xuICAgICAgICB0aGlzLnJlYWRlci5zZXRCdWZmZXIob2Zmc2V0LCBieXRlcyk7XG4gICAgICAgIGNvbnN0IHByb2Nlc3NJRCA9IHRoaXMucmVhZGVyLmludDMyKCk7XG4gICAgICAgIGNvbnN0IHNlY3JldEtleSA9IHRoaXMucmVhZGVyLmludDMyKCk7XG4gICAgICAgIHJldHVybiBuZXcgbWVzc2FnZXNfMS5CYWNrZW5kS2V5RGF0YU1lc3NhZ2UobGVuZ3RoLCBwcm9jZXNzSUQsIHNlY3JldEtleSk7XG4gICAgfVxuICAgIHBhcnNlQXV0aGVudGljYXRpb25SZXNwb25zZShvZmZzZXQsIGxlbmd0aCwgYnl0ZXMpIHtcbiAgICAgICAgdGhpcy5yZWFkZXIuc2V0QnVmZmVyKG9mZnNldCwgYnl0ZXMpO1xuICAgICAgICBjb25zdCBjb2RlID0gdGhpcy5yZWFkZXIuaW50MzIoKTtcbiAgICAgICAgLy8gVE9ETyhibWMpOiBtYXliZSBiZXR0ZXIgdHlwZXMgaGVyZVxuICAgICAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgICAgICAgbmFtZTogJ2F1dGhlbnRpY2F0aW9uT2snLFxuICAgICAgICAgICAgbGVuZ3RoLFxuICAgICAgICB9O1xuICAgICAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgMDogLy8gQXV0aGVudGljYXRpb25Pa1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOiAvLyBBdXRoZW50aWNhdGlvbkNsZWFydGV4dFBhc3N3b3JkXG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UubGVuZ3RoID09PSA4KSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubmFtZSA9ICdhdXRoZW50aWNhdGlvbkNsZWFydGV4dFBhc3N3b3JkJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDU6IC8vIEF1dGhlbnRpY2F0aW9uTUQ1UGFzc3dvcmRcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5sZW5ndGggPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubmFtZSA9ICdhdXRoZW50aWNhdGlvbk1ENVBhc3N3b3JkJztcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2FsdCA9IHRoaXMucmVhZGVyLmJ5dGVzKDQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IG1lc3NhZ2VzXzEuQXV0aGVudGljYXRpb25NRDVQYXNzd29yZChsZW5ndGgsIHNhbHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTA6IC8vIEF1dGhlbnRpY2F0aW9uU0FTTFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5uYW1lID0gJ2F1dGhlbnRpY2F0aW9uU0FTTCc7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWVjaGFuaXNtcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWVjaGFuaXNtO1xuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZWNoYW5pc20gPSB0aGlzLnJlYWRlci5jc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVjaGFuaXNtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tZWNoYW5pc21zLnB1c2gobWVjaGFuaXNtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAobWVjaGFuaXNtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDExOiAvLyBBdXRoZW50aWNhdGlvblNBU0xDb250aW51ZVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UubmFtZSA9ICdhdXRoZW50aWNhdGlvblNBU0xDb250aW51ZSc7XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5kYXRhID0gdGhpcy5yZWFkZXIuc3RyaW5nKGxlbmd0aCAtIDgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMjogLy8gQXV0aGVudGljYXRpb25TQVNMRmluYWxcbiAgICAgICAgICAgICAgICBtZXNzYWdlLm5hbWUgPSAnYXV0aGVudGljYXRpb25TQVNMRmluYWwnO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGF0YSA9IHRoaXMucmVhZGVyLnN0cmluZyhsZW5ndGggLSA4KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGF1dGhlbnRpY2F0aW9uT2sgbWVzc2FnZSB0eXBlICcgKyBjb2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgcGFyc2VFcnJvck1lc3NhZ2Uob2Zmc2V0LCBsZW5ndGgsIGJ5dGVzLCBuYW1lKSB7XG4gICAgICAgIHRoaXMucmVhZGVyLnNldEJ1ZmZlcihvZmZzZXQsIGJ5dGVzKTtcbiAgICAgICAgY29uc3QgZmllbGRzID0ge307XG4gICAgICAgIGxldCBmaWVsZFR5cGUgPSB0aGlzLnJlYWRlci5zdHJpbmcoMSk7XG4gICAgICAgIHdoaWxlIChmaWVsZFR5cGUgIT09ICdcXDAnKSB7XG4gICAgICAgICAgICBmaWVsZHNbZmllbGRUeXBlXSA9IHRoaXMucmVhZGVyLmNzdHJpbmcoKTtcbiAgICAgICAgICAgIGZpZWxkVHlwZSA9IHRoaXMucmVhZGVyLnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXNzYWdlVmFsdWUgPSBmaWVsZHMuTTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IG5hbWUgPT09ICdub3RpY2UnID8gbmV3IG1lc3NhZ2VzXzEuTm90aWNlTWVzc2FnZShsZW5ndGgsIG1lc3NhZ2VWYWx1ZSkgOiBuZXcgbWVzc2FnZXNfMS5EYXRhYmFzZUVycm9yKG1lc3NhZ2VWYWx1ZSwgbGVuZ3RoLCBuYW1lKTtcbiAgICAgICAgbWVzc2FnZS5zZXZlcml0eSA9IGZpZWxkcy5TO1xuICAgICAgICBtZXNzYWdlLmNvZGUgPSBmaWVsZHMuQztcbiAgICAgICAgbWVzc2FnZS5kZXRhaWwgPSBmaWVsZHMuRDtcbiAgICAgICAgbWVzc2FnZS5oaW50ID0gZmllbGRzLkg7XG4gICAgICAgIG1lc3NhZ2UucG9zaXRpb24gPSBmaWVsZHMuUDtcbiAgICAgICAgbWVzc2FnZS5pbnRlcm5hbFBvc2l0aW9uID0gZmllbGRzLnA7XG4gICAgICAgIG1lc3NhZ2UuaW50ZXJuYWxRdWVyeSA9IGZpZWxkcy5xO1xuICAgICAgICBtZXNzYWdlLndoZXJlID0gZmllbGRzLlc7XG4gICAgICAgIG1lc3NhZ2Uuc2NoZW1hID0gZmllbGRzLnM7XG4gICAgICAgIG1lc3NhZ2UudGFibGUgPSBmaWVsZHMudDtcbiAgICAgICAgbWVzc2FnZS5jb2x1bW4gPSBmaWVsZHMuYztcbiAgICAgICAgbWVzc2FnZS5kYXRhVHlwZSA9IGZpZWxkcy5kO1xuICAgICAgICBtZXNzYWdlLmNvbnN0cmFpbnQgPSBmaWVsZHMubjtcbiAgICAgICAgbWVzc2FnZS5maWxlID0gZmllbGRzLkY7XG4gICAgICAgIG1lc3NhZ2UubGluZSA9IGZpZWxkcy5MO1xuICAgICAgICBtZXNzYWdlLnJvdXRpbmUgPSBmaWVsZHMuUjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0cy5QYXJzZXIgPSBQYXJzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-protocol/dist/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/pg-protocol/dist/serializer.js":
/*!*****************************************************!*\
  !*** ./node_modules/pg-protocol/dist/serializer.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serialize = void 0;\nconst buffer_writer_1 = __webpack_require__(/*! ./buffer-writer */ \"(rsc)/./node_modules/pg-protocol/dist/buffer-writer.js\");\nconst writer = new buffer_writer_1.Writer();\nconst startup = (opts) => {\n    // protocol version\n    writer.addInt16(3).addInt16(0);\n    for (const key of Object.keys(opts)) {\n        writer.addCString(key).addCString(opts[key]);\n    }\n    writer.addCString('client_encoding').addCString('UTF8');\n    const bodyBuffer = writer.addCString('').flush();\n    // this message is sent without a code\n    const length = bodyBuffer.length + 4;\n    return new buffer_writer_1.Writer().addInt32(length).add(bodyBuffer).flush();\n};\nconst requestSsl = () => {\n    const response = Buffer.allocUnsafe(8);\n    response.writeInt32BE(8, 0);\n    response.writeInt32BE(80877103, 4);\n    return response;\n};\nconst password = (password) => {\n    return writer.addCString(password).flush(112 /* code.startup */);\n};\nconst sendSASLInitialResponseMessage = function (mechanism, initialResponse) {\n    // 0x70 = 'p'\n    writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse);\n    return writer.flush(112 /* code.startup */);\n};\nconst sendSCRAMClientFinalMessage = function (additionalData) {\n    return writer.addString(additionalData).flush(112 /* code.startup */);\n};\nconst query = (text) => {\n    return writer.addCString(text).flush(81 /* code.query */);\n};\nconst emptyArray = [];\nconst parse = (query) => {\n    // expect something like this:\n    // { name: 'queryName',\n    //   text: 'select * from blah',\n    //   types: ['int8', 'bool'] }\n    // normalize missing query names to allow for null\n    const name = query.name || '';\n    if (name.length > 63) {\n        console.error('Warning! Postgres only supports 63 characters for query names.');\n        console.error('You supplied %s (%s)', name, name.length);\n        console.error('This can cause conflicts and silent errors executing queries');\n    }\n    const types = query.types || emptyArray;\n    const len = types.length;\n    const buffer = writer\n        .addCString(name) // name of query\n        .addCString(query.text) // actual query text\n        .addInt16(len);\n    for (let i = 0; i < len; i++) {\n        buffer.addInt32(types[i]);\n    }\n    return writer.flush(80 /* code.parse */);\n};\nconst paramWriter = new buffer_writer_1.Writer();\nconst writeValues = function (values, valueMapper) {\n    for (let i = 0; i < values.length; i++) {\n        const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i];\n        if (mappedVal == null) {\n            // add the param type (string) to the writer\n            writer.addInt16(0 /* ParamType.STRING */);\n            // write -1 to the param writer to indicate null\n            paramWriter.addInt32(-1);\n        }\n        else if (mappedVal instanceof Buffer) {\n            // add the param type (binary) to the writer\n            writer.addInt16(1 /* ParamType.BINARY */);\n            // add the buffer to the param writer\n            paramWriter.addInt32(mappedVal.length);\n            paramWriter.add(mappedVal);\n        }\n        else {\n            // add the param type (string) to the writer\n            writer.addInt16(0 /* ParamType.STRING */);\n            paramWriter.addInt32(Buffer.byteLength(mappedVal));\n            paramWriter.addString(mappedVal);\n        }\n    }\n};\nconst bind = (config = {}) => {\n    // normalize config\n    const portal = config.portal || '';\n    const statement = config.statement || '';\n    const binary = config.binary || false;\n    const values = config.values || emptyArray;\n    const len = values.length;\n    writer.addCString(portal).addCString(statement);\n    writer.addInt16(len);\n    writeValues(values, config.valueMapper);\n    writer.addInt16(len);\n    writer.add(paramWriter.flush());\n    // format code\n    writer.addInt16(binary ? 1 /* ParamType.BINARY */ : 0 /* ParamType.STRING */);\n    return writer.flush(66 /* code.bind */);\n};\nconst emptyExecute = Buffer.from([69 /* code.execute */, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00]);\nconst execute = (config) => {\n    // this is the happy path for most queries\n    if (!config || (!config.portal && !config.rows)) {\n        return emptyExecute;\n    }\n    const portal = config.portal || '';\n    const rows = config.rows || 0;\n    const portalLength = Buffer.byteLength(portal);\n    const len = 4 + portalLength + 1 + 4;\n    // one extra bit for code\n    const buff = Buffer.allocUnsafe(1 + len);\n    buff[0] = 69 /* code.execute */;\n    buff.writeInt32BE(len, 1);\n    buff.write(portal, 5, 'utf-8');\n    buff[portalLength + 5] = 0; // null terminate portal cString\n    buff.writeUInt32BE(rows, buff.length - 4);\n    return buff;\n};\nconst cancel = (processID, secretKey) => {\n    const buffer = Buffer.allocUnsafe(16);\n    buffer.writeInt32BE(16, 0);\n    buffer.writeInt16BE(1234, 4);\n    buffer.writeInt16BE(5678, 6);\n    buffer.writeInt32BE(processID, 8);\n    buffer.writeInt32BE(secretKey, 12);\n    return buffer;\n};\nconst cstringMessage = (code, string) => {\n    const stringLen = Buffer.byteLength(string);\n    const len = 4 + stringLen + 1;\n    // one extra bit for code\n    const buffer = Buffer.allocUnsafe(1 + len);\n    buffer[0] = code;\n    buffer.writeInt32BE(len, 1);\n    buffer.write(string, 5, 'utf-8');\n    buffer[len] = 0; // null terminate cString\n    return buffer;\n};\nconst emptyDescribePortal = writer.addCString('P').flush(68 /* code.describe */);\nconst emptyDescribeStatement = writer.addCString('S').flush(68 /* code.describe */);\nconst describe = (msg) => {\n    return msg.name\n        ? cstringMessage(68 /* code.describe */, `${msg.type}${msg.name || ''}`)\n        : msg.type === 'P'\n            ? emptyDescribePortal\n            : emptyDescribeStatement;\n};\nconst close = (msg) => {\n    const text = `${msg.type}${msg.name || ''}`;\n    return cstringMessage(67 /* code.close */, text);\n};\nconst copyData = (chunk) => {\n    return writer.add(chunk).flush(100 /* code.copyFromChunk */);\n};\nconst copyFail = (message) => {\n    return cstringMessage(102 /* code.copyFail */, message);\n};\nconst codeOnlyBuffer = (code) => Buffer.from([code, 0x00, 0x00, 0x00, 0x04]);\nconst flushBuffer = codeOnlyBuffer(72 /* code.flush */);\nconst syncBuffer = codeOnlyBuffer(83 /* code.sync */);\nconst endBuffer = codeOnlyBuffer(88 /* code.end */);\nconst copyDoneBuffer = codeOnlyBuffer(99 /* code.copyDone */);\nconst serialize = {\n    startup,\n    password,\n    requestSsl,\n    sendSASLInitialResponseMessage,\n    sendSCRAMClientFinalMessage,\n    query,\n    parse,\n    bind,\n    execute,\n    describe,\n    close,\n    flush: () => flushBuffer,\n    sync: () => syncBuffer,\n    end: () => endBuffer,\n    copyData,\n    copyDone: () => copyDoneBuffer,\n    copyFail,\n    cancel,\n};\nexports.serialize = serialize;\n//# sourceMappingURL=serializer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-protocol/dist/serializer.js\n");

/***/ })

};
;