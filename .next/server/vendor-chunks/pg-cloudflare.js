"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pg-cloudflare";
exports.ids = ["vendor-chunks/pg-cloudflare"];
exports.modules = {

/***/ "(rsc)/./node_modules/pg-cloudflare/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/pg-cloudflare/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CloudflareSocket = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\n/**\n * Wrapper around the Cloudflare built-in socket that can be used by the `Connection`.\n */\nclass CloudflareSocket extends events_1.EventEmitter {\n    constructor(ssl) {\n        super();\n        this.ssl = ssl;\n        this.writable = false;\n        this.destroyed = false;\n        this._upgrading = false;\n        this._upgraded = false;\n        this._cfSocket = null;\n        this._cfWriter = null;\n        this._cfReader = null;\n    }\n    setNoDelay() {\n        return this;\n    }\n    setKeepAlive() {\n        return this;\n    }\n    ref() {\n        return this;\n    }\n    unref() {\n        return this;\n    }\n    async connect(port, host, connectListener) {\n        try {\n            log('connecting');\n            if (connectListener)\n                this.once('connect', connectListener);\n            const options = this.ssl ? { secureTransport: 'starttls' } : {};\n            const mod = await Promise.resolve().then(function webpackMissingModule() { var e = new Error(\"Cannot find module 'cloudflare:sockets'\"); e.code = 'MODULE_NOT_FOUND'; throw e; });\n            const connect = mod.connect;\n            this._cfSocket = connect(`${host}:${port}`, options);\n            this._cfWriter = this._cfSocket.writable.getWriter();\n            this._addClosedHandler();\n            this._cfReader = this._cfSocket.readable.getReader();\n            if (this.ssl) {\n                this._listenOnce().catch((e) => this.emit('error', e));\n            }\n            else {\n                this._listen().catch((e) => this.emit('error', e));\n            }\n            await this._cfWriter.ready;\n            log('socket ready');\n            this.writable = true;\n            this.emit('connect');\n            return this;\n        }\n        catch (e) {\n            this.emit('error', e);\n        }\n    }\n    async _listen() {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            log('awaiting receive from CF socket');\n            const { done, value } = await this._cfReader.read();\n            log('CF socket received:', done, value);\n            if (done) {\n                log('done');\n                break;\n            }\n            this.emit('data', Buffer.from(value));\n        }\n    }\n    async _listenOnce() {\n        log('awaiting first receive from CF socket');\n        const { done, value } = await this._cfReader.read();\n        log('First CF socket received:', done, value);\n        this.emit('data', Buffer.from(value));\n    }\n    write(data, encoding = 'utf8', callback = () => { }) {\n        if (data.length === 0)\n            return callback();\n        if (typeof data === 'string')\n            data = Buffer.from(data, encoding);\n        log('sending data direct:', data);\n        this._cfWriter.write(data).then(() => {\n            log('data sent');\n            callback();\n        }, (err) => {\n            log('send error', err);\n            callback(err);\n        });\n        return true;\n    }\n    end(data = Buffer.alloc(0), encoding = 'utf8', callback = () => { }) {\n        log('ending CF socket');\n        this.write(data, encoding, (err) => {\n            this._cfSocket.close();\n            if (callback)\n                callback(err);\n        });\n        return this;\n    }\n    destroy(reason) {\n        log('destroying CF socket', reason);\n        this.destroyed = true;\n        return this.end();\n    }\n    startTls(options) {\n        if (this._upgraded) {\n            // Don't try to upgrade again.\n            this.emit('error', 'Cannot call `startTls()` more than once on a socket');\n            return;\n        }\n        this._cfWriter.releaseLock();\n        this._cfReader.releaseLock();\n        this._upgrading = true;\n        this._cfSocket = this._cfSocket.startTls(options);\n        this._cfWriter = this._cfSocket.writable.getWriter();\n        this._cfReader = this._cfSocket.readable.getReader();\n        this._addClosedHandler();\n        this._listen().catch((e) => this.emit('error', e));\n    }\n    _addClosedHandler() {\n        this._cfSocket.closed.then(() => {\n            if (!this._upgrading) {\n                log('CF socket closed');\n                this._cfSocket = null;\n                this.emit('close');\n            }\n            else {\n                this._upgrading = false;\n                this._upgraded = true;\n            }\n        }).catch((e) => this.emit('error', e));\n    }\n}\nexports.CloudflareSocket = CloudflareSocket;\nconst debug = false;\nfunction dump(data) {\n    if (data instanceof Uint8Array || data instanceof ArrayBuffer) {\n        const hex = Buffer.from(data).toString('hex');\n        const str = new TextDecoder().decode(data);\n        return `\\n>>> STR: \"${str.replace(/\\n/g, '\\\\n')}\"\\n>>> HEX: ${hex}\\n`;\n    }\n    else {\n        return data;\n    }\n}\nfunction log(...args) {\n    debug && console.log(...args.map(dump));\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-cloudflare/dist/index.js\n");

/***/ })

};
;