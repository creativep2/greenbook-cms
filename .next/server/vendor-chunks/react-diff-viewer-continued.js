"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-diff-viewer-continued";
exports.ids = ["vendor-chunks/react-diff-viewer-continued"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/compute-hidden-blocks.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/react-diff-viewer-continued/lib/esm/src/compute-hidden-blocks.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeHiddenBlocks: () => (/* binding */ computeHiddenBlocks)\n/* harmony export */ });\nfunction computeHiddenBlocks(lineInformation, diffLines, extraLines) {\n    let newBlockIndex = 0;\n    let currentBlock;\n    const lineBlocks = {};\n    const blocks = [];\n    lineInformation.forEach((line, lineIndex) => {\n        const isDiffLine = diffLines.some((diffLine) => diffLine >= lineIndex - extraLines &&\n            diffLine <= lineIndex + extraLines);\n        if (!isDiffLine && currentBlock === undefined) {\n            // block begins\n            currentBlock = {\n                index: newBlockIndex,\n                startLine: lineIndex,\n                endLine: lineIndex,\n                lines: 1,\n            };\n            blocks.push(currentBlock);\n            lineBlocks[lineIndex] = currentBlock.index;\n            newBlockIndex++;\n        }\n        else if (!isDiffLine && currentBlock) {\n            // block continues\n            currentBlock.endLine = lineIndex;\n            currentBlock.lines++;\n            lineBlocks[lineIndex] = currentBlock.index;\n        }\n        else {\n            // not a block anymore\n            currentBlock = undefined;\n        }\n    });\n    return {\n        lineBlocks,\n        blocks: blocks,\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGlmZi12aWV3ZXItY29udGludWVkL2xpYi9lc20vc3JjL2NvbXB1dGUtaGlkZGVuLWJsb2Nrcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy90cmFuZ2lha2lldC9Eb2N1bWVudHMvR2l0SHViL2dyZWVuYm9vay1jbXMvbm9kZV9tb2R1bGVzL3JlYWN0LWRpZmYtdmlld2VyLWNvbnRpbnVlZC9saWIvZXNtL3NyYy9jb21wdXRlLWhpZGRlbi1ibG9ja3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVIaWRkZW5CbG9ja3MobGluZUluZm9ybWF0aW9uLCBkaWZmTGluZXMsIGV4dHJhTGluZXMpIHtcbiAgICBsZXQgbmV3QmxvY2tJbmRleCA9IDA7XG4gICAgbGV0IGN1cnJlbnRCbG9jaztcbiAgICBjb25zdCBsaW5lQmxvY2tzID0ge307XG4gICAgY29uc3QgYmxvY2tzID0gW107XG4gICAgbGluZUluZm9ybWF0aW9uLmZvckVhY2goKGxpbmUsIGxpbmVJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBpc0RpZmZMaW5lID0gZGlmZkxpbmVzLnNvbWUoKGRpZmZMaW5lKSA9PiBkaWZmTGluZSA+PSBsaW5lSW5kZXggLSBleHRyYUxpbmVzICYmXG4gICAgICAgICAgICBkaWZmTGluZSA8PSBsaW5lSW5kZXggKyBleHRyYUxpbmVzKTtcbiAgICAgICAgaWYgKCFpc0RpZmZMaW5lICYmIGN1cnJlbnRCbG9jayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBibG9jayBiZWdpbnNcbiAgICAgICAgICAgIGN1cnJlbnRCbG9jayA9IHtcbiAgICAgICAgICAgICAgICBpbmRleDogbmV3QmxvY2tJbmRleCxcbiAgICAgICAgICAgICAgICBzdGFydExpbmU6IGxpbmVJbmRleCxcbiAgICAgICAgICAgICAgICBlbmRMaW5lOiBsaW5lSW5kZXgsXG4gICAgICAgICAgICAgICAgbGluZXM6IDEsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3VycmVudEJsb2NrKTtcbiAgICAgICAgICAgIGxpbmVCbG9ja3NbbGluZUluZGV4XSA9IGN1cnJlbnRCbG9jay5pbmRleDtcbiAgICAgICAgICAgIG5ld0Jsb2NrSW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaXNEaWZmTGluZSAmJiBjdXJyZW50QmxvY2spIHtcbiAgICAgICAgICAgIC8vIGJsb2NrIGNvbnRpbnVlc1xuICAgICAgICAgICAgY3VycmVudEJsb2NrLmVuZExpbmUgPSBsaW5lSW5kZXg7XG4gICAgICAgICAgICBjdXJyZW50QmxvY2subGluZXMrKztcbiAgICAgICAgICAgIGxpbmVCbG9ja3NbbGluZUluZGV4XSA9IGN1cnJlbnRCbG9jay5pbmRleDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5vdCBhIGJsb2NrIGFueW1vcmVcbiAgICAgICAgICAgIGN1cnJlbnRCbG9jayA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGxpbmVCbG9ja3MsXG4gICAgICAgIGJsb2NrczogYmxvY2tzLFxuICAgIH07XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/compute-hidden-blocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/compute-lines.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/react-diff-viewer-continued/lib/esm/src/compute-lines.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiffMethod: () => (/* binding */ DiffMethod),\n/* harmony export */   DiffType: () => (/* binding */ DiffType),\n/* harmony export */   computeLineInformation: () => (/* binding */ computeLineInformation)\n/* harmony export */ });\n/* harmony import */ var diff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! diff */ \"(ssr)/./node_modules/diff/lib/index.mjs\");\n\nconst jsDiff = diff__WEBPACK_IMPORTED_MODULE_0__;\nvar DiffType;\n(function (DiffType) {\n    DiffType[DiffType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    DiffType[DiffType[\"ADDED\"] = 1] = \"ADDED\";\n    DiffType[DiffType[\"REMOVED\"] = 2] = \"REMOVED\";\n    DiffType[DiffType[\"CHANGED\"] = 3] = \"CHANGED\";\n})(DiffType || (DiffType = {}));\n// See https://github.com/kpdecker/jsdiff/tree/v4.0.1#api for more info on the below JsDiff methods\nvar DiffMethod;\n(function (DiffMethod) {\n    DiffMethod[\"CHARS\"] = \"diffChars\";\n    DiffMethod[\"WORDS\"] = \"diffWords\";\n    DiffMethod[\"WORDS_WITH_SPACE\"] = \"diffWordsWithSpace\";\n    DiffMethod[\"LINES\"] = \"diffLines\";\n    DiffMethod[\"TRIMMED_LINES\"] = \"diffTrimmedLines\";\n    DiffMethod[\"SENTENCES\"] = \"diffSentences\";\n    DiffMethod[\"CSS\"] = \"diffCss\";\n    DiffMethod[\"JSON\"] = \"diffJson\";\n})(DiffMethod || (DiffMethod = {}));\n/**\n * Splits diff text by new line and computes final list of diff lines based on\n * conditions.\n *\n * @param value Diff text from the js diff module.\n */\nconst constructLines = (value) => {\n    if (value === \"\")\n        return [];\n    const lines = value.replace(/\\n$/, \"\").split(\"\\n\");\n    return lines;\n};\n/**\n * Computes word diff information in the line.\n * [TODO]: Consider adding options argument for JsDiff text block comparison\n *\n * @param oldValue Old word in the line.\n * @param newValue New word in the line.\n * @param compareMethod JsDiff text diff method from https://github.com/kpdecker/jsdiff/tree/v4.0.1#api\n */\nconst computeDiff = (oldValue, newValue, compareMethod = DiffMethod.CHARS) => {\n    const compareFunc = typeof compareMethod === \"string\" ? jsDiff[compareMethod] : compareMethod;\n    const diffArray = compareFunc(oldValue, newValue);\n    const computedDiff = {\n        left: [],\n        right: [],\n    };\n    diffArray.forEach(({ added, removed, value }) => {\n        const diffInformation = {};\n        if (added) {\n            diffInformation.type = DiffType.ADDED;\n            diffInformation.value = value;\n            computedDiff.right.push(diffInformation);\n        }\n        if (removed) {\n            diffInformation.type = DiffType.REMOVED;\n            diffInformation.value = value;\n            computedDiff.left.push(diffInformation);\n        }\n        if (!removed && !added) {\n            diffInformation.type = DiffType.DEFAULT;\n            diffInformation.value = value;\n            computedDiff.right.push(diffInformation);\n            computedDiff.left.push(diffInformation);\n        }\n        return diffInformation;\n    });\n    return computedDiff;\n};\n/**\n * [TODO]: Think about moving common left and right value assignment to a\n * common place. Better readability?\n *\n * Computes line wise information based in the js diff information passed. Each\n * line contains information about left and right section. Left side denotes\n * deletion and right side denotes addition.\n *\n * @param oldString Old string to compare.\n * @param newString New string to compare with old string.\n * @param disableWordDiff Flag to enable/disable word diff.\n * @param lineCompareMethod JsDiff text diff method from https://github.com/kpdecker/jsdiff/tree/v4.0.1#api\n * @param linesOffset line number to start counting from\n * @param showLines lines that are always shown, regardless of diff\n */\nconst computeLineInformation = (oldString, newString, disableWordDiff = false, lineCompareMethod = DiffMethod.CHARS, linesOffset = 0, showLines = []) => {\n    let diffArray = [];\n    // Use diffLines for strings, and diffJson for objects...\n    if (typeof oldString === \"string\" && typeof newString === \"string\") {\n        diffArray = diff__WEBPACK_IMPORTED_MODULE_0__.diffLines(oldString, newString, {\n            newlineIsToken: false,\n            ignoreWhitespace: false,\n            ignoreCase: false,\n        });\n    }\n    else {\n        diffArray = diff__WEBPACK_IMPORTED_MODULE_0__.diffJson(oldString, newString);\n    }\n    let rightLineNumber = linesOffset;\n    let leftLineNumber = linesOffset;\n    let lineInformation = [];\n    let counter = 0;\n    const diffLines = [];\n    const ignoreDiffIndexes = [];\n    const getLineInformation = (value, diffIndex, added, removed, evaluateOnlyFirstLine) => {\n        const lines = constructLines(value);\n        return lines\n            .map((line, lineIndex) => {\n            const left = {};\n            const right = {};\n            if (ignoreDiffIndexes.includes(`${diffIndex}-${lineIndex}`) ||\n                (evaluateOnlyFirstLine && lineIndex !== 0)) {\n                return undefined;\n            }\n            if (added || removed) {\n                let countAsChange = true;\n                if (removed) {\n                    leftLineNumber += 1;\n                    left.lineNumber = leftLineNumber;\n                    left.type = DiffType.REMOVED;\n                    left.value = line || \" \";\n                    // When the current line is of type REMOVED, check the next item in\n                    // the diff array whether it is of type ADDED. If true, the current\n                    // diff will be marked as both REMOVED and ADDED. Meaning, the\n                    // current line is a modification.\n                    const nextDiff = diffArray[diffIndex + 1];\n                    if (nextDiff?.added) {\n                        const nextDiffLines = constructLines(nextDiff.value)[lineIndex];\n                        if (nextDiffLines) {\n                            const nextDiffLineInfo = getLineInformation(nextDiffLines, diffIndex, true, false, true);\n                            const { value: rightValue, lineNumber, type, } = nextDiffLineInfo[0].right;\n                            // When identified as modification, push the next diff to ignore\n                            // list as the next value will be added in this line computation as\n                            // right and left values.\n                            ignoreDiffIndexes.push(`${diffIndex + 1}-${lineIndex}`);\n                            right.lineNumber = lineNumber;\n                            if (left.value === rightValue) {\n                                // The new value is exactly the same as the old\n                                countAsChange = false;\n                                right.type = 0;\n                                left.type = 0;\n                                right.value = rightValue;\n                            }\n                            else {\n                                right.type = type;\n                                // Do char level diff and assign the corresponding values to the\n                                // left and right diff information object.\n                                if (disableWordDiff) {\n                                    right.value = rightValue;\n                                }\n                                else {\n                                    const computedDiff = computeDiff(line, rightValue, lineCompareMethod);\n                                    right.value = computedDiff.right;\n                                    left.value = computedDiff.left;\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    rightLineNumber += 1;\n                    right.lineNumber = rightLineNumber;\n                    right.type = DiffType.ADDED;\n                    right.value = line;\n                }\n                if (countAsChange && !evaluateOnlyFirstLine) {\n                    if (!diffLines.includes(counter)) {\n                        diffLines.push(counter);\n                    }\n                }\n            }\n            else {\n                leftLineNumber += 1;\n                rightLineNumber += 1;\n                left.lineNumber = leftLineNumber;\n                left.type = DiffType.DEFAULT;\n                left.value = line;\n                right.lineNumber = rightLineNumber;\n                right.type = DiffType.DEFAULT;\n                right.value = line;\n            }\n            if (showLines?.includes(`L-${left.lineNumber}`) ||\n                (showLines?.includes(`R-${right.lineNumber}`) &&\n                    !diffLines.includes(counter))) {\n                diffLines.push(counter);\n            }\n            if (!evaluateOnlyFirstLine) {\n                counter += 1;\n            }\n            return { right, left };\n        })\n            .filter(Boolean);\n    };\n    diffArray.forEach(({ added, removed, value }, index) => {\n        lineInformation = [\n            ...lineInformation,\n            ...getLineInformation(value, index, added, removed),\n        ];\n    });\n    return {\n        lineInformation,\n        diffLines,\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/compute-lines.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/expand.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-diff-viewer-continued/lib/esm/src/expand.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Expand: () => (/* binding */ Expand)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n\nfunction Expand() {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", viewBox: \"0 0 16 16\", width: \"16\", height: \"16\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", { children: \"expand\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"m8.177.677 2.896 2.896a.25.25 0 0 1-.177.427H8.75v1.25a.75.75 0 0 1-1.5 0V4H5.104a.25.25 0 0 1-.177-.427L7.823.677a.25.25 0 0 1 .354 0ZM7.25 10.75a.75.75 0 0 1 1.5 0V12h2.146a.25.25 0 0 1 .177.427l-2.896 2.896a.25.25 0 0 1-.354 0l-2.896-2.896A.25.25 0 0 1 5.104 12H7.25v-1.25Zm-5-2a.75.75 0 0 0 0-1.5h-.5a.75.75 0 0 0 0 1.5h.5ZM6 8a.75.75 0 0 1-.75.75h-.5a.75.75 0 0 1 0-1.5h.5A.75.75 0 0 1 6 8Zm2.25.75a.75.75 0 0 0 0-1.5h-.5a.75.75 0 0 0 0 1.5h.5ZM12 8a.75.75 0 0 1-.75.75h-.5a.75.75 0 0 1 0-1.5h.5A.75.75 0 0 1 12 8Zm2.25.75a.75.75 0 0 0 0-1.5h-.5a.75.75 0 0 0 0 1.5h.5Z\" })] }));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGlmZi12aWV3ZXItY29udGludWVkL2xpYi9lc20vc3JjL2V4cGFuZC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErRDtBQUN4RDtBQUNQLFlBQVksdURBQUssVUFBVSxpR0FBaUcsc0RBQUksWUFBWSxvQkFBb0IsR0FBRyxzREFBSSxXQUFXLG9rQkFBb2tCLElBQUk7QUFDMXZCIiwic291cmNlcyI6WyIvVXNlcnMvdHJhbmdpYWtpZXQvRG9jdW1lbnRzL0dpdEh1Yi9ncmVlbmJvb2stY21zL25vZGVfbW9kdWxlcy9yZWFjdC1kaWZmLXZpZXdlci1jb250aW51ZWQvbGliL2VzbS9zcmMvZXhwYW5kLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGpzeCBhcyBfanN4LCBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZnVuY3Rpb24gRXhwYW5kKCkge1xuICAgIHJldHVybiAoX2pzeHMoXCJzdmdcIiwgeyB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB2aWV3Qm94OiBcIjAgMCAxNiAxNlwiLCB3aWR0aDogXCIxNlwiLCBoZWlnaHQ6IFwiMTZcIiwgY2hpbGRyZW46IFtfanN4KFwidGl0bGVcIiwgeyBjaGlsZHJlbjogXCJleHBhbmRcIiB9KSwgX2pzeChcInBhdGhcIiwgeyBkOiBcIm04LjE3Ny42NzcgMi44OTYgMi44OTZhLjI1LjI1IDAgMCAxLS4xNzcuNDI3SDguNzV2MS4yNWEuNzUuNzUgMCAwIDEtMS41IDBWNEg1LjEwNGEuMjUuMjUgMCAwIDEtLjE3Ny0uNDI3TDcuODIzLjY3N2EuMjUuMjUgMCAwIDEgLjM1NCAwWk03LjI1IDEwLjc1YS43NS43NSAwIDAgMSAxLjUgMFYxMmgyLjE0NmEuMjUuMjUgMCAwIDEgLjE3Ny40MjdsLTIuODk2IDIuODk2YS4yNS4yNSAwIDAgMS0uMzU0IDBsLTIuODk2LTIuODk2QS4yNS4yNSAwIDAgMSA1LjEwNCAxMkg3LjI1di0xLjI1Wm0tNS0yYS43NS43NSAwIDAgMCAwLTEuNWgtLjVhLjc1Ljc1IDAgMCAwIDAgMS41aC41Wk02IDhhLjc1Ljc1IDAgMCAxLS43NS43NWgtLjVhLjc1Ljc1IDAgMCAxIDAtMS41aC41QS43NS43NSAwIDAgMSA2IDhabTIuMjUuNzVhLjc1Ljc1IDAgMCAwIDAtMS41aC0uNWEuNzUuNzUgMCAwIDAgMCAxLjVoLjVaTTEyIDhhLjc1Ljc1IDAgMCAxLS43NS43NWgtLjVhLjc1Ljc1IDAgMCAxIDAtMS41aC41QS43NS43NSAwIDAgMSAxMiA4Wm0yLjI1Ljc1YS43NS43NSAwIDAgMCAwLTEuNWgtLjVhLjc1Ljc1IDAgMCAwIDAgMS41aC41WlwiIH0pXSB9KSk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/expand.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/fold.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-diff-viewer-continued/lib/esm/src/fold.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Fold: () => (/* binding */ Fold)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n\nfunction Fold() {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", viewBox: \"0 0 16 16\", width: \"16\", height: \"16\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", { children: \"fold\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"M10.896 2H8.75V.75a.75.75 0 0 0-1.5 0V2H5.104a.25.25 0 0 0-.177.427l2.896 2.896a.25.25 0 0 0 .354 0l2.896-2.896A.25.25 0 0 0 10.896 2ZM8.75 15.25a.75.75 0 0 1-1.5 0V14H5.104a.25.25 0 0 1-.177-.427l2.896-2.896a.25.25 0 0 1 .354 0l2.896 2.896a.25.25 0 0 1-.177.427H8.75v1.25Zm-6.5-6.5a.75.75 0 0 0 0-1.5h-.5a.75.75 0 0 0 0 1.5h.5ZM6 8a.75.75 0 0 1-.75.75h-.5a.75.75 0 0 1 0-1.5h.5A.75.75 0 0 1 6 8Zm2.25.75a.75.75 0 0 0 0-1.5h-.5a.75.75 0 0 0 0 1.5h.5ZM12 8a.75.75 0 0 1-.75.75h-.5a.75.75 0 0 1 0-1.5h.5A.75.75 0 0 1 12 8Zm2.25.75a.75.75 0 0 0 0-1.5h-.5a.75.75 0 0 0 0 1.5h.5Z\" })] }));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGlmZi12aWV3ZXItY29udGludWVkL2xpYi9lc20vc3JjL2ZvbGQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0Q7QUFDeEQ7QUFDUCxZQUFZLHVEQUFLLFVBQVUsaUdBQWlHLHNEQUFJLFlBQVksa0JBQWtCLEdBQUcsc0RBQUksV0FBVyxxa0JBQXFrQixJQUFJO0FBQ3p2QiIsInNvdXJjZXMiOlsiL1VzZXJzL3RyYW5naWFraWV0L0RvY3VtZW50cy9HaXRIdWIvZ3JlZW5ib29rLWNtcy9ub2RlX21vZHVsZXMvcmVhY3QtZGlmZi12aWV3ZXItY29udGludWVkL2xpYi9lc20vc3JjL2ZvbGQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBmdW5jdGlvbiBGb2xkKCkge1xuICAgIHJldHVybiAoX2pzeHMoXCJzdmdcIiwgeyB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB2aWV3Qm94OiBcIjAgMCAxNiAxNlwiLCB3aWR0aDogXCIxNlwiLCBoZWlnaHQ6IFwiMTZcIiwgY2hpbGRyZW46IFtfanN4KFwidGl0bGVcIiwgeyBjaGlsZHJlbjogXCJmb2xkXCIgfSksIF9qc3goXCJwYXRoXCIsIHsgZDogXCJNMTAuODk2IDJIOC43NVYuNzVhLjc1Ljc1IDAgMCAwLTEuNSAwVjJINS4xMDRhLjI1LjI1IDAgMCAwLS4xNzcuNDI3bDIuODk2IDIuODk2YS4yNS4yNSAwIDAgMCAuMzU0IDBsMi44OTYtMi44OTZBLjI1LjI1IDAgMCAwIDEwLjg5NiAyWk04Ljc1IDE1LjI1YS43NS43NSAwIDAgMS0xLjUgMFYxNEg1LjEwNGEuMjUuMjUgMCAwIDEtLjE3Ny0uNDI3bDIuODk2LTIuODk2YS4yNS4yNSAwIDAgMSAuMzU0IDBsMi44OTYgMi44OTZhLjI1LjI1IDAgMCAxLS4xNzcuNDI3SDguNzV2MS4yNVptLTYuNS02LjVhLjc1Ljc1IDAgMCAwIDAtMS41aC0uNWEuNzUuNzUgMCAwIDAgMCAxLjVoLjVaTTYgOGEuNzUuNzUgMCAwIDEtLjc1Ljc1aC0uNWEuNzUuNzUgMCAwIDEgMC0xLjVoLjVBLjc1Ljc1IDAgMCAxIDYgOFptMi4yNS43NWEuNzUuNzUgMCAwIDAgMC0xLjVoLS41YS43NS43NSAwIDAgMCAwIDEuNWguNVpNMTIgOGEuNzUuNzUgMCAwIDEtLjc1Ljc1aC0uNWEuNzUuNzUgMCAwIDEgMC0xLjVoLjVBLjc1Ljc1IDAgMCAxIDEyIDhabTIuMjUuNzVhLjc1Ljc1IDAgMCAwIDAtMS41aC0uNWEuNzUuNzUgMCAwIDAgMCAxLjVoLjVaXCIgfSldIH0pKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/fold.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-diff-viewer-continued/lib/esm/src/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiffMethod: () => (/* reexport safe */ _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffMethod),\n/* harmony export */   LineNumberPrefix: () => (/* binding */ LineNumberPrefix),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var memoize_one__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! memoize-one */ \"(ssr)/./node_modules/memoize-one/dist/memoize-one.esm.js\");\n/* harmony import */ var _compute_hidden_blocks_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./compute-hidden-blocks.js */ \"(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/compute-hidden-blocks.js\");\n/* harmony import */ var _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./compute-lines.js */ \"(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/compute-lines.js\");\n/* harmony import */ var _expand_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./expand.js */ \"(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/expand.js\");\n/* harmony import */ var _styles_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./styles.js */ \"(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/styles.js\");\n/* harmony import */ var _fold_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./fold.js */ \"(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/fold.js\");\n\n\n\n\n\n\n\n\n\nvar LineNumberPrefix;\n(function (LineNumberPrefix) {\n    LineNumberPrefix[\"LEFT\"] = \"L\";\n    LineNumberPrefix[\"RIGHT\"] = \"R\";\n})(LineNumberPrefix || (LineNumberPrefix = {}));\nclass DiffViewer extends react__WEBPACK_IMPORTED_MODULE_2__.Component {\n    styles;\n    static defaultProps = {\n        oldValue: \"\",\n        newValue: \"\",\n        splitView: true,\n        highlightLines: [],\n        disableWordDiff: false,\n        compareMethod: _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffMethod.CHARS,\n        styles: {},\n        hideLineNumbers: false,\n        extraLinesSurroundingDiff: 3,\n        showDiffOnly: true,\n        useDarkTheme: false,\n        linesOffset: 0,\n        nonce: \"\",\n    };\n    constructor(props) {\n        super(props);\n        this.state = {\n            expandedBlocks: [],\n            noSelect: undefined,\n        };\n    }\n    /**\n     * Resets code block expand to the initial stage. Will be exposed to the parent component via\n     * refs.\n     */\n    resetCodeBlocks = () => {\n        if (this.state.expandedBlocks.length > 0) {\n            this.setState({\n                expandedBlocks: [],\n            });\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Pushes the target expanded code block to the state. During the re-render,\n     * this value is used to expand/fold unmodified code.\n     */\n    onBlockExpand = (id) => {\n        const prevState = this.state.expandedBlocks.slice();\n        prevState.push(id);\n        this.setState({\n            expandedBlocks: prevState,\n        });\n    };\n    /**\n     * Computes final styles for the diff viewer. It combines the default styles with the user\n     * supplied overrides. The computed styles are cached with performance in mind.\n     *\n     * @param styles User supplied style overrides.\n     */\n    computeStyles = (0,memoize_one__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(_styles_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]);\n    /**\n     * Returns a function with clicked line number in the closure. Returns an no-op function when no\n     * onLineNumberClick handler is supplied.\n     *\n     * @param id Line id of a line.\n     */\n    onLineNumberClickProxy = (id) => {\n        if (this.props.onLineNumberClick) {\n            return (e) => this.props.onLineNumberClick(id, e);\n        }\n        return () => { };\n    };\n    /**\n     * Maps over the word diff and constructs the required React elements to show word diff.\n     *\n     * @param diffArray Word diff information derived from line information.\n     * @param renderer Optional renderer to format diff words. Useful for syntax highlighting.\n     */\n    renderWordDiff = (diffArray, renderer) => {\n        return diffArray.map((wordDiff, i) => {\n            const content = renderer\n                ? renderer(wordDiff.value)\n                : wordDiff.value;\n            if (typeof content !== \"string\")\n                return;\n            return wordDiff.type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.ADDED ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ins\", { className: classnames__WEBPACK_IMPORTED_MODULE_1__(this.styles.wordDiff, {\n                    [this.styles.wordAdded]: wordDiff.type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.ADDED,\n                }), children: content }, i)) : wordDiff.type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.REMOVED ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"del\", { className: classnames__WEBPACK_IMPORTED_MODULE_1__(this.styles.wordDiff, {\n                    [this.styles.wordRemoved]: wordDiff.type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.REMOVED,\n                }), children: content }, i)) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: classnames__WEBPACK_IMPORTED_MODULE_1__(this.styles.wordDiff), children: content }, i));\n        });\n    };\n    /**\n     * Maps over the line diff and constructs the required react elements to show line diff. It calls\n     * renderWordDiff when encountering word diff. This takes care of both inline and split view line\n     * renders.\n     *\n     * @param lineNumber Line number of the current line.\n     * @param type Type of diff of the current line.\n     * @param prefix Unique id to prefix with the line numbers.\n     * @param value Content of the line. It can be a string or a word diff array.\n     * @param additionalLineNumber Additional line number to be shown. Useful for rendering inline\n     *  diff view. Right line number will be passed as additionalLineNumber.\n     * @param additionalPrefix Similar to prefix but for additional line number.\n     */\n    renderLine = (lineNumber, type, prefix, value, additionalLineNumber, additionalPrefix) => {\n        const lineNumberTemplate = `${prefix}-${lineNumber}`;\n        const additionalLineNumberTemplate = `${additionalPrefix}-${additionalLineNumber}`;\n        const highlightLine = this.props.highlightLines.includes(lineNumberTemplate) ||\n            this.props.highlightLines.includes(additionalLineNumberTemplate);\n        const added = type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.ADDED;\n        const removed = type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.REMOVED;\n        const changed = type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.CHANGED;\n        let content;\n        const hasWordDiff = Array.isArray(value);\n        if (hasWordDiff) {\n            content = this.renderWordDiff(value, this.props.renderContent);\n        }\n        else if (this.props.renderContent) {\n            content = this.props.renderContent(value);\n        }\n        else {\n            content = value;\n        }\n        let ElementType = \"div\";\n        if (added && !hasWordDiff) {\n            ElementType = \"ins\";\n        }\n        else if (removed && !hasWordDiff) {\n            ElementType = \"del\";\n        }\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [!this.props.hideLineNumbers && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { onClick: lineNumber && this.onLineNumberClickProxy(lineNumberTemplate), className: classnames__WEBPACK_IMPORTED_MODULE_1__(this.styles.gutter, {\n                        [this.styles.emptyGutter]: !lineNumber,\n                        [this.styles.diffAdded]: added,\n                        [this.styles.diffRemoved]: removed,\n                        [this.styles.diffChanged]: changed,\n                        [this.styles.highlightedGutter]: highlightLine,\n                    }), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"pre\", { className: this.styles.lineNumber, children: lineNumber }) })), !this.props.splitView && !this.props.hideLineNumbers && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { onClick: additionalLineNumber &&\n                        this.onLineNumberClickProxy(additionalLineNumberTemplate), className: classnames__WEBPACK_IMPORTED_MODULE_1__(this.styles.gutter, {\n                        [this.styles.emptyGutter]: !additionalLineNumber,\n                        [this.styles.diffAdded]: added,\n                        [this.styles.diffRemoved]: removed,\n                        [this.styles.diffChanged]: changed,\n                        [this.styles.highlightedGutter]: highlightLine,\n                    }), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"pre\", { className: this.styles.lineNumber, children: additionalLineNumber }) })), this.props.renderGutter\n                    ? this.props.renderGutter({\n                        lineNumber,\n                        type,\n                        prefix,\n                        value,\n                        additionalLineNumber,\n                        additionalPrefix,\n                        styles: this.styles,\n                    })\n                    : null, (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { className: classnames__WEBPACK_IMPORTED_MODULE_1__(this.styles.marker, {\n                        [this.styles.emptyLine]: !content,\n                        [this.styles.diffAdded]: added,\n                        [this.styles.diffRemoved]: removed,\n                        [this.styles.diffChanged]: changed,\n                        [this.styles.highlightedLine]: highlightLine,\n                    }), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"pre\", { children: [added && \"+\", removed && \"-\"] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { className: classnames__WEBPACK_IMPORTED_MODULE_1__(this.styles.content, {\n                        [this.styles.emptyLine]: !content,\n                        [this.styles.diffAdded]: added,\n                        [this.styles.diffRemoved]: removed,\n                        [this.styles.diffChanged]: changed,\n                        [this.styles.highlightedLine]: highlightLine,\n                        left: prefix === LineNumberPrefix.LEFT,\n                        right: prefix === LineNumberPrefix.RIGHT,\n                    }), onMouseDown: () => {\n                        const elements = document.getElementsByClassName(prefix === LineNumberPrefix.LEFT ? \"right\" : \"left\");\n                        for (let i = 0; i < elements.length; i++) {\n                            const element = elements.item(i);\n                            element.classList.add(this.styles.noSelect);\n                        }\n                    }, title: added && !hasWordDiff\n                        ? \"Added line\"\n                        : removed && !hasWordDiff\n                            ? \"Removed line\"\n                            : undefined, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ElementType, { className: this.styles.contentText, children: content }) })] }));\n    };\n    /**\n     * Generates lines for split view.\n     *\n     * @param obj Line diff information.\n     * @param obj.left Life diff information for the left pane of the split view.\n     * @param obj.right Life diff information for the right pane of the split view.\n     * @param index React key for the lines.\n     */\n    renderSplitView = ({ left, right }, index) => {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"tr\", { className: this.styles.line, children: [this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value), this.renderLine(right.lineNumber, right.type, LineNumberPrefix.RIGHT, right.value)] }, index));\n    };\n    /**\n     * Generates lines for inline view.\n     *\n     * @param obj Line diff information.\n     * @param obj.left Life diff information for the added section of the inline view.\n     * @param obj.right Life diff information for the removed section of the inline view.\n     * @param index React key for the lines.\n     */\n    renderInlineView = ({ left, right }, index) => {\n        let content;\n        if (left.type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.REMOVED && right.type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.ADDED) {\n            return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"tr\", { className: this.styles.line, children: this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, null) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"tr\", { className: this.styles.line, children: this.renderLine(null, right.type, LineNumberPrefix.RIGHT, right.value, right.lineNumber, LineNumberPrefix.RIGHT) })] }, index));\n        }\n        if (left.type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.REMOVED) {\n            content = this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, null);\n        }\n        if (left.type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.DEFAULT) {\n            content = this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, right.lineNumber, LineNumberPrefix.RIGHT);\n        }\n        if (right.type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.ADDED) {\n            content = this.renderLine(null, right.type, LineNumberPrefix.RIGHT, right.value, right.lineNumber);\n        }\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"tr\", { className: this.styles.line, children: content }, index));\n    };\n    /**\n     * Returns a function with clicked block number in the closure.\n     *\n     * @param id Cold fold block id.\n     */\n    onBlockClickProxy = (id) => () => this.onBlockExpand(id);\n    /**\n     * Generates cold fold block. It also uses the custom message renderer when available to show\n     * cold fold messages.\n     *\n     * @param num Number of skipped lines between two blocks.\n     * @param blockNumber Code fold block id.\n     * @param leftBlockLineNumber First left line number after the current code fold block.\n     * @param rightBlockLineNumber First right line number after the current code fold block.\n     */\n    renderSkippedLineIndicator = (num, blockNumber, leftBlockLineNumber, rightBlockLineNumber) => {\n        const { hideLineNumbers, splitView } = this.props;\n        const message = this.props.codeFoldMessageRenderer ? (this.props.codeFoldMessageRenderer(num, leftBlockLineNumber, rightBlockLineNumber)) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", { className: this.styles.codeFoldContent, children: [\"Expand \", num, \" lines ...\"] }));\n        const content = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { className: this.styles.codeFoldContentContainer, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", { type: \"button\", className: this.styles.codeFoldExpandButton, onClick: this.onBlockClickProxy(blockNumber), tabIndex: 0, children: message }) }));\n        const isUnifiedViewWithoutLineNumbers = !splitView && !hideLineNumbers;\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"tr\", { className: this.styles.codeFold, children: [!hideLineNumbers && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { className: this.styles.codeFoldGutter }), this.props.renderGutter ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { className: this.styles.codeFoldGutter })) : null, (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { className: classnames__WEBPACK_IMPORTED_MODULE_1__({\n                        [this.styles.codeFoldGutter]: isUnifiedViewWithoutLineNumbers,\n                    }) }), isUnifiedViewWithoutLineNumbers ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", {}), content] })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [content, this.props.renderGutter ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", {}) : null, (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", {}), !hideLineNumbers ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", {}) : null] }))] }, `${leftBlockLineNumber}-${rightBlockLineNumber}`));\n    };\n    /**\n     * Generates the entire diff view.\n     */\n    renderDiff = () => {\n        const { oldValue, newValue, splitView, disableWordDiff, compareMethod, linesOffset, } = this.props;\n        const { lineInformation, diffLines } = (0,_compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.computeLineInformation)(oldValue, newValue, disableWordDiff, compareMethod, linesOffset, this.props.alwaysShowLines);\n        const extraLines = this.props.extraLinesSurroundingDiff < 0\n            ? 0\n            : Math.round(this.props.extraLinesSurroundingDiff);\n        const { lineBlocks, blocks } = (0,_compute_hidden_blocks_js__WEBPACK_IMPORTED_MODULE_3__.computeHiddenBlocks)(lineInformation, diffLines, extraLines);\n        const diffNodes = lineInformation.map((line, lineIndex) => {\n            if (this.props.showDiffOnly) {\n                const blockIndex = lineBlocks[lineIndex];\n                if (blockIndex !== undefined) {\n                    const lastLineOfBlock = blocks[blockIndex].endLine === lineIndex;\n                    if (!this.state.expandedBlocks.includes(blockIndex) &&\n                        lastLineOfBlock) {\n                        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: this.renderSkippedLineIndicator(blocks[blockIndex].lines, blockIndex, line.left.lineNumber, line.right.lineNumber) }, lineIndex));\n                    }\n                    if (!this.state.expandedBlocks.includes(blockIndex)) {\n                        return null;\n                    }\n                }\n            }\n            return splitView\n                ? this.renderSplitView(line, lineIndex)\n                : this.renderInlineView(line, lineIndex);\n        });\n        return {\n            diffNodes,\n            blocks,\n            lineInformation,\n        };\n    };\n    render = () => {\n        const { oldValue, newValue, useDarkTheme, leftTitle, rightTitle, splitView, compareMethod, hideLineNumbers, nonce, } = this.props;\n        if (typeof compareMethod === \"string\" &&\n            compareMethod !== _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffMethod.JSON) {\n            if (typeof oldValue !== \"string\" || typeof newValue !== \"string\") {\n                throw Error('\"oldValue\" and \"newValue\" should be strings');\n            }\n        }\n        this.styles = this.computeStyles(this.props.styles, useDarkTheme, nonce);\n        const nodes = this.renderDiff();\n        let colSpanOnSplitView = 3;\n        let colSpanOnInlineView = 4;\n        if (hideLineNumbers) {\n            colSpanOnSplitView -= 1;\n            colSpanOnInlineView -= 1;\n        }\n        if (this.props.renderGutter) {\n            colSpanOnSplitView += 1;\n            colSpanOnInlineView += 1;\n        }\n        let deletions = 0;\n        let additions = 0;\n        for (const l of nodes.lineInformation) {\n            if (l.left.type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.ADDED) {\n                additions++;\n            }\n            if (l.right.type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.ADDED) {\n                additions++;\n            }\n            if (l.left.type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.REMOVED) {\n                deletions++;\n            }\n            if (l.right.type === _compute_lines_js__WEBPACK_IMPORTED_MODULE_4__.DiffType.REMOVED) {\n                deletions++;\n            }\n        }\n        const totalChanges = deletions + additions;\n        const percentageAddition = Math.round((additions / totalChanges) * 100);\n        const blocks = [];\n        for (let i = 0; i < 5; i++) {\n            if (percentageAddition > i * 20) {\n                blocks.push((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: classnames__WEBPACK_IMPORTED_MODULE_1__(this.styles.block, this.styles.blockAddition) }, i));\n            }\n            else {\n                blocks.push((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { className: classnames__WEBPACK_IMPORTED_MODULE_1__(this.styles.block, this.styles.blockDeletion) }, i));\n            }\n        }\n        const allExpanded = this.state.expandedBlocks.length === nodes.blocks.length;\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: this.styles.summary, role: \"banner\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", { type: \"button\", className: this.styles.allExpandButton, onClick: () => {\n                                this.setState({\n                                    expandedBlocks: allExpanded\n                                        ? []\n                                        : nodes.blocks.map((b) => b.index),\n                                });\n                            }, children: allExpanded ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_fold_js__WEBPACK_IMPORTED_MODULE_7__.Fold, {}) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_expand_js__WEBPACK_IMPORTED_MODULE_5__.Expand, {}) }), \" \", totalChanges, (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { style: { display: \"flex\", gap: \"1px\" }, children: blocks }), this.props.summary ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", { children: this.props.summary }) : null] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"table\", { className: classnames__WEBPACK_IMPORTED_MODULE_1__(this.styles.diffContainer, {\n                        [this.styles.splitView]: splitView,\n                    }), onMouseUp: () => {\n                        const elements = document.getElementsByClassName(\"right\");\n                        for (let i = 0; i < elements.length; i++) {\n                            const element = elements.item(i);\n                            element.classList.remove(this.styles.noSelect);\n                        }\n                        const elementsLeft = document.getElementsByClassName(\"left\");\n                        for (let i = 0; i < elementsLeft.length; i++) {\n                            const element = elementsLeft.item(i);\n                            element.classList.remove(this.styles.noSelect);\n                        }\n                    }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"tbody\", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"tr\", { children: [!this.props.hideLineNumbers ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { width: \"50px\" }) : null, !splitView && !this.props.hideLineNumbers ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { width: \"50px\" })) : null, this.props.renderGutter ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { width: \"50px\" }) : null, (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { width: \"28px\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { width: \"100%\" }), splitView ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [!this.props.hideLineNumbers ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { width: \"50px\" }) : null, this.props.renderGutter ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { width: \"50px\" }) : null, (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { width: \"28px\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", { width: \"100%\" })] })) : null] }), leftTitle || rightTitle ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"tr\", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"th\", { colSpan: splitView ? colSpanOnSplitView : colSpanOnInlineView, className: classnames__WEBPACK_IMPORTED_MODULE_1__(this.styles.titleBlock, this.styles.column), children: leftTitle ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"pre\", { className: this.styles.contentText, children: leftTitle })) : null }), splitView ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"th\", { colSpan: colSpanOnSplitView, className: classnames__WEBPACK_IMPORTED_MODULE_1__(this.styles.titleBlock, this.styles.column), children: rightTitle ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"pre\", { className: this.styles.contentText, children: rightTitle })) : null })) : null] })) : null, nodes.diffNodes] }) })] }));\n    };\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DiffViewer);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/styles.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-diff-viewer-continued/lib/esm/src/styles.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _emotion_css_create_instance__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/css/create-instance */ \"(ssr)/./node_modules/@emotion/css/create-instance/dist/emotion-css-create-instance.development.esm.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((styleOverride, useDarkTheme = false, nonce = \"\") => {\n    const { variables: overrideVariables = {}, ...styles } = styleOverride;\n    const themeVariables = {\n        light: {\n            ...{\n                diffViewerBackground: \"#fff\",\n                diffViewerColor: \"#212529\",\n                addedBackground: \"#e6ffed\",\n                addedColor: \"#24292e\",\n                removedBackground: \"#ffeef0\",\n                removedColor: \"#24292e\",\n                changedBackground: \"#fffbdd\",\n                wordAddedBackground: \"#acf2bd\",\n                wordRemovedBackground: \"#fdb8c0\",\n                addedGutterBackground: \"#cdffd8\",\n                removedGutterBackground: \"#ffdce0\",\n                gutterBackground: \"#f7f7f7\",\n                gutterBackgroundDark: \"#f3f1f1\",\n                highlightBackground: \"#fffbdd\",\n                highlightGutterBackground: \"#fff5b1\",\n                codeFoldGutterBackground: \"#dbedff\",\n                codeFoldBackground: \"#f1f8ff\",\n                emptyLineBackground: \"#fafbfc\",\n                gutterColor: \"#212529\",\n                addedGutterColor: \"#212529\",\n                removedGutterColor: \"#212529\",\n                codeFoldContentColor: \"#212529\",\n                diffViewerTitleBackground: \"#fafbfc\",\n                diffViewerTitleColor: \"#212529\",\n                diffViewerTitleBorderColor: \"#eee\",\n            },\n            ...(overrideVariables.light || {}),\n        },\n        dark: {\n            ...{\n                diffViewerBackground: \"#2e303c\",\n                diffViewerColor: \"#FFF\",\n                addedBackground: \"#044B53\",\n                addedColor: \"white\",\n                removedBackground: \"#632F34\",\n                removedColor: \"white\",\n                changedBackground: \"#3e302c\",\n                wordAddedBackground: \"#055d67\",\n                wordRemovedBackground: \"#7d383f\",\n                addedGutterBackground: \"#034148\",\n                removedGutterBackground: \"#632b30\",\n                gutterBackground: \"#2c2f3a\",\n                gutterBackgroundDark: \"#262933\",\n                highlightBackground: \"#2a3967\",\n                highlightGutterBackground: \"#2d4077\",\n                codeFoldGutterBackground: \"#262831\",\n                codeFoldBackground: \"#262831\",\n                emptyLineBackground: \"#363946\",\n                gutterColor: \"#666c87\",\n                addedGutterColor: \"#8c8c8c\",\n                removedGutterColor: \"#8c8c8c\",\n                codeFoldContentColor: \"#656a8b\",\n                diffViewerTitleBackground: \"#2f323e\",\n                diffViewerTitleColor: \"#757a9b\",\n                diffViewerTitleBorderColor: \"#353846\",\n            },\n            ...(overrideVariables.dark || {}),\n        },\n    };\n    const variables = useDarkTheme ? themeVariables.dark : themeVariables.light;\n    const { css, cx } = (0,_emotion_css_create_instance__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({ key: \"react-diff\", nonce });\n    const content = css({\n        width: \"auto\",\n        label: \"content\",\n    });\n    const splitView = css({\n        label: \"split-view\",\n    });\n    const summary = css({\n        background: variables.diffViewerTitleBackground,\n        color: variables.diffViewerTitleColor,\n        padding: \"0.5em 1em\",\n        display: \"flex\",\n        alignItems: \"center\",\n        gap: \"0.5em\",\n        fontFamily: \"monospace\",\n        fill: variables.diffViewerTitleColor,\n    });\n    const diffContainer = css({\n        width: \"100%\",\n        minWidth: \"1000px\",\n        overflowX: \"auto\",\n        tableLayout: \"fixed\",\n        background: variables.diffViewerBackground,\n        pre: {\n            margin: 0,\n            whiteSpace: \"pre-wrap\",\n            lineHeight: \"1.6em\",\n            width: \"fit-content\",\n        },\n        label: \"diff-container\",\n        borderCollapse: \"collapse\",\n    });\n    const lineContent = css({\n        overflow: \"hidden\",\n        width: \"100%\",\n    });\n    const contentText = css({\n        color: variables.diffViewerColor,\n        whiteSpace: \"pre-wrap\",\n        fontFamily: \"monospace\",\n        lineBreak: \"anywhere\",\n        textDecoration: \"none\",\n        label: \"content-text\",\n    });\n    const unselectable = css({\n        userSelect: \"none\",\n        label: \"unselectable\",\n    });\n    const allExpandButton = css({\n        background: \"transparent\",\n        border: \"none\",\n        cursor: \"pointer\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        margin: 0,\n        label: \"all-expand-button\",\n        \":hover\": {\n            fill: variables.addedGutterColor,\n        },\n        \":focus\": {\n            outline: `1px ${variables.addedGutterColor} solid`,\n        },\n    });\n    const titleBlock = css({\n        background: variables.diffViewerTitleBackground,\n        padding: \"0.5em\",\n        lineHeight: \"1.4em\",\n        height: \"2.4em\",\n        overflow: \"hidden\",\n        width: \"50%\",\n        borderBottom: `1px solid ${variables.diffViewerTitleBorderColor}`,\n        label: \"title-block\",\n        \":last-child\": {\n            borderLeft: `1px solid ${variables.diffViewerTitleBorderColor}`,\n        },\n        [`.${contentText}`]: {\n            color: variables.diffViewerTitleColor,\n        },\n    });\n    const lineNumber = css({\n        color: variables.gutterColor,\n        label: \"line-number\",\n    });\n    const diffRemoved = css({\n        background: variables.removedBackground,\n        color: variables.removedColor,\n        pre: {\n            color: variables.removedColor,\n        },\n        [`.${lineNumber}`]: {\n            color: variables.removedGutterColor,\n        },\n        label: \"diff-removed\",\n    });\n    const diffAdded = css({\n        background: variables.addedBackground,\n        color: variables.addedColor,\n        pre: {\n            color: variables.addedColor,\n        },\n        [`.${lineNumber}`]: {\n            color: variables.addedGutterColor,\n        },\n        label: \"diff-added\",\n    });\n    const diffChanged = css({\n        background: variables.changedBackground,\n        [`.${lineNumber}`]: {\n            color: variables.gutterColor,\n        },\n        label: \"diff-changed\",\n    });\n    const wordDiff = css({\n        padding: 2,\n        display: \"inline-flex\",\n        borderRadius: 4,\n        wordBreak: \"break-all\",\n        label: \"word-diff\",\n    });\n    const wordAdded = css({\n        background: variables.wordAddedBackground,\n        textDecoration: \"none\",\n        label: \"word-added\",\n    });\n    const wordRemoved = css({\n        background: variables.wordRemovedBackground,\n        textDecoration: \"none\",\n        label: \"word-removed\",\n    });\n    const codeFoldGutter = css({\n        backgroundColor: variables.codeFoldGutterBackground,\n        label: \"code-fold-gutter\",\n        minWidth: \"50px\",\n        width: \"50px\",\n    });\n    const codeFoldContentContainer = css({\n        padding: \"\",\n    });\n    const codeFoldExpandButton = css({\n        background: variables.codeFoldBackground,\n        cursor: \"pointer\",\n        display: \"inline\",\n        margin: 0,\n        border: \"none\",\n        label: \"code-fold-expand-button\",\n    });\n    const codeFoldContent = css({\n        color: variables.codeFoldContentColor,\n        fontFamily: \"monospace\",\n        label: \"code-fold-content\",\n    });\n    const block = css({\n        display: \"block\",\n        width: \"10px\",\n        height: \"10px\",\n        backgroundColor: \"#ddd\",\n        borderWidth: \"1px\",\n        borderStyle: \"solid\",\n        borderColor: variables.diffViewerTitleBorderColor,\n    });\n    const blockAddition = css({\n        backgroundColor: variables.wordAddedBackground,\n    });\n    const blockDeletion = css({\n        backgroundColor: variables.wordRemovedBackground,\n    });\n    const codeFold = css({\n        backgroundColor: variables.codeFoldBackground,\n        height: 40,\n        fontSize: 14,\n        alignItems: \"center\",\n        userSelect: \"none\",\n        fontWeight: 700,\n        label: \"code-fold\",\n        a: {\n            textDecoration: \"underline !important\",\n            cursor: \"pointer\",\n            pre: {\n                display: \"inline\",\n            },\n        },\n    });\n    const emptyLine = css({\n        backgroundColor: variables.emptyLineBackground,\n        label: \"empty-line\",\n    });\n    const marker = css({\n        width: 28,\n        paddingLeft: 10,\n        paddingRight: 10,\n        userSelect: \"none\",\n        label: \"marker\",\n        [`&.${diffAdded}`]: {\n            pre: {\n                color: variables.addedColor,\n            },\n        },\n        [`&.${diffRemoved}`]: {\n            pre: {\n                color: variables.removedColor,\n            },\n        },\n    });\n    const highlightedLine = css({\n        background: variables.highlightBackground,\n        label: \"highlighted-line\",\n        [`.${wordAdded}, .${wordRemoved}`]: {\n            backgroundColor: \"initial\",\n        },\n    });\n    const highlightedGutter = css({\n        label: \"highlighted-gutter\",\n    });\n    const gutter = css({\n        userSelect: \"none\",\n        minWidth: 50,\n        width: \"50px\",\n        padding: \"0 10px\",\n        whiteSpace: \"nowrap\",\n        label: \"gutter\",\n        textAlign: \"right\",\n        background: variables.gutterBackground,\n        \"&:hover\": {\n            cursor: \"pointer\",\n            background: variables.gutterBackgroundDark,\n            pre: {\n                opacity: 1,\n            },\n        },\n        pre: {\n            opacity: 0.5,\n        },\n        [`&.${diffAdded}`]: {\n            background: variables.addedGutterBackground,\n        },\n        [`&.${diffRemoved}`]: {\n            background: variables.removedGutterBackground,\n        },\n        [`&.${highlightedGutter}`]: {\n            background: variables.highlightGutterBackground,\n            \"&:hover\": {\n                background: variables.highlightGutterBackground,\n            },\n        },\n    });\n    const emptyGutter = css({\n        \"&:hover\": {\n            background: variables.gutterBackground,\n            cursor: \"initial\",\n        },\n        label: \"empty-gutter\",\n    });\n    const line = css({\n        verticalAlign: \"baseline\",\n        label: \"line\",\n        textDecoration: \"none\",\n    });\n    const column = css({});\n    const defaultStyles = {\n        diffContainer,\n        diffRemoved,\n        diffAdded,\n        diffChanged,\n        splitView,\n        marker,\n        highlightedGutter,\n        highlightedLine,\n        gutter,\n        line,\n        lineContent,\n        wordDiff,\n        wordAdded,\n        summary,\n        block,\n        blockAddition,\n        blockDeletion,\n        wordRemoved,\n        noSelect: unselectable,\n        codeFoldGutter,\n        codeFoldExpandButton,\n        codeFoldContentContainer,\n        codeFold,\n        emptyGutter,\n        emptyLine,\n        lineNumber,\n        contentText,\n        content,\n        column,\n        codeFoldContent,\n        titleBlock,\n        allExpandButton,\n    };\n    const computerOverrideStyles = Object.keys(styles).reduce((acc, key) => ({\n        ...acc,\n        ...{\n            [key]: css(styles[key]),\n        },\n    }), {});\n    return Object.keys(defaultStyles).reduce((acc, key) => ({\n        ...acc,\n        ...{\n            [key]: computerOverrideStyles[key]\n                ? cx(defaultStyles[key], computerOverrideStyles[key])\n                : defaultStyles[key],\n        },\n    }), {});\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-diff-viewer-continued/lib/esm/src/styles.js\n");

/***/ })

};
;